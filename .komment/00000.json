[
  {
    "name": "PageInfo.java",
    "path": "api/src/main/java/com/myhome/utils/PageInfo.java",
    "content": {
      "structured": {
        "description": "A `PageInfo` class that represents information about a page of results in a larger dataset. The class has four fields: currentPage, pageLimit, totalPages, and totalElements. It also provides constructors for creating instances of the class from a Pageable object and a Page object. Additionally, the code includes methods for generating a `PageInfo` object based on a Pageable and a Page parameter.",
        "diagram": {
          "path": "api/src/main/java/com/myhome/utils/PageInfo.java",
          "gviz": "digraph G {\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n    node [style=filled,color=\"#717D86\", shape=rectangle, fontname=\"Courier New\"]\n    \n    subgraph cluster_2 {\n        label=\"springframework/data\"\n        color=\"#33363A\"\n        Pageable [label=\"org.springframework.data.domain.Pageable\", style=\"rounded,filled\"]\n        Page [label=\"org.springframework.data.domain.Page\", style=\"rounded,filled\"]\n    }\n    subgraph cluster_3 {\n        label=\"myhome\"\n        color=\"#33363A\"\n        subgraph cluster_main {\n            // style=filled\n            color=\"#00000000\"\n            PageInfo [] [fontsize=\"20pt\",style=filled,color=\"#26de81\",shape=square, fontname=\"Courier New\"]\n            label = \"\"\n        }\n        PaymentController []\n        PaymentControllerTest []\n    }\n    RequiredArgsConstructor [label=\"lombok.RequiredArgsConstructor\", style=\"rounded,filled\"]\n    ToString [label=\"lombok.ToString\", style=\"rounded,filled\"]\n    Getter [label=\"lombok.Getter\", style=\"rounded,filled\"]\n    AccessLevel [label=\"lombok.AccessLevel\", style=\"rounded,filled\"]\n    EqualsAndHashCode [label=\"lombok.EqualsAndHashCode\", style=\"rounded,filled\"]\n    PaymentControllerTest -> PageInfo [style=\"dashed\"]\n    PageInfo -> EqualsAndHashCode [style=\"dashed\"]\n    PageInfo -> Getter [style=\"dashed\"]\n    PageInfo -> ToString [style=\"dashed\"]\n    Pageable -> PageInfo [penwidth=2]\n    PaymentController -> PageInfo [style=\"dashed\"]\n    PageInfo -> AccessLevel [style=\"dashed\"]\n    PageInfo -> RequiredArgsConstructor [style=\"dashed\"]\n    PageInfo -> Page [style=\"dashed\"]\n    PageInfo -> Pageable [style=\"dashed\"]\n}\n",
          "d2": "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" d2Version=\"v0.6.5\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 1712 1515\"><svg id=\"d2-svg\" class=\"d2-1694682388\" width=\"1712\" height=\"1515\" viewBox=\"11 11 1712 1515\"><rect x=\"11.000000\" y=\"11.000000\" width=\"1712.000000\" height=\"1515.000000\" rx=\"0.000000\" fill=\"#151719\" stroke-width=\"0\" /><style type=\"text/css\"><![CDATA[\n.d2-1694682388 .text {\n\tfont-family: \"d2-1694682388-font-regular\";\n}\n@font-face {\n\tfont-family: d2-1694682388-font-regular;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-1694682388 .text-italic {\n\tfont-family: \"d2-1694682388-font-italic\";\n}\n@font-face {\n\tfont-family: d2-1694682388-font-italic;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-1694682388 .text-mono {\n\tfont-family: \"d2-1694682388-font-mono\";\n}\n@font-face {\n\tfont-family: d2-1694682388-font-mono;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-1694682388 .text-mono-bold {\n\tfont-family: \"d2-1694682388-font-mono-bold\";\n}\n@font-face {\n\tfont-family: d2-1694682388-font-mono-bold;\n\tsrc: url(\"data:application/font-woff;base64,d09GRgABAAAAABEsAAwAAAAAHTgAAQScAAAAAAAAAAAAAAAAAAAAAAAAAABPUy8yAAABHAAAAGAAAABgmKbWhWNtYXAAAAF8AAAAkQAAALoDUgO5Z2FzcAAAAhAAAAAIAAAACAAAABBnbHlmAAACGAAACMIAAAwYp00xkGhlYWQAAArcAAAANgAAADYbI9ohaGhlYQAACxQAAAAkAAAAJAYzALlobXR4AAALOAAAAG0AAACUVrgJDmxvY2EAAAuoAAAATAAAAEw3VjqwbWF4cAAAC/QAAAAgAAAAIABZAmpuYW1lAAAMFAAABO8AAA2sAwZtKnBvc3QAABEEAAAAIAAAACD/uAAzcHJlcAAAESQAAAAHAAAAB2gGjIUABAJYArwABQAAAooCWAAAAEsCigJYAAABXgAyAR4AAAILAwkDBAMCAgQgAAL3AgA4AwAAAAAAAAAAQURCTwCgACD//wPY/u8AAAQkAcZgAAGfAAAAAAHeApQAAAAgAAN4nGzMSWrCABhA4S9Nmk5pm07pPN6klFIKLkS8gEvxAOKRVHCrIA43+8Xg0rf8Fg+JVIJCZoJKKZX79uPXv4amtq6+QQQ7/6u9paO39VjHKpaxiHnMYhrjGMWwvu4rcSCVOZQ7cuzEqTOFcxcula5cu3HrTuXeg0dPnr149ebdh09fbAAAAP//AQAA//9g1R75AAAAAAEAAf//AA94nHxWb0wb5x3+va8PG+zD8WGfz/YZ2/fHPv/BNviwD3BsAgFiwBBMTAkLgZQmW9dAl8Zkoyt82Lppmep23Ug3qu5LpURapW7rKq1q1+XL2g/NKk1Tt2rSpmnrWrVS9sVV+TTBebqzQ6BT9+U9AS/v7/c8v+d53hdaQADAaXwDDNAGJHQADVChOCooS5JgMikSIyuK4MeUgDvUWzfDYSKyubx8i4j5d/zXlvCN/dVzUysr7W/85spyNvvSG6gCgKENAJ/GVWgHCqBil+2CIRSSBKPRZJDSHN327ivv/rRMekmC9LTP2VAfru6vo4meR2X50R71tRcqFUCQqe/iAbwDPoBRPoHTvZmMnHIyplBI4I1G2uF0yqmMwhiN6GJurdx95un5/EWuxChiohCNTvaIA65SeJWMzm3Nrj5fkgPnnG55aejkcirgWUj2AIJFAOzEVbDoeGmOlmmB5uhF9Ir60aefohCubj75xI83AQBBV30XC3gHOK2XUOgLekkLaZkyGtH8meszM98vDy/5S3RKio5I/JhsF8zLH3Jr5ORzj649PyMHztGeRjtm85UN9c/+br3OCQDsuteTTMtpmRIogTqx/er29qu4ure3v45sak3fOwGArc292r40RwuUTE/s7KC3d3Y20Y3NTXVVax8QXAbAAVyFFv1ciqMvbyMeV/dr+t8xTALgHlwFsjF9OeV00g6jURBoSk5l0r0hQZj85FRldGx9tDyZy+ayk7gqLZ4uriT/jmYzqd4IGGAMABeaZ7i/6BS7YhfGPhm9Ojp6dbRcGMjlBgr9X/7jLVwNLkxNLsX/jS70dHeH1P8sq89qfafqu1jCOxDXeZcUned0bygkSZ9XhDYEhvFhrSKKDn8rPRdcSCbjroS/LJ6QcpdPZa92TfIj3WLC2+0/3ZXns4+R3YlLvlDAzbB0u2hNjnZn5tNd0fNu1tdp9zhI3pYcSWQW+wCBHwD34yqYNFwNpv/1Fva8hW2bm/u1Boe5+i5m0B74IAow31CJksCaQExSHutsUIJmAknTihVrHf8zNR7+ySsGV5x3dcveXn6yFB27mNmwEMEvYW7AM14KUH4yPBI9c9bMBCgLbb3g8FE9DxXVj/q84ausY5Zw8s5jTjNgKNR3cQTfBhrEBluCSdODSdZZ0ichpTI6ewJvNNFOJ5rlT/kIsrLdYug8JQ4udOdWFtguj0MKuOIMHSf5QAbffnma9eUfK849PrjhG5LjWR/tvkPZAMFJzRNoDzr/ryc0f85Pb43PPFnMXvCPdKa90WFRGIxIQ2y2a43MXZudvZYL+s457PyJWOwE77WfD4o6n8n6Lrbh2+AAXq9wr4AsaWrXeExrPB6UQ7BUya2kI8ddhGl7w2Jgx90xuyPiZBNsinzq8dL6oNc99dL+SZkVN2j3nY5jvlxyfLThD6WJRTyCRePMxKU5U+//QJqY2hqf+Prw1MPpFqxeRzQj94gZnzjSzee4ntjDGq7Stfzg5RFHsO0h7/FcYDglDwU6qAVWkxLMAuBxfAdsDb8dFTKF0gpHv598cDpW9Htdcmcyod69jvrRfv/5DGVebTNH4ypGW2vGCoABeutxfBztQQqG4cxB/xox9z8ZOcXItND0Ix+SdDSynNJ/YbgvCx2kvfGzcLAR0UOXslKI7uQ8bCj7YF9CvHOxrV1ZHLCKHaQ5Eltc+Urhu7M073DwtENbufBxviuWZwWr3TbyJ7avy5eyE9aw353qIDqGY8dnwuSqRbD3j4stLa22dnvHwMneUgLd6QiyHtFuFz1ssEO9YWMpdzthIBkr29mYUwEAe3WN6/nY1DZNCZQ+IhNV2G41eEt95altLuyLe/Dtl5c746tL6h+QP5Vg3eqvAaBeh2kA9Cb+zBjSbj8wghhveLioz+U2tALZSEpZkREtS4q9uE289qJ6691ny3/Dt9XL76hPb31wTn0bEMj1XezHv9VuOk2lWjxQjgOhPHX+wgsokfJ1BJlAaJC8soS+V1EhIbS2rpLHdEza/ZtHe5rKK5TMNCAx94HpuA4ACl8zE9ZULJBotaZj6YEqa6XNFavV6jCjWs4Xi4T55AMT6k00G2fc6q/QLOPUvgfcoT1wHK5zmLoNCxE401eeblCHasOBxFHmGp6MoD04piXi55xyOF10GaGuofVCYX2osfJxhonz+tp0fWP9RsP3jRX0HCvoNfQcmz/o9EC6AkPbj+ZYYcNi8E+F81qA9XGDHsI0570fY6/jn6VYIX+1OLcx6PWUfojEwzmmYSpgm86LljNpRdDLHKSNIlOGozmzZSJco4IeNtFhLT/v3g+a15+bcQf0sPFx8v5ZJB5OGgTrAFhEe9BxZNYN35uo9Q3SEPxqlos4fUzQm1gIoNpqLms2P2EyZU6qKiBI13f1GUaP3ocJLOmjOJq/9y7D8PC3k4PxS5lIyMImg5fOfvORk2vScLAcYXy23sHiA5yyRsb9i50+N2U51k62Oov9Y3Mx91nG1Wa3OOxWqqs/Ei/E7t3HIXxdu9/16aeFtKLI+svpUDh+5/T56OaT9sffe8+ZEDu7nR7uNKmsDP1yzbizU/lFMEGbWx8xU9p5+foubkc1TZPzmnfkpnOoZsL/Y6647Y94u9zbGxaCmyFXl1BK/SCVcHFoTLWdCibu3c2oBu0AFYPMOJ0arYoiG/765o1p0mkhLDQ5/fRrqHY3WAyHi8G7qk33HQGAy6imvemO/N+hEwSp+Wo1zZWe8beYCEOLxeS/HDC1txAtLYT3evHnLNHWQhhajR5U+1gcD4UmhJs3te+4+LFqe5ErRP2jyRf1ev56HmdRDVgda3N2inKkZSv+gTNk85gdbbEe0vyXH52xukjC7LKMP/U2k5v7nZG4YjAEvR704fvCpBQsiu+rlnw51shGLdNeQjXtjfegHkLI+Q46h7YqTby/x3n0DP5Mey8O8U210A4j6or29UVjioLzPeGILEfCPQDwXwAAAP//AQAA//+2TG4FAAAAAQAAAAEEnBIv0eRfDzz1AAMD6AAAAADcHHOkAAAAAN2XHqD/TP46AwwEJAABAAYAAgAAAAAAAAABAAAD2P7vAAACWP9M/0wDDAABAAAAAAAAAAAAAAAAAAAAJXicNMw7aoJhFAbhYUiTVaRIGwh4rRRBkB8VC6sp3IGtq3RVInxWA4fzPsav8W2sjJvxZ+yMo3E3TsbBmBk/xsaYjL3xb6yNq7EY94txNubDnsbfpw9jObztML9G39vnCwAA//8BAAD//0ksFhEAAAAAAAAqAEwAfACSAMYA3ADyAQIBJAFOAZIBpAHkAhwCTAKCAroC4ANWA3oDhgOgA8AD9AQWBEgEgAS2BNYFFgU+BWAFfAW0BeQF9AYMAAEAAAAlAfgAKgBuAAYAAQAAAAAAAAAAAAAAAAADAAN4nJyWTW8b1RfGf2OntsdN+88/lNIUKJcSSholEztKoypFArdpVUNISpxSoVIJx3acUfwme9w2rFmwZMVnAMSqqy4QYpUFC5aIFSvEig+AWCA0Z449Y9ckbVWpee7c8/o8595r4J3Y38SxxmzgABRbnONAcYwUvyuOs8KfiseYsS4oPkbZWlecYNp6pDjJj9YvilMsxb5SbLMU+0nxcRZj/yg+ETfxjOKTLCVuKZ5iOvF5gC1IJ75WbDGe0FxWjInED4rjTCR+VjzG2cRvio8xnvhLcYLJ5JjiJJPJ04pTTCZnFNtMJlcUp5lOrik+jkm2FI8zl/xS8Qkyye8Vn8RJKlfW/1hMnVU8weVUL87/uZDq9TXJ26lvFb8QqfkU51N/KH4x0vvpSO8vRXKdieSa4qSdUnyWcbvX48sR31c4ZZ9X/Cppe1nxuYjva4zb7yo2TNi9+l8PZ8M6z6T9ieI3SNsNxdOROG9GaniLJfuh4ovM2t8pnsWxdWasOebSPY3mI3kdMmmdE2shUkOGmfSniheZTX+h+Fqk31Xh8BsMi2TIksEwr6tFWeUo02SbCoYC+3TwqFCngyFPgxJN2rTk/6LslTHMsIuHR4sVFljggfxzKPajOeJZZ4GLzGF4gIvHLoZNKnSo0Oa+RrtBkwYehnWK1P1azBkKNOnSpkTFTOFE1xiu0aQs6BZtmlylSY0yWRzp9DJXyLHKVTa4MuDb8wz85vueh8c3fbuPpPYOrlRtBjLu0sSTzhvc7+85ZMmyzBXqFNmjIlY7VHgoGRZxuITDMpdYlljPXq8rihUxeKJUWVQs0mYPQ5Od59balS597Xy/2zREyWCvgKeWQfYGZRbE30iPu8KVkchd0biNK9bOc1VziyJdahhWcTDc1Kj+hG0Jr/7frkyeX3eFxjNMqsc+LSpssat8hpNZEA49HginIeM1XFGgITPtc9IVFoK+e6wVyLOGYUPiNwYirw1E8DsZNWFZ6TesbDBvqP99irjUKLJNTXbCk1eUvDk+FOyxghlip0NJFGrhiUYdieWIBlUW2OAGa0OVHM1RWf4G2m/T7U9P0J0/Nf55z1EQ5QtmSk5bTlgrCCN3yLPFTTa4zZasc2yySY51tshzXXw32JSTu8E6q+KRFxzs3ZATsM7HGN4nLzZ+7IryEyjmn8mWVN+R2oNZdqnTEs79yh3ptSIdPrvChh2N2vPtiE8Jlx2xNKJfgypdilR1KlpSYV247M1GeOqCiahLL7624X6Vpty0bTm5flTDvt4d/rQGNQU3hPcUqjrPNTP/faNtyunzuwhRXroIZrzTZ78i3Q6uq/qWuHKfBveV4YLwUZDXxMVY71GS7L6vz4WJP3riy+MnvhyIym22cYMpjR9wjX3JVtPqDNvCinhwN/Yr9+iIfh1R16/oM4ni3013yXBP75kmVbnZWsJ5Sc7ivqyC+bnL/CG2Rb0v26LXntjPjshdlteiJtoZ6a2q0ae5Jxx7OhvBHWto0JU3uC27wSmV3sgeWs9wpI72MKd1Dao4J6/CsCbD2o6yeixfh5QZyw6oPcrvQH55VOX98Nm4Iye/KtN8nYf6bq71v4XoA+HSFV4K8kb591jwCoeevXf5qsQvsTdy5sMZnx+Z9Sifp7cc7PYo68EeD7cd5uAo+1G/WEbbKXP/AgAA//8BAAD///u8HqIAAAMAAAAAAAD/tQAyAAAAAQAAAAAAAAAAAAAAAAAAAAC4Af+FsASNAA==\");\n}]]></style><style type=\"text/css\"><![CDATA[.shape {\n  shape-rendering: geometricPrecision;\n  stroke-linejoin: round;\n}\n.connection {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n}\n.blend {\n  mix-blend-mode: multiply;\n  opacity: 0.5;\n}\n\n\t\t.d2-1694682388 .fill-N1{fill:#ECEDED;}\n\t\t.d2-1694682388 .fill-N2{fill:#676C7E;}\n\t\t.d2-1694682388 .fill-N3{fill:#9499AB;}\n\t\t.d2-1694682388 .fill-N4{fill:#CFD2DD;}\n\t\t.d2-1694682388 .fill-N5{fill:#DEE1EB;}\n\t\t.d2-1694682388 .fill-N6{fill:#EEF1F8;}\n\t\t.d2-1694682388 .fill-N7{fill:#151719;}\n\t\t.d2-1694682388 .fill-B1{fill:#717D86;}\n\t\t.d2-1694682388 .fill-B2{fill:#717D86;}\n\t\t.d2-1694682388 .fill-B3{fill:#ffff00;}\n\t\t.d2-1694682388 .fill-B4{fill:#151719;}\n\t\t.d2-1694682388 .fill-B5{fill:#151719;}\n\t\t.d2-1694682388 .fill-B6{fill:#151719;}\n\t\t.d2-1694682388 .fill-AA2{fill:#676C7E;}\n\t\t.d2-1694682388 .fill-AA4{fill:#CFD2DD;}\n\t\t.d2-1694682388 .fill-AA5{fill:#DEE1EB;}\n\t\t.d2-1694682388 .fill-AB4{fill:#CFD2DD;}\n\t\t.d2-1694682388 .fill-AB5{fill:#DEE1EB;}\n\t\t.d2-1694682388 .stroke-N1{stroke:#ECEDED;}\n\t\t.d2-1694682388 .stroke-N2{stroke:#676C7E;}\n\t\t.d2-1694682388 .stroke-N3{stroke:#9499AB;}\n\t\t.d2-1694682388 .stroke-N4{stroke:#CFD2DD;}\n\t\t.d2-1694682388 .stroke-N5{stroke:#DEE1EB;}\n\t\t.d2-1694682388 .stroke-N6{stroke:#EEF1F8;}\n\t\t.d2-1694682388 .stroke-N7{stroke:#151719;}\n\t\t.d2-1694682388 .stroke-B1{stroke:#717D86;}\n\t\t.d2-1694682388 .stroke-B2{stroke:#717D86;}\n\t\t.d2-1694682388 .stroke-B3{stroke:#ffff00;}\n\t\t.d2-1694682388 .stroke-B4{stroke:#151719;}\n\t\t.d2-1694682388 .stroke-B5{stroke:#151719;}\n\t\t.d2-1694682388 .stroke-B6{stroke:#151719;}\n\t\t.d2-1694682388 .stroke-AA2{stroke:#676C7E;}\n\t\t.d2-1694682388 .stroke-AA4{stroke:#CFD2DD;}\n\t\t.d2-1694682388 .stroke-AA5{stroke:#DEE1EB;}\n\t\t.d2-1694682388 .stroke-AB4{stroke:#CFD2DD;}\n\t\t.d2-1694682388 .stroke-AB5{stroke:#DEE1EB;}\n\t\t.d2-1694682388 .background-color-N1{background-color:#ECEDED;}\n\t\t.d2-1694682388 .background-color-N2{background-color:#676C7E;}\n\t\t.d2-1694682388 .background-color-N3{background-color:#9499AB;}\n\t\t.d2-1694682388 .background-color-N4{background-color:#CFD2DD;}\n\t\t.d2-1694682388 .background-color-N5{background-color:#DEE1EB;}\n\t\t.d2-1694682388 .background-color-N6{background-color:#EEF1F8;}\n\t\t.d2-1694682388 .background-color-N7{background-color:#151719;}\n\t\t.d2-1694682388 .background-color-B1{background-color:#717D86;}\n\t\t.d2-1694682388 .background-color-B2{background-color:#717D86;}\n\t\t.d2-1694682388 .background-color-B3{background-color:#ffff00;}\n\t\t.d2-1694682388 .background-color-B4{background-color:#151719;}\n\t\t.d2-1694682388 .background-color-B5{background-color:#151719;}\n\t\t.d2-1694682388 .background-color-B6{background-color:#151719;}\n\t\t.d2-1694682388 .background-color-AA2{background-color:#676C7E;}\n\t\t.d2-1694682388 .background-color-AA4{background-color:#CFD2DD;}\n\t\t.d2-1694682388 .background-color-AA5{background-color:#DEE1EB;}\n\t\t.d2-1694682388 .background-color-AB4{background-color:#CFD2DD;}\n\t\t.d2-1694682388 .background-color-AB5{background-color:#DEE1EB;}\n\t\t.d2-1694682388 .color-N1{color:#ECEDED;}\n\t\t.d2-1694682388 .color-N2{color:#676C7E;}\n\t\t.d2-1694682388 .color-N3{color:#9499AB;}\n\t\t.d2-1694682388 .color-N4{color:#CFD2DD;}\n\t\t.d2-1694682388 .color-N5{color:#DEE1EB;}\n\t\t.d2-1694682388 .color-N6{color:#EEF1F8;}\n\t\t.d2-1694682388 .color-N7{color:#151719;}\n\t\t.d2-1694682388 .color-B1{color:#717D86;}\n\t\t.d2-1694682388 .color-B2{color:#717D86;}\n\t\t.d2-1694682388 .color-B3{color:#ffff00;}\n\t\t.d2-1694682388 .color-B4{color:#151719;}\n\t\t.d2-1694682388 .color-B5{color:#151719;}\n\t\t.d2-1694682388 .color-B6{color:#151719;}\n\t\t.d2-1694682388 .color-AA2{color:#676C7E;}\n\t\t.d2-1694682388 .color-AA4{color:#CFD2DD;}\n\t\t.d2-1694682388 .color-AA5{color:#DEE1EB;}\n\t\t.d2-1694682388 .color-AB4{color:#CFD2DD;}\n\t\t.d2-1694682388 .color-AB5{color:#DEE1EB;}.appendix text.text{fill:#ECEDED}.md{--color-fg-default:#ECEDED;--color-fg-muted:#676C7E;--color-fg-subtle:#9499AB;--color-canvas-default:#151719;--color-canvas-subtle:#EEF1F8;--color-border-default:#717D86;--color-border-muted:#717D86;--color-neutral-muted:#EEF1F8;--color-accent-fg:#717D86;--color-accent-emphasis:#717D86;--color-attention-subtle:#676C7E;--color-danger-fg:red;}.sketch-overlay-B1{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B3{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-B4{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B5{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B6{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-AA2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-AA4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AA5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AB4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AB5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N1{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-N3{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N6{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N7{fill:url(#streaks-darker);mix-blend-mode:lighten}.light-code{display: block}.dark-code{display: none}]]></style><g id=\"com\"><g class=\"shape\" ><rect x=\"521.000000\" y=\"57.000000\" width=\"813.000000\" height=\"687.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"927.500000\" y=\"90.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">com</text></g><g id=\"lombok\"><g class=\"shape\" ><rect x=\"52.000000\" y=\"984.000000\" width=\"1027.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"565.500000\" y=\"1017.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">lombok</text></g><g id=\"org\"><g class=\"shape\" ><rect x=\"1099.000000\" y=\"984.000000\" width=\"623.000000\" height=\"496.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"1410.500000\" y=\"1017.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">org</text></g><g id=\"com.myhome\"><g class=\"shape\" ><rect x=\"571.000000\" y=\"112.000000\" width=\"713.000000\" height=\"577.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"927.500000\" y=\"141.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">myhome</text></g><g id=\"lombok.AccessLevel\"><g class=\"shape\" ><rect x=\"102.000000\" y=\"1034.000000\" width=\"150.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"177.000000\" y=\"1072.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">AccessLevel</text></g><g id=\"lombok.EqualsAndHashCode\"><g class=\"shape\" ><rect x=\"272.000000\" y=\"1034.000000\" width=\"207.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"375.500000\" y=\"1072.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">EqualsAndHashCode</text></g><g id=\"lombok.Getter\"><g class=\"shape\" ><rect x=\"499.000000\" y=\"1034.000000\" width=\"102.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"550.000000\" y=\"1072.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Getter</text></g><g id=\"lombok.RequiredArgsConstructor\"><g class=\"shape\" ><rect x=\"621.000000\" y=\"1034.000000\" width=\"265.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"753.500000\" y=\"1072.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">RequiredArgsConstructor</text></g><g id=\"lombok.ToString\"><g class=\"shape\" ><rect x=\"906.000000\" y=\"1034.000000\" width=\"123.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"967.500000\" y=\"1072.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">ToString</text></g><g id=\"org.springframework\"><g class=\"shape\" ><rect x=\"1149.000000\" y=\"1039.000000\" width=\"523.000000\" height=\"386.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"1410.500000\" y=\"1068.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">springframework</text></g><g id=\"com.myhome.controllers\"><g class=\"shape\" ><rect x=\"621.000000\" y=\"162.000000\" width=\"572.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"907.000000\" y=\"187.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">controllers</text></g><g id=\"com.myhome.utils\"><g class=\"shape\" ><rect x=\"742.000000\" y=\"468.000000\" width=\"380.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"932.000000\" y=\"493.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">utils</text></g><g id=\"org.springframework.data\"><g class=\"shape\" ><rect x=\"1199.000000\" y=\"1094.000000\" width=\"423.000000\" height=\"276.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"1410.500000\" y=\"1119.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">data</text></g><g id=\"com.myhome.controllers.PaymentController\"><g class=\"shape\" ><rect x=\"671.000000\" y=\"212.000000\" width=\"207.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"774.500000\" y=\"250.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">PaymentController</text></g><g id=\"com.myhome.utils.PageInfo\"><g class=\"shape\" ><rect x=\"792.000000\" y=\"518.000000\" width=\"280.000000\" height=\"66.000000\" fill=\"#26de81\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"932.000000\" y=\"556.500000\" fill=\"#151719\" class=\"text-mono-bold\" style=\"text-anchor:middle;font-size:16px\">PageInfo</text></g><g id=\"com.myhome.controllers.PaymentControllerTest\"><g class=\"shape\" ><rect x=\"898.000000\" y=\"212.000000\" width=\"245.000000\" height=\"66.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"1020.500000\" y=\"250.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">PaymentControllerTest</text></g><g id=\"org.springframework.data.domain\"><g class=\"shape\" ><rect x=\"1249.000000\" y=\"1149.000000\" width=\"323.000000\" height=\"166.000000\" class=\" stroke-B1 fill-N7\" style=\"stroke-width:2;\" /></g><text x=\"1410.500000\" y=\"1170.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:16px\">domain</text></g><g id=\"org.springframework.data.domain.Page\"><g class=\"shape\" ><rect x=\"1299.000000\" y=\"1199.000000\" width=\"82.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:2;\" /></g><text x=\"1340.000000\" y=\"1237.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Page</text></g><g id=\"org.springframework.data.domain.Pageable\"><g class=\"shape\" ><rect x=\"1401.000000\" y=\"1199.000000\" width=\"121.000000\" height=\"66.000000\" rx=\"33.000000\" fill=\"#717D86\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"1461.500000\" y=\"1237.500000\" class=\"text-mono-bold fill-N1\" style=\"text-anchor:middle;font-size:16px\">Pageable</text></g><g id=\"com.myhome.(controllers.PaymentController -&gt; utils.PageInfo)[0]\"><marker id=\"mk-558834944\" markerWidth=\"10.000000\" markerHeight=\"12.000000\" refX=\"7.000000\" refY=\"6.000000\" viewBox=\"0.000000 0.000000 10.000000 12.000000\" orient=\"auto\" markerUnits=\"userSpaceOnUse\"> <polygon points=\"0.000000,0.000000 10.000000,6.000000 0.000000,12.000000\" fill=\"#26de81\" class=\"connection\" stroke-width=\"2\" /> </marker><path d=\"M 774.500000 279.000000 L 774.500000 363.000000 S 774.500000 373.000000 784.500000 373.000000 L 852.500000 373.000000 S 862.500000 373.000000 862.500000 383.000000 L 862.500000 515.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1694682388)\" /><text x=\"897.000000\" y=\"508.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"com.myhome.(controllers.PaymentControllerTest -&gt; utils.PageInfo)[0]\"><path d=\"M 932.500000 279.000000 L 932.500000 515.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1694682388)\" /><text x=\"967.000000\" y=\"508.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.utils.PageInfo -&gt; lombok.AccessLevel)[0]\"><path d=\"M 827.500000 585.000000 L 827.500000 779.000000 S 827.500000 789.000000 817.500000 789.000000 L 187.000000 789.000000 S 177.000000 789.000000 177.000000 799.000000 L 177.000000 1030.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1694682388)\" /><text x=\"211.000000\" y=\"1024.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.utils.PageInfo -&gt; lombok.EqualsAndHashCode)[0]\"><path d=\"M 862.500000 585.000000 L 862.500000 829.000000 S 862.500000 839.000000 852.500000 839.000000 L 385.500000 839.000000 S 375.500000 839.000000 375.500000 849.000000 L 375.500000 1030.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1694682388)\" /><text x=\"410.000000\" y=\"1024.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.utils.PageInfo -&gt; lombok.Getter)[0]\"><path d=\"M 897.500000 585.000000 L 897.500000 879.000000 S 897.500000 889.000000 887.500000 889.000000 L 560.000000 889.000000 S 550.000000 889.000000 550.000000 899.000000 L 550.000000 1030.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1694682388)\" /><text x=\"584.000000\" y=\"1024.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.utils.PageInfo -&gt; lombok.RequiredArgsConstructor)[0]\"><path d=\"M 932.500000 585.000000 L 932.500000 929.000000 S 932.500000 939.000000 922.500000 939.000000 L 763.500000 939.000000 S 753.500000 939.000000 753.500000 949.000000 L 753.500000 1030.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1694682388)\" /><text x=\"788.000000\" y=\"1024.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.utils.PageInfo -&gt; lombok.ToString)[0]\"><path d=\"M 967.500000 585.000000 L 967.500000 1030.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1694682388)\" /><text x=\"1002.000000\" y=\"1024.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.utils.PageInfo -&gt; org.springframework.data.domain.Page)[0]\"><path d=\"M 1002.500000 585.000000 L 1002.500000 829.000000 S 1002.500000 839.000000 1012.500000 839.000000 L 1330.000000 839.000000 S 1340.000000 839.000000 1340.000000 849.000000 L 1340.000000 1195.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1694682388)\" /><text x=\"1374.000000\" y=\"1189.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(com.myhome.utils.PageInfo -&gt; org.springframework.data.domain.Pageable)[0]\"><path d=\"M 1037.500000 585.000000 L 1037.500000 779.000000 S 1037.500000 789.000000 1047.500000 789.000000 L 1451.500000 789.000000 S 1461.500000 789.000000 1461.500000 799.000000 L 1461.500000 1196.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;stroke-dasharray:6.000000,5.919384;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1694682388)\" /><text x=\"1496.000000\" y=\"1189.000000\" class=\"text-italic fill-N1\" style=\"text-anchor:middle;font-size:16px\">imports</text></g><g id=\"(org.springframework.data.domain.Pageable -&gt; com.myhome.utils.PageInfo)[0]\"><path d=\"M 1461.500000 1266.000000 L 1461.500000 1515.000000 S 1461.500000 1525.000000 1451.500000 1525.000000 L 22.000000 1525.000000 S 12.000000 1525.000000 12.000000 1515.000000 L 12.000000 22.000000 S 12.000000 12.000000 22.000000 12.000000 L 1223.000000 12.000000 S 1233.000000 12.000000 1233.000000 22.000000 L 1233.000000 413.000000 S 1233.000000 423.000000 1223.000000 423.000000 L 1012.500000 423.000000 S 1002.500000 423.000000 1002.500000 433.000000 L 1002.500000 515.000000\" stroke=\"#26de81\" fill=\"none\" class=\"connection\" style=\"stroke-width:2;\" marker-end=\"url(#mk-558834944)\" mask=\"url(#d2-1694682388)\" /></g><mask id=\"d2-1694682388\" maskUnits=\"userSpaceOnUse\" x=\"11\" y=\"11\" width=\"1712\" height=\"1515\">\n<rect x=\"11\" y=\"11\" width=\"1712\" height=\"1515\" fill=\"white\"></rect>\n<rect x=\"903.000000\" y=\"62.000000\" width=\"49\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"521.000000\" y=\"989.000000\" width=\"89\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1391.500000\" y=\"989.000000\" width=\"38\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"883.500000\" y=\"117.000000\" width=\"88\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"124.500000\" y=\"1056.500000\" width=\"105\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"294.500000\" y=\"1056.500000\" width=\"162\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"521.500000\" y=\"1056.500000\" width=\"57\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"643.500000\" y=\"1056.500000\" width=\"220\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"928.500000\" y=\"1056.500000\" width=\"78\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1324.000000\" y=\"1044.000000\" width=\"173\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"861.500000\" y=\"167.000000\" width=\"91\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"914.500000\" y=\"473.000000\" width=\"35\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1392.000000\" y=\"1099.000000\" width=\"37\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"693.500000\" y=\"234.500000\" width=\"162\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"894.000000\" y=\"540.500000\" width=\"76\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"920.500000\" y=\"234.500000\" width=\"200\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1385.000000\" y=\"1154.000000\" width=\"51\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1321.500000\" y=\"1221.500000\" width=\"37\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"1423.500000\" y=\"1221.500000\" width=\"76\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n</mask></svg></svg>\n"
        },
        "items": [
          {
            "id": "7c3dd7f8-6374-f48b-044a-8a78c72f663a",
            "ancestors": [],
            "description": "provides information about the number of pages, page size, total pages, and total elements of a given Pageable and Page. The class offers a constructor for creating instances from a Pageable and a Page object, and includes methods for generating a `PageInfo` object based on a Pageable and a Page.",
            "name": "PageInfo",
            "location": {
              "start": 17,
              "insert": 11,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 10,
                "end": 16
              }
            },
            "item_type": "class",
            "length": 50,
            "docLength": 6
          },
          {
            "id": "8ea189bd-8109-63b4-454a-c78806c6d812",
            "ancestors": [
              "7c3dd7f8-6374-f48b-044a-8a78c72f663a"
            ],
            "description": "generates a `PageInfo` object containing information about the number of pages, size of each page, total number of pages, and total elements in a given pageable and page.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "pagination state of the query, providing information on the current page number, page size, total pages, and total elements.\n\n* `pageable.getPageNumber()` is an integer indicating the page number out of total pages.\n* `pageable.getPageSize()` is an integer indicating the number of elements per page.\n* `page.getTotalPages()` is an integer indicating the total number of pages in the result set.\n* `page.getTotalElements()` is an integer indicating the total number of elements in the result set.",
                "complex_type": true
              },
              {
                "name": "page",
                "type_name": "Page<?>",
                "description": "current page being processed, providing the number of elements on that page and the total number of pages in the result set.\n\n* `pageNumber`: The page number that this page belongs to.\n* `pageSize`: The size of each page in the result set.\n* `totalPages`: The total number of pages in the result set.\n* `totalElements`: The total number of elements in the result set.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "PageInfo",
              "description": "a `PageInfo` object containing information about the page number, size, total pages, and total elements of a `Pageable` and a `Page`.\n\n* The first item in the output is the page number (0-based) of the page being queried.\n* The second item is the number of elements per page.\n* The third item is the total number of pages available for a given query.\n* The fourth and final item is the total number of elements that match the query.",
              "complex_type": true
            },
            "name": "of",
            "location": {
              "start": 58,
              "insert": 27,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 26,
                "end": 57
              }
            },
            "item_type": "method",
            "length": 8,
            "docLength": 31
          }
        ]
      }
    }
  },
  {
    "name": "CorsConfig.java",
    "path": "service/src/main/java/com/myhome/configuration/CorsConfig.java",
    "content": {
      "structured": {
        "description": "CORS mappings for a web application, allowing requests from any origin and specifying which methods, headers, and credentials are allowed. The `CorsConfig` class has a constructor that takes a `Value` object with the server's CORS configuration settings, and it uses the `@Bean` annotation to create a `WebMvcConfigurer` instance that adds CORS mappings to a registry. The `addCorsMappings()` method in the `WebMvcConfigurer` class adds mappings to the registry, allowing any origin to make requests with any HTTP method, header, or credential.",
        "items": [
          {
            "id": "d118d32f-bbbb-b0ab-824f-3c6feed92c24",
            "ancestors": [],
            "type": "function",
            "description": "defines CORS mappings for a web application allowing requests from any origin and specifying which methods, headers, and credentials are allowed. The class has a single method, `addCorsMappings()`, which adds CORS mappings to a registry, allowing requests from any origin and specifying which methods, headers, and credentials are allowed.",
            "name": "CorsConfig",
            "location": {
              "start": 28,
              "insert": 25,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 24,
                "end": 27
              }
            },
            "item_type": "class",
            "length": 62,
            "docLength": 3
          },
          {
            "id": "3c8cebfb-3cfb-f384-1c4f-829401a972f1",
            "ancestors": [
              "d118d32f-bbbb-b0ab-824f-3c6feed92c24"
            ],
            "type": "function",
            "description": "adds CORS mappings to a registry, allowing requests from any origin and specifying which methods, headers, and credentials are allowed.",
            "params": [],
            "returns": {
              "type_name": "instance",
              "description": "a CORS configuration that allows requests from any origin and specifies which methods, headers, and credentials are allowed.\n\n* `registry`: This is an instance of the `CorsRegistry` class, which represents a collection of CORS configuration mappings for a server.\n* `addMapping`: This method is used to add a new CORS mapping to the registry. The method takes a string parameter representing the URL path that the mapping applies to.\n* `allowedOrigins`: An array of strings representing the origins (domains or IP addresses) that are allowed to make requests to the server.\n* `allowedMethods`: An array of strings representing the HTTP methods (such as GET, POST, PUT, DELETE, etc.) that are allowed for the mapping.\n* `allowedHeaders`: An array of strings representing the HTTP headers that are allowed for the mapping.\n* `exposedHeaders`: An array of strings representing the HTTP headers that are exposed to clients in responses.\n* `allowCredentials`: A boolean value indicating whether the CORS configuration allows credentials (such as cookies or authorized access tokens) in requests.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      /**\n       * adds CORS mappings to a registry, allowing requests from any origin and specifying\n       * which methods, headers, and credentials are allowed.\n       * \n       * @param registry Cors registry that the method adds mappings to.\n       * \n       * \t- `registry`: This is an instance of the `CorsRegistry` class, which represents\n       * a collection of CORS configuration mappings for a server.\n       * \t- `addMapping`: This method is used to add a new CORS mapping to the registry.\n       * The method takes a string parameter representing the URL path that the mapping\n       * applies to.\n       * \t- `allowedOrigins`: An array of strings representing the origins (domains or IP\n       * addresses) that are allowed to make requests to the server.\n       * \t- `allowedMethods`: An array of strings representing the HTTP methods (such as\n       * GET, POST, PUT, DELETE, etc.) that are allowed for the mapping.\n       * \t- `allowedHeaders`: An array of strings representing the HTTP headers that are\n       * allowed for the mapping.\n       * \t- `exposedHeaders`: An array of strings representing the HTTP headers that are\n       * exposed to clients in responses.\n       * \t- `allowCredentials`: A boolean value indicating whether the CORS configuration\n       * allows credentials (such as cookies or authorized access tokens) in requests.\n       */\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }\n    };\n  }\n}\n",
              "description": "\nThis code defines a CORS configuration for any URL path that allows requests from any origin, and specifying which HTTP methods (e.g., GET, POST, PUT, DELETE, etc.) are allowed for the mapping. Additionally, it also allows any headers to be used in the request and exposes two specific headers (token and userId) in the response. Finally, this code allows credentials (such as cookies or authorized access tokens) in requests."
            },
            "name": "corsConfigurer",
            "location": {
              "start": 53,
              "insert": 34,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 33,
                "end": 52
              }
            },
            "item_type": "method",
            "length": 36,
            "docLength": 19
          },
          {
            "id": "a1b9b0ff-4d61-46a5-8043-b7b51bfb14c9",
            "ancestors": [
              "d118d32f-bbbb-b0ab-824f-3c6feed92c24",
              "3c8cebfb-3cfb-f384-1c4f-829401a972f1"
            ],
            "type": "function",
            "description": "adds CORS mappings to the registry, allowing any origin to make any HTTP request method and header, while exposing some headers and granting credentials.",
            "params": [
              {
                "name": "registry",
                "type_name": "CorsRegistry",
                "description": "CorsRegistry object where the mappings are added.\n\n* `registry`: CorsRegistry, which is an object that stores CORS mappings for a server.\n* `allowedOrigins`: A list of origins that are allowed to make requests to the server.\n* `allowedMethods`: A list of HTTP methods that are allowed to be used in requests from allowed origins.\n* `allowedHeaders`: A list of HTTP headers that are allowed to be used in responses from the server.\n* `exposedHeaders`: A list of HTTP headers that should be exposed in responses from the server.\n* `allowCredentials`: A boolean indicating whether credentials (e.g., cookies, Authorization header) are allowed in requests.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }\n",
              "description": "\nThis example would be used in a Spring MVC application, where the method addCorsMappings is being called with a CorsRegistry as an argument. The method would then configure the CorsRegistry to allow any requests from specified origins, and specify which methods, headers, and credentials are allowed for those requests."
            },
            "name": "addCorsMappings",
            "location": {
              "start": 78,
              "insert": 56,
              "offset": " ",
              "indent": 6,
              "comment": {
                "start": 55,
                "end": 77
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 22
          }
        ]
      }
    }
  },
  {
    "name": "EmailTemplateConfig.java",
    "path": "service/src/main/java/com/myhome/configuration/EmailTemplateConfig.java",
    "content": {
      "structured": {
        "description": "An EmailTemplateConfig class that configures email template handling in a Spring Boot application. It provides a ResourceBundleMessageSource for retrieving email messages from a resource bundle file and sets up a Spring Template Engine with a Thymeleaf template resolver and message source. The code also defines an ITemplateResolver instance for resolving Thymeleaf templates based on properties defined in the templateProperties class.",
        "items": [
          {
            "id": "4a32a677-af54-6c91-3240-721b46cd8c87",
            "ancestors": [],
            "type": "function",
            "description": "defines properties for email localization and creates a ResourceBundleMessageSource instance to handle email messages. It also sets up a Spring Template Engine with Thymeleaf template resolver and message source.",
            "name": "EmailTemplateConfig",
            "location": {
              "start": 18,
              "insert": 15,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 14,
                "end": 17
              }
            },
            "item_type": "class",
            "length": 104,
            "docLength": 3
          },
          {
            "id": "f94ae7c7-035b-0596-a147-32f0f04eac7d",
            "ancestors": [
              "4a32a677-af54-6c91-3240-721b46cd8c87"
            ],
            "type": "function",
            "description": "creates a `ResourceBundleMessageSource` instance with configuration parameters set from localization properties.",
            "params": [],
            "returns": {
              "type_name": "ResourceBundleMessageSource",
              "description": "a `ResourceBundleMessageSource` object configured to handle email-related messages.\n\n* `ResourceBundleMessageSource`: This is the class that represents the message source.\n* `setBasename()`: Sets the basename of the message source to the value of the `localizationProperties.getPath()` method.\n* `setDefaultLocale()`: Sets the default locale of the message source to English.\n* `setDefaultEncoding()`: Sets the default encoding of the message source to the value of the `localizationProperties.getEncoding()` method.\n* `setCacheSeconds()`: Sets the cache seconds for the message source to the value of the `localizationProperties.getCacheSeconds()` method.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\npublic ResourceBundleMessageSource emailMessageSource() {\n  ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n  messageSource.setBasename(localizationProperties.getPath());\n  messageSource.setDefaultLocale(Locale.ENGLISH);\n  messageSource.setDefaultEncoding(localizationProperties.getEncoding());\n  messageSource.setCacheSeconds(localizationProperties.getCacheSeconds());\n  return messageSource;\n}\n",
              "description": "\nIn this example, the `emailMessageSource` method is used to create an instance of the `ResourceBundleMessageSource` class and set its properties using the `localizationProperties` object. The `setBasename`, `setDefaultLocale`, `setDefaultEncoding`, and `setCacheSeconds` methods are used to configure the message source for email-related messages in the Spring Template Engine. Finally, the `ResourceBundleMessageSource` instance is returned."
            },
            "name": "emailMessageSource",
            "location": {
              "start": 45,
              "insert": 25,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 24,
                "end": 44
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 20
          },
          {
            "id": "f175ab85-1fcc-9692-3543-8f4ed7585bf2",
            "ancestors": [
              "4a32a677-af54-6c91-3240-721b46cd8c87"
            ],
            "type": "function",
            "description": "creates a new instance of Spring Template Engine, sets its template resolver and message source, and returns it.",
            "params": [
              {
                "name": "emailMessageSource",
                "type_name": "ResourceBundleMessageSource",
                "description": "message source for email-related templates, providing messages related to emails to the Spring Template Engine.\n\n* `ResourceBundleMessageSource`: This is a message source that provides messages in a resource bundle format. It has various attributes such as `basenames`, `defaultBasename`, and `fallbackFactory`. These attributes enable the message source to retrieve messages from a resource bundle and provide them to the template engine.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "SpringTemplateEngine",
              "description": "a Spring Template Engine instance with Thymeleaf template resolver and email message source.\n\nThe `SpringTemplateEngine` instance is set with a `templateResolver`, which is an object of type `ThymeleafTemplateResolver`. This resolver provides access to Thymeleaf-specific template engine features.\n\nA `MessageSource` object, which is responsible for providing message keys and their associated messages, is also set as the `templateEngineMessageSource` property. In this case, it is an instance of `ResourceBundleMessageSource`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n  public SpringTemplateEngine thymeleafTemplateEngine(ResourceBundleMessageSource emailMessageSource) {\n    return new SpringTemplateEngine(thymeleafTemplateResolver(), emailMessageSource);\n  }\n",
              "description": "\nThis method creates a new instance of the SpringTemplateEngine class and sets its template resolver to the result of the `thymeleafTemplateResolver()` method, which is an ITemplateResolver object. Additionally, it sets the template engine's message source to the ResourceBundleMessageSource emailMessageSource parameter. The resulting SpringTemplateEngine object is then returned."
            },
            "name": "thymeleafTemplateEngine",
            "location": {
              "start": 80,
              "insert": 55,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 54,
                "end": 79
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 25
          },
          {
            "id": "db1c75b6-8d7e-0096-2f4c-89638c949c85",
            "ancestors": [
              "4a32a677-af54-6c91-3240-721b46cd8c87"
            ],
            "type": "function",
            "description": "creates a Thymeleaf Template Resolver, setting properties such as prefix, suffix, mode, encoding, and caching based on template properties.",
            "params": [],
            "returns": {
              "type_name": "ITemplateResolver",
              "description": "a `ITemplateResolver` object configured to resolve Thymeleaf templates based on specified properties.\n\n* `ClassLoaderTemplateResolver`: The type of template resolver used to resolve templates.\n* `templatePath`: The path to the Thymeleaf template file.\n* `fileSeparator`: The separator used in the file system.\n* `templateProperties`: The properties of the Thymeleaf template, such as mode, format, encoding, and cacheability.\n* `setPrefix()`: Sets the prefix for the resolved template path.\n* `setSuffix()`: Sets the suffix for the resolved template path.\n* `setTemplateMode()`: Sets the mode of the Thymeleaf template.\n* `setCharacterEncoding()`: Sets the character encoding used for the resolved template.\n* `setCacheable()`: Indicates whether the resolved template should be cached or not.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public void someMethod() {\n    EmailTemplateConfig emailTemplateConfig = new EmailTemplateConfig();\n    ITemplateResolver templateResolver = emailTemplateConfig.thymeleafTemplateResolver();\n}\n",
              "description": "\nThis is an example of how the method might be used in a real-world application. Note that the method returns an instance of `ITemplateResolver`, which can then be used to resolve Thymeleaf templates based on properties defined in the `templateProperties` class. The `templateProperties` class contains information about the Thymeleaf template resolver, such as the path to the template file, the template file format, the template rendering mode, and whether the template is cacheable or not."
            },
            "name": "thymeleafTemplateResolver",
            "location": {
              "start": 107,
              "insert": 88,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 87,
                "end": 106
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 19
          }
        ]
      }
    }
  },
  {
    "name": "FileUploadConfig.java",
    "path": "service/src/main/java/com/myhome/configuration/FileUploadConfig.java",
    "content": {
      "structured": {
        "description": "A `FileUploadConfig` class that configures file upload limits for a Spring Boot application. The class sets the maximum file size in kilobytes using the `@Value` annotation and creates a `MultipartConfigElement` object using the `MultipartConfigFactory` class. The created `MultipartConfigElement` can be used to set limits on maximum file and request sizes in a Spring Boot application.",
        "items": [
          {
            "id": "0abc0e9a-01bf-caac-604d-be0b782ffff3",
            "ancestors": [],
            "type": "function",
            "description": "configures a `MultipartConfig` object with maximum file and request size limits in kilobytes. The `multipartConfigElement()` method creates a `MultipartConfig` instance with set maximum file and request sizes, and returns it as a `MultipartConfigElement`.",
            "name": "FileUploadConfig",
            "location": {
              "start": 29,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 28
              }
            },
            "item_type": "class",
            "length": 28,
            "docLength": 3
          },
          {
            "id": "942ce498-2b5e-3190-c04d-c7c1e8259fed",
            "ancestors": [
              "0abc0e9a-01bf-caac-604d-be0b782ffff3"
            ],
            "type": "function",
            "description": "creates a `MultipartConfig` object with customized maximum file and request sizes, which can be used to configure the multipart request handler in Spring.",
            "params": [],
            "returns": {
              "type_name": "MultipartConfig",
              "description": "a `MultipartConfig` instance with configured maximum file and request sizes in kilobytes.\n\n* `MultipartConfigFactory`: This is the class that is used to create the `MultipartConfig` object.\n* `setMaxFileSize()` and `setMaxRequestSize()`: These two methods define the maximum file size and maximum request size, respectively, in kilobytes (KB). The values are set using `DataSize.ofKilobytes()` method, which is a part of Spring Boot's built-in `DataSize` class.\n* `createMultipartConfig()`: This method creates a new instance of the `MultipartConfig` class and returns it as output.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\npublic MultipartConfigElement multipartConfigElement() {\nMultipartConfigFactory factory = new MultipartConfigFactory();\nfactory.setMaxFileSize(DataSize.ofKilobytes(maxSizeKBytes));\nfactory.setMaxRequestSize(DataSize.ofKilobytes(maxSizeKBytes));\nreturn factory.createMultipartConfig();\n}\n",
              "description": ""
            },
            "name": "multipartConfigElement",
            "location": {
              "start": 49,
              "insert": 35,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 34,
                "end": 48
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 14
          }
        ]
      }
    }
  },
  {
    "name": "EmailTemplateLocalizationProperties.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/EmailTemplateLocalizationProperties.java",
    "content": {
      "structured": {
        "description": "An email localization configuration class, EmailTemplateLocalizationProperties, which includes properties for email template file location, encoding, and cache seconds. The class uses Spring Boot's ConfigurationProperties to manage the properties.",
        "items": [
          {
            "id": "79a4eb0e-12d0-f89e-f746-4932ff60b3e3",
            "ancestors": [],
            "type": "function",
            "description": "defines properties for email localization including path to a template file, encoding, and cache seconds.\nFields:\n\t- path (String): in the EmailTemplateLocalizationProperties class represents a string value specifying the location of an email template file.\n\t- encoding (String): in the EmailTemplateLocalizationProperties class represents a string value specifying the character encoding of email template files.\n\t- cacheSeconds (int): in the EmailTemplateLocalizationProperties class represents the number of seconds an email template will be cached before being refreshed from its source location.\n\n",
            "fields": [
              {
                "name": "path",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateLocalizationProperties",
                "description": "in the EmailTemplateLocalizationProperties class represents a string value specifying the location of an email template file."
              },
              {
                "name": "encoding",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateLocalizationProperties",
                "description": "in the EmailTemplateLocalizationProperties class represents a string value specifying the character encoding of email template files."
              },
              {
                "name": "cacheSeconds",
                "type_name": "int",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateLocalizationProperties",
                "description": "in the EmailTemplateLocalizationProperties class represents the number of seconds an email template will be cached before being refreshed from its source location."
              }
            ],
            "name": "EmailTemplateLocalizationProperties",
            "location": {
              "start": 20,
              "insert": 8,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 7,
                "end": 19
              }
            },
            "item_type": "class",
            "length": 8,
            "docLength": 12
          }
        ]
      }
    }
  },
  {
    "name": "EmailTemplateProperties.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/EmailTemplateProperties.java",
    "content": {
      "structured": {
        "description": "An `EmailTemplateProperties` class that provides a set of properties for configuring email template settings. The class has fields for path to the template file, format of the template, encoding, mode, and caching options. These properties can be used to customize the email templates sent through Spring Boot.",
        "items": [
          {
            "id": "5a172bb1-9938-3193-0042-d3df0fc9b418",
            "ancestors": [],
            "type": "function",
            "description": "provides a set of properties for configuring email template settings such as file path, template format, encoding, and caching options.\nFields:\n\t- path (String): in the EmailTemplateProperties class represents the file path where an email template resides.\n\t- format (String): represents the template file format for sending emails.\n\t- encoding (String): is a string value representing the character encoding of the email template.\n\t- mode (String): specifies the encoding mode of an email template.\n\t- cache (boolean): in the EmailTemplateProperties class is a boolean value indicating whether the email template data should be cached for future use.\n\n",
            "fields": [
              {
                "name": "path",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "in the EmailTemplateProperties class represents the file path where an email template resides."
              },
              {
                "name": "format",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "represents the template file format for sending emails."
              },
              {
                "name": "encoding",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "is a string value representing the character encoding of the email template."
              },
              {
                "name": "mode",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "specifies the encoding mode of an email template."
              },
              {
                "name": "cache",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "in the EmailTemplateProperties class is a boolean value indicating whether the email template data should be cached for future use."
              }
            ],
            "name": "EmailTemplateProperties",
            "location": {
              "start": 22,
              "insert": 8,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 7,
                "end": 21
              }
            },
            "item_type": "class",
            "length": 10,
            "docLength": 14
          }
        ]
      }
    }
  },
  {
    "name": "MailProperties.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/MailProperties.java",
    "content": {
      "structured": {
        "description": "A `MailProperties` class that provides configuration properties for email settings. The class has fields for host, username, password, port, protocol, debug, and dev mode, which can be used to configure various aspects of an email server, such as authentication and communication protocols. The ` MailProperties` class is annotated with `@Data` and `@ConfigurationProperties`, indicating that it should be used to store and retrieve email configuration data.",
        "items": [
          {
            "id": "a249a922-5acc-d7b3-6b4f-72fa225cc5b5",
            "ancestors": [],
            "type": "function",
            "description": "provides configuration properties for email settings, including host, username, password, port, protocol, debug, and dev mode.\nFields:\n\t- host (String): in the MailProperties class represents the mail server's hostname.\n\t- username (String): in MailProperties represents a string value representing the username for email authentication purposes.\n\t- password (String): in MailProperties is of type String.\n\t- port (int): in MailProperties represents an integer value indicating the mail server's port number for communication.\n\t- protocol (String): in the MailProperties class represents a string value specifying the email transport protocol to use for sending emails.\n\t- debug (boolean): in MailProperties is a boolean indicating whether debugging mode is enabled for the mail server configuration.\n\t- devMode (boolean): in MailProperties represents a boolean flag indicating whether the mail server configuration is intended for development or production use.\n\n",
            "fields": [
              {
                "name": "host",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in the MailProperties class represents the mail server's hostname."
              },
              {
                "name": "username",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in MailProperties represents a string value representing the username for email authentication purposes."
              },
              {
                "name": "password",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in MailProperties is of type String."
              },
              {
                "name": "port",
                "type_name": "int",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in MailProperties represents an integer value indicating the mail server's port number for communication."
              },
              {
                "name": "protocol",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in the MailProperties class represents a string value specifying the email transport protocol to use for sending emails."
              },
              {
                "name": "debug",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in MailProperties is a boolean indicating whether debugging mode is enabled for the mail server configuration."
              },
              {
                "name": "devMode",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in MailProperties represents a boolean flag indicating whether the mail server configuration is intended for development or production use."
              }
            ],
            "name": "MailProperties",
            "location": {
              "start": 25,
              "insert": 7,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 6,
                "end": 24
              }
            },
            "item_type": "class",
            "length": 11,
            "docLength": 18
          }
        ]
      }
    }
  },
  {
    "name": "MailTemplatesNames.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/MailTemplatesNames.java",
    "content": {
      "structured": {
        "description": "An enumeration of template names for email notifications in a configuration file for a mail service. The enumeration has four constants, each representing a different email notification template name.",
        "items": []
      }
    }
  },
  {
    "name": "AmenityController.java",
    "path": "service/src/main/java/com/myhome/controllers/AmenityController.java",
    "content": {
      "structured": {
        "description": "A RESTful API for managing amenities in a community. It includes endpoints for listing all amenities, adding new ones, updating existing ones, and deleting amenities. The API uses JPA for database interactions and provides a custom mapping to transform request bodies into response entities. The code also includes error handling and status codes to indicate the outcome of each operation.",
        "items": [
          {
            "id": "0206ddee-c26e-01ba-fc47-8b5665a9f470",
            "ancestors": [],
            "type": "function",
            "description": "handles operations related to amenities in a community, including listing all amenities for a given community ID, adding amenities to a community through JPA service, deleting an amenity based on its ID, updating an amenity in the database, and returning response entities indicating the outcome of each operation. The class uses annotations such as `@PathVariable`, `@RequestBody`, and `@Valid` to specify input parameters and return types, and it calls methods from other classes in the hierarchy, such as `amenitySDJpaService` and `amenityApiMapper`, to perform database operations and data mapping tasks.",
            "name": "AmenityController",
            "location": {
              "start": 52,
              "insert": 44,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 43,
                "end": 51
              }
            },
            "item_type": "class",
            "length": 293,
            "docLength": 8
          },
          {
            "id": "dfa3804f-6358-8197-8245-5ee3f040dcff",
            "ancestors": [
              "0206ddee-c26e-01ba-fc47-8b5665a9f470"
            ],
            "type": "function",
            "description": "retrieves amenity details for a given amenity ID from the database and returns them as a `ResponseEntity`.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "ID of the amenity for which details are being requested.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "an `ResponseEntity` object representing a successful response with the amenity details in the form of `AmenityDetailsResponse`.\n\n* `ResponseEntity`: This is an object that represents a response entity with a status code and a body. The status code indicates whether the request was successful (OK) or not (e.g., NOT_FOUND).\n* `map`: This method is used to transform the response entity into a more useful data structure. In this case, it maps the response entity to an `AmenityDetailsResponse` object using the `amenityToAmenityDetailsResponse` function.\n* `orElse`: This method is used to provide an alternative response if the original response is not successful (e.g., NOT_FOUND). It returns a new response entity with a different status code and body.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// Example usage of getAmenityDetails() method\nResponseEntity<GetAmenityDetailsResponse> response = controller.getAmenityDetails(\"amenityId\");\nif (response.getStatusCode().equals(HttpStatus.OK)) {\n    GetAmenityDetailsResponse amenityDetails = response.getBody();\n    // Use the amenity details returned in the response body here\n} else if (response.getStatusCode().equals(HttpStatus.NOT_FOUND)) {\n    System.out.println(\"The amenity with ID 'amenityId' was not found\");\n}\n",
              "description": "\nIn this example, we call the `controller.getAmenityDetails()` method and pass an argument of \"amenityId\". The `controller` variable is assumed to have been created using a JPA service such as `AmenitySDJpaService`, which contains methods that perform operations on the database. This particular method returns a response entity containing either a get amenity details response object or a 404 status code indicating the requested amenity could not be found. The `getStatusCode()` method of the response entity is called to check if the status code was OK (200) and, if so, the `getBody()` method is used to retrieve the get amenity details response object from the body of the response entity. If the status code returned was NOT_FOUND (404), a message is printed indicating that the requested amenity could not be found."
            },
            "name": "getAmenityDetails",
            "location": {
              "start": 105,
              "insert": 83,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 82,
                "end": 104
              }
            },
            "item_type": "method",
            "length": 8,
            "docLength": 22
          },
          {
            "id": "6ed9683e-a630-248b-454a-174cbbdeb765",
            "ancestors": [
              "0206ddee-c26e-01ba-fc47-8b5665a9f470"
            ],
            "type": "function",
            "description": "lists all amenities associated with a given community ID using JPA and maps them to `GetAmenityDetailsResponse` objects for return in an `ResponseEntity`.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community for which the list of amenities is being retrieved.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "SetGetAmenityDetailsResponse",
              "description": "a set of `GetAmenityDetailsResponse` objects containing the list of amenities for a given community ID.\n\n* `ResponseEntity`: This is a class that represents a response entity, which contains an entity body and an HTTP status code.\n* `ok`: This is a constant that indicates the response status code is 200 (OK).\n* `Set<GetAmenityDetailsResponse>`: This is a set of `GetAmenityDetailsResponse` objects, which represent the list of amenities for a given community.\n* `amenitySDJpaService`: This is an instance of `AmenitySDJpaService`, which provides methods for interacting with the amenity data stored in the database.\n* `amenitiesSetToAmenityDetailsResponseSet`: This is a method that takes a set of `Amenity` objects and returns a set of `GetAmenityDetailsResponse` objects, each containing the details of a single amenity.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\npublic void testListAllAmenities() {\n    // Set up mocks\n    when(communityApiServiceMock.getCommunityById(\"123\")).thenReturn(communityDto);\n    when(amenitySDJpaServiceMock.listAllAmenities(\"123\")).thenReturn(amenities);\n\n    // Call method\n    ResponseEntity<Set<GetAmenityDetailsResponse>> response = communityApiController.listAllAmenities(\"123\");\n\n    // Verify that the right method was called and that the right data was returned\n    verify(communityApiServiceMock, times(1)).getCommunityById(\"123\");\n    verify(amenitySDJpaServiceMock, times(1)).listAllAmenities(\"123\");\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(amenities, response.getBody().stream().map(GetAmenityDetailsResponse::getAmenity).collect(Collectors.toSet()));\n}\n",
              "description": ""
            },
            "name": "listAllAmenities",
            "location": {
              "start": 157,
              "insert": 136,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 135,
                "end": 156
              }
            },
            "item_type": "method",
            "length": 8,
            "docLength": 21
          },
          {
            "id": "f532b5fa-d8b0-1c80-9143-ead919589bca",
            "ancestors": [
              "0206ddee-c26e-01ba-fc47-8b5665a9f470"
            ],
            "type": "function",
            "description": "adds amenities to a community, by creating them in the database and returning a response entity with the added amenities or a not found response if an error occurs.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community to which the amenities will be added.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "AddAmenityRequest",
                "description": "AddAmenityRequest object containing the amenities to be added to the community, which is used by the `amenitySDJpaService` to create the new amenities in the database.\n\n* `communityId`: The ID of the community where amenities will be added.\n* `requestBody`: The body of the request contains the list of amenities to be added, represented as an array of objects. Each object in the list contains the name and description of the amenity.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AddAmenityResponse",
              "description": "a `ResponseEntity` object with a status of `ok` and a `AddAmenityResponse` object containing the created amenities.\n\n* `ResponseEntity<AddAmenityResponse>`: This is an entity object that contains a response message and a list of amenities.\n* `ok`: This is a boolean property that indicates whether the operation was successful or not. If the operation was successful, this property will be set to true, otherwise it will be set to false.\n* `notFound`: This is an error message that indicates that the community with the given ID could not be found.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate AmenitiesService amenitiesService;\n\npublic void addAmenity() {\n  AddAmenityRequest request = new AddAmenityRequest();\n  List<AddAmenityRequest.Amenity> amenities = new ArrayList<>();\n  \n  // add an amenity object to the list\n  AmenityDto amenity = new AmenityDto(amenityId, name, type, location);\n  amenities.add(amenity);\n  \n  request.setAmenities(amenities);\n  \n  ResponseEntity<AddAmenityResponse> response = amenitiesService.addAmenityToCommunity(communityId, request);\n}\n",
              "description": "\nThis code creates an instance of the AddAmenityRequest class and populates it with an array containing an AmenityDto object. The addAmenity method is then called on the AmenitiesService using the communityId and request objects."
            },
            "name": "addAmenityToCommunity",
            "location": {
              "start": 232,
              "insert": 195,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 194,
                "end": 231
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 37
          },
          {
            "id": "d3e8dae3-f556-1ea5-b344-a909988fb41c",
            "ancestors": [
              "0206ddee-c26e-01ba-fc47-8b5665a9f470"
            ],
            "type": "function",
            "description": "deletes an amenity from the database based on its ID, returning a HTTP status code indicating whether the operation was successful or not.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "ID of an amenity that is being deleted.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a HTTP `NO_CONTENT` status code indicating that the amenity was successfully deleted.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the amenity was successfully deleted, and no further content is provided in the response body.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the amenity with the specified ID could not be found, and the function returned an error message.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@RestController\n@RequestMapping(\"/api\")\npublic class AmenitiesApiController {\n  @Autowired\n  private AmenitySDJpaService amenitySDJpaService;\n\n  /**\n   * delete an amenity based on its ID, returning a response entity with a status code\n   * indicating the outcome of the operation.\n   * \n   * @param amenityId identifier of an amenity to be deleted.\n   * \n   * @returns a HTTP `NO_CONTENT` status code indicating successful deletion of the amenity.\n   * \n   * \t- `isAmenityDeleted`: A boolean value indicating whether the amenity was successfully\n   * deleted or not. If the amenity was successfully deleted, this property is set to\n   * `true`, otherwise it is set to `false`.\n   * \t- `HttpStatus`: The HTTP status code of the response entity. In case the amenity\n   * was successfully deleted, the status code is set to `NO_CONTENT` (HTTP 204),\n   * otherwise it is set to `NOT_FOUND` (HTTP 404).\n   */\n  @DeleteMapping(\"/amenities/{amenityId}\")\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    return new ResponseEntity<>(amenitySDJpaService.deleteAmenity(amenityId), HttpStatus.NO_CONTENT);\n  }\n}\n",
              "description": ""
            },
            "name": "deleteAmenity",
            "location": {
              "start": 271,
              "insert": 257,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 256,
                "end": 270
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 14
          },
          {
            "id": "c4e9d113-2031-098d-784d-6881091a65c3",
            "ancestors": [
              "0206ddee-c26e-01ba-fc47-8b5665a9f470"
            ],
            "type": "function",
            "description": "updates an amenity based on the request received from the client, and returns a response indicating whether the update was successful or not.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "ID of the amenity to be updated.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "UpdateAmenityRequest",
                "description": "UpdateAmenityRequest object that contains the updated amenity details.\n\n* `@Valid` annotation indicates that the input request body is validated using the `JsonValidation` class.\n* `@RequestBody` annotation specifies that the input request body should be used directly as the input for the function.\n* `UpdateAmenityRequest` is the class that represents the input request, which contains attributes for updating an amenity.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the update was successful.\n\n* `HttpStatus`: This is an instance of the `HttpStatus` class, which represents the HTTP status code returned by the function. The value of this field is either `NO_CONTENT` or `NOT_FOUND`, depending on whether the update was successful or not.\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which wraps the HTTP response produced by the function. The `ResponseEntity` object contains additional information such as the status code, headers, and body.\n* `Void`: This is a reference to the void type, which represents the absence of any value. In this case, it is used as the return type of the `updateAmenity` function, indicating that no value is returned after the update operation is completed.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate AmenityApiController amenityApiController;\n\n// Set the community ID to be the same as the one you are updating\nString communityId = \"1234567890\";\n\n// Create an UpdateAmenityRequest with the updated amenity details\nUpdateAmenityRequest updateAmenityRequest = new UpdateAmenityRequest();\nupdateAmenityRequest.setName(\"Updated Amenity\");\nupdateAmenityRequest.setDescription(\"This is an updated amenity.\");\nupdateAmenityRequest.setLocation(new LatLong(-23.00, -45.67));\nupdateAmenityRequest.setType(\"Updated Type\");\n\n// Send the update request to the API controller\nResponseEntity<Void> response = amenityApiController.updateAmenity(communityId, updateAmenityRequest);\n",
              "description": "\nThis would send a PUT request to the API endpoint `/api/amenities/{communityId}` with the updated amenity details as the request body. The `HttpStatus` returned from the API call should be 204 (NO_CONTENT) if the update was successful, otherwise it should be 404 (NOT_FOUND).\n\nIt is important to note that this method expects a valid `UpdateAmenityRequest` object as input. If you pass invalid data, such as an empty `name` field, you will receive a 400 (BAD_REQUEST) status code from the API."
            },
            "name": "updateAmenity",
            "location": {
              "start": 332,
              "insert": 307,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 306,
                "end": 331
              }
            },
            "item_type": "method",
            "length": 12,
            "docLength": 25
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationController.java",
    "path": "service/src/main/java/com/myhome/controllers/AuthenticationController.java",
    "content": {
      "structured": {
        "description": "An AuthenticationController class that implements the AuthenticationApi interface. It has a single method, `login()`, which takes a valid `LoginRequest` object as input and returns an `ResponseEntity` with the user ID and JWT token for authentication purposes. The class uses the `AuthenticationService` to authenticate the user and generate the response headers.",
        "items": [
          {
            "id": "442cf3c3-4959-62bd-d84c-6a992037a0f4",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot REST controller that implements the AuthenticationApi interface. It handles login requests and returns an HTTP response with the user ID and JWT token for authentication purposes. The class has one method, `login()`, which takes a valid `LoginRequest` object as input and returns a ResponseEntity with the user ID and JWT token for authentication.",
            "name": "AuthenticationController",
            "location": {
              "start": 20,
              "insert": 13,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 12,
                "end": 19
              }
            },
            "item_type": "class",
            "length": 72,
            "docLength": 7
          },
          {
            "id": "efafce27-a15c-32b5-cc41-6735e6bf98da",
            "ancestors": [
              "442cf3c3-4959-62bd-d84c-6a992037a0f4"
            ],
            "type": "function",
            "description": "authenticates a user by calling the `loginService` and returning an `ResponseEntity` with a success status code and headers containing information about the authenticated user.",
            "params": [
              {
                "name": "loginRequest",
                "type_name": "LoginRequest",
                "description": "authentication request, containing the user credentials and other relevant information for the login process.\n\nAuthenticationData authenticationData = authenticationService.login(loginRequest);",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a `headers` field containing authentication-related headers.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response object that contains both a body and headers.\n* `ok()`: The `ok()` method returns a `ResponseEntity` instance with a status code of 200 (OK), indicating that the login operation was successful.\n* `headers`: This is an instance of the `Headers` class, which contains metadata about the response, such as caching and security headers.\n* `build()`: The `build()` method is used to construct the complete response object, by combining the `ResponseEntity`, `Headers`, and any other metadata required for the operation.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\n  void shouldReturnOkResponseWhenLoginIsSuccessful() {\n    // Set up mocks\n    final LoginRequest loginRequest = new LoginRequest(\"username\", \"password\");\n    final AuthenticationData authenticationData = new AuthenticationData(1L, \"token\");\n    when(authenticationService.login(any())).thenReturn(authenticationData);\n    \n    // Call method and get response\n    final ResponseEntity<Void> response = authenticationController.login(loginRequest);\n    \n    // Assertions\n    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);\n    verify(authenticationService).login(any());\n  }\n",
              "description": ""
            },
            "name": "login",
            "location": {
              "start": 57,
              "insert": 26,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 25,
                "end": 56
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 31
          },
          {
            "id": "a334218c-0e7b-3b9b-c342-b59fb293da4f",
            "ancestors": [
              "442cf3c3-4959-62bd-d84c-6a992037a0f4"
            ],
            "type": "function",
            "description": "creates an HTTP headers object containing user ID and JWT token for login authentication purposes based on input `AuthenticationData`.",
            "params": [
              {
                "name": "authenticationData",
                "type_name": "AuthenticationData",
                "description": "user's identification information, including their user ID and JWT token, which are used to create the HTTP headers for login authentication.\n\n* `getUserId`: A string representing the user ID associated with the authentication request.\n* `getJwtToken`: A string representing the JWT token issued to the user for login purposes.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HttpHeaders",
              "description": "a set of HTTP headers containing the user ID and JWT token for authentication purposes.\n\n* `HttpHeaders`: This is an instance of the `HttpHeaders` class from the `java.net.http` package. It contains key-value pairs representing HTTP headers that can be used in a request or response.\n* `add()` methods: The `add()` methods are used to add new header fields to the `HttpHeaders` instance. In this function, two such methods are called, one for adding a header field with the key \"userId\" and another for adding a header field with the key \"token\".\n\nThe attributes of the returned output can be inferred from the method name and the code inside it. The `createLoginHeaders` function takes an `AuthenticationData` object as input and returns an instance of `HttpHeaders`. This suggests that the output is related to authentication and can be used in a request or response to provide authentication information.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import com.myhome.controllers.AuthenticationController;\n\npublic class Example {\n    public static void main(String[] args) {\n        AuthenticationController controller = new AuthenticationController();\n        AuthenticationData authenticationData = new AuthenticationData(\"user1\", \"password\");\n        HttpHeaders headers = controller.createLoginHeaders(authenticationData);\n        System.out.println(\"User ID: \" + headers.getFirst(\"userId\"));\n        System.out.println(\"Token: \" + headers.getFirst(\"token\"));\n    }\n}\n",
              "description": ""
            },
            "name": "createLoginHeaders",
            "location": {
              "start": 85,
              "insert": 65,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 64,
                "end": 84
              }
            },
            "item_type": "method",
            "length": 6,
            "docLength": 20
          }
        ]
      }
    }
  },
  {
    "name": "BookingController.java",
    "path": "service/src/main/java/com/myhome/controllers/BookingController.java",
    "content": {
      "structured": {
        "description": "A `BookingController` class that implements the `BookingsApi` interface. The class has one method, `deleteBooking()`, which takes two path variables (amenityId and bookingId) and uses the `BookingService` to delete a booking. The method returns a `ResponseEntity` with a status code indicating whether the operation was successful or not.",
        "items": [
          {
            "id": "1681de8a-5fd9-f9b1-dc4a-1ec41affcc4e",
            "ancestors": [],
            "type": "function",
            "description": "implements the BookingsApi interface and provides a method for deleting bookings based on amenity ID and booking ID. The class uses the BookingService to delete a booking, and returns a ResponseEntity with a status code indicating whether the operation was successful or not.",
            "name": "BookingController",
            "location": {
              "start": 20,
              "insert": 12,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 11,
                "end": 19
              }
            },
            "item_type": "class",
            "length": 44,
            "docLength": 8
          },
          {
            "id": "9f5df750-594b-579e-ac4b-bc16668a9d26",
            "ancestors": [
              "1681de8a-5fd9-f9b1-dc4a-1ec41affcc4e"
            ],
            "type": "function",
            "description": "deletes a booking based on the amenity ID and booking ID provided. If the booking is successfully deleted, a `NO_CONTENT` status code is returned. If the booking cannot be found, a `NOT_FOUND` status code is returned.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "ID of the amenity associated with the booking that is to be deleted.",
                "complex_type": false
              },
              {
                "name": "bookingId",
                "type_name": "String",
                "description": "ID of the booking that should be deleted.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the booking was successfully deleted.\n\n* The `@PathVariable` annotations represent the parameters passed to the function from the URL path.\n* `amenityId` and `bookingId` are the identifiers for the amenity and booking, respectively, that are being deleted.\n* `isBookingDeleted` is a boolean value indicating whether the booking was successfully deleted or not.\n* `ResponseEntity` is an class that represents a HTTP response entity, which contains information about the status code, headers, and body of the response.\n* The `status()` method of `ResponseEntity` returns the status code of the response, which can be either `HttpStatus.NO_CONTENT` or `HttpStatus.NOT_FOUND`.\n* The `build()` method of `ResponseEntity` creates a new instance of the class with the specified status code and headers.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<Void> response = bookingController.deleteBooking(\"amenityId\", \"bookingId\");\n",
              "description": "\nIn this example, the method deleteBooking() of the BookingController class is called with two String arguments. The first argument is the amenity ID and the second argument is the booking ID. The method then deletes the booking based on the provided amenity ID and booking ID, returning a ResponseEntity with a status code indicating whether the operation was successful or not. If the booking is successfully deleted, a ResponseEntity with a status code of NO_CONTENT is returned. Otherwise, a ResponseEntity with a status code of NOT_FOUND is returned."
            },
            "name": "deleteBooking",
            "location": {
              "start": 53,
              "insert": 27,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 26,
                "end": 52
              }
            },
            "item_type": "method",
            "length": 10,
            "docLength": 26
          }
        ]
      }
    }
  },
  {
    "name": "CommunityController.java",
    "path": "service/src/main/java/com/myhome/controllers/CommunityController.java",
    "content": {
      "structured": {
        "description": "An API for managing communities and their members, including adding and removing houses, admins, and communities themselves. It uses various high-level packages such as Spring WebFlux and Java 8 streams to handle HTTP requests and perform database operations. The code provides methods for creating, updating, and deleting communities, houses, and admins, as well as for checking the status of community creation and removal. It also includes error handling and response encoding using Spring WebFlux's `ResponseEntity` class.",
        "items": [
          {
            "id": "bff040c8-21cc-058e-cf4e-eb170396529e",
            "ancestors": [],
            "type": "function",
            "description": "is responsible for handling requests related to managing communities in an API. It receives requests to add admins, houses, and community users, as well as remove admins, houses, and community users from a community. The controller uses the `communityService` class to perform these actions and returns a response entity indicating whether the operation was successful or not. The controller also has methods for deleting a community and returning a response entity with a status code indicating whether the deletion was successful or not.",
            "name": "CommunityController",
            "location": {
              "start": 59,
              "insert": 56,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 55,
                "end": 58
              }
            },
            "item_type": "class",
            "length": 519,
            "docLength": 3
          },
          {
            "id": "bd3db759-7544-1982-5d4e-8f6406d1d0a5",
            "ancestors": [
              "bff040c8-21cc-058e-cf4e-eb170396529e"
            ],
            "type": "function",
            "description": "receives a `CreateCommunityRequest` object from the client and creates a new community instance using the provided details. It then maps the created community to a `CreateCommunityResponse` object and returns it as a response entity with a status of `HttpStatus.CREATED`.",
            "params": [
              {
                "name": "request",
                "type_name": "CreateCommunityRequest",
                "description": "CreateCommunityRequest object containing the details of the community to be created.\n\n* `@Valid`: The request body is validated using the `@Valid` annotation.\n* `@RequestBody`: The request body is serialized and sent as a parameter to the function.\n* `CreateCommunityRequest`: The request class that contains the properties of the community to be created.\n* `log.trace()`: A log statement that traces the receipt of the create community request.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "CreateCommunityResponse",
              "description": "a `CreateCommunityResponse` object containing the created community details.\n\n* `CreateCommunityResponse createdCommunityResponse`: This is an instance of the `CreateCommunityResponse` class, which contains information about the newly created community. The response includes the ID of the created community, its name, and a URL for linking to it.\n* `HttpStatus.CREATED`: This is the status code returned by the server, indicating that the request was successful and the community was created.\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response from the server. It contains information about the status of the request, as well as the body of the response.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "CreateCommunityRequest request = new CreateCommunityRequest();\nrequest.setName(\"My Community\");\nrequest.setDescription(\"This is my community\");\nrequest.setAdmin(new AdminDto());\nrequest.getAdmin().setUsername(\"admin123\");\nrequest.getAdmin().setPassword(\"password\");\nrequest.getHouses().add(new HouseDto());\nrequest.getHouses().get(0).setName(\"My House\");\nrequest.getHouses().get(0).setAddress(\"123 Main St.\");\nCreatedCommunityResponse response = communityApi.createCommunity(request);\n",
              "description": "\nIn this example, the CreateCommunityRequest object is created and its name, description, admin, and houses properties are set accordingly. The admin property of the request is an AdminDto object, which is also created with a username and password. Additionally, the response variable is created to hold the result of the createCommunity method call.\n\nWhen calling this method, the community service will be called with the request object as its parameter, and it will return a Community object that contains the details of the newly created community. The CreateCommunityResponse object will then be populated with the details from the returned Community object using the mapper's communityToCreateCommunityResponse method. Finally, the response variable is returned to the user, which can now use its data to display the created community to them."
            },
            "name": "createCommunity",
            "location": {
              "start": 94,
              "insert": 66,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 65,
                "end": 93
              }
            },
            "item_type": "method",
            "length": 11,
            "docLength": 28
          },
          {
            "id": "569912e1-5b86-1eb0-6243-33de31dc5222",
            "ancestors": [
              "bff040c8-21cc-058e-cf4e-eb170396529e"
            ],
            "type": "function",
            "description": "retrieves a list of communities from the service and maps them to a REST API response, which is then returned as a `GetCommunityDetailsResponse`.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page parameters for the list of communities, such as the page number and size of the list, which are used to retrieve the data from the database in a paginated manner.\n\n* `@PageableDefault(size = 200)` specifies that the `pageable` object has a default size of 200.\n* `Pageable pageable` represents an object that allows for navigating through a collection of objects, such as a list or a set, by specifying the number of elements to skip, the number of elements to include in each page, and the total number of pages.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "GetCommunityDetailsResponse",
              "description": "a list of community details in a REST API response format.\n\n* `GetCommunityDetailsResponse`: This is the class that represents the response to the API call. It has a list of `Community` objects as its attribute.\n* `communitySetToRestApiResponseCommunitySet`: This is a method that maps the `Set<Community>` object returned by the `listAllCommunity` function to a corresponding `List<GetCommunityDetailsResponseCommunity>` object. This method is used to transform the internal representation of the data into the desired format for the API response.\n* `communityService`: This is an instance of a service class that provides access to the community data. It is used to retrieve the data from the backend system.\n* `log`: This is a logging utility that is used to trace the execution of the function and provide diagnostic information.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Pageable pageable = PageRequest.of(1, 200);\nResponseEntity<GetCommunityDetailsResponse> response = communityApiController.listAllCommunity(pageable);\nSet<Community> communities = response.getBody().getCommunities();\nfor (Community community : communities) {\n    System.out.println(\"Community with ID: \" + community.getId());\n}\n",
              "description": ""
            },
            "name": "listAllCommunity",
            "location": {
              "start": 128,
              "insert": 106,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 105,
                "end": 127
              }
            },
            "item_type": "method",
            "length": 14,
            "docLength": 22
          },
          {
            "id": "6e0ad35e-a235-f6ad-e744-e1db906c9fa2",
            "ancestors": [
              "bff040c8-21cc-058e-cf4e-eb170396529e"
            ],
            "type": "function",
            "description": "receives a community ID and retrieves community details from the service, mapping them to a response entity for return.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community for which details are requested.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing a list of community details.\n\n* `ResponseEntity<GetCommunityDetailsResponse>` is a class that represents a response entity with a status code and a body containing the details of the community.\n* `getCommunityDetailsById(communityId)` is a method that retrieves the details of a specific community based on its ID.\n* `map(Function<? super T, R> mapper)` is a method that maps the result of the previous method call to a new response entity with a different type. In this case, it maps the list of communities to a response entity with a status code of `ok`.\n* `orElseGet(() -> ResponseEntity.notFound().build()` is a method that provides an alternative value if the original method call returns `null`. In this case, it returns a response entity with a status code of `not Found`.\n\nThe various attributes of the output are:\n\n* Status code: The status code of the response entity, which indicates whether the request was successful (200) or not (404 for example).\n* Body: The body of the response entity, which contains the details of the community.\n* Type: The type of the response entity, which is `GetCommunityDetailsResponse` in this case.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@RestController\npublic class CommunityController {\n    @Autowired\n    private CommunityService communityService;\n    @Autowired\n    private CommunityApiMapper communityApiMapper;\n\n    // ...\n\n    @GetMapping(\"/communities/{communityId}\")\n    public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n            @PathVariable String communityId) {\n        return communityService.getCommunityDetailsById(communityId)\n                .map(communityApiMapper::communityToRestApiResponseCommunity)\n                .map(Arrays::asList)\n                .map(HashSet::new)\n                .map(communities -> new GetCommunityDetailsResponse().communities(communities))\n                .map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.notFound().build());\n    }\n}\n",
              "description": "\nThis is a GET request that accepts the `communityId` as a path variable and returns the response entity of type `ResponseEntity<GetCommunityDetailsResponse>`. The `listCommunityDetails()` method uses the `communityService` to retrieve the community details by the specified ID. If the community does not exist, it will return a HTTP 404 (Not Found) status code using the `ResponseEntity.notFound().build()`.\n\nOtherwise, if the community exists, it maps the `Community` object to a `CommunityDTO` object using the `communityApiMapper::communityToRestApiResponseCommunity()` method. It then creates a set of `CommunityDTO` objects and wraps them in an HTTP 200 (OK) response entity using the `ResponseEntity.ok()` method.\n\nThe example uses Lombok to generate getters, setters, and constructor methods for the DTO object."
            },
            "name": "listCommunityDetails",
            "location": {
              "start": 208,
              "insert": 143,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 142,
                "end": 207
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 65
          },
          {
            "id": "3bf2d690-4615-b0a3-6149-470927237471",
            "ancestors": [
              "bff040c8-21cc-058e-cf4e-eb170396529e"
            ],
            "type": "function",
            "description": "receives a community ID and page number, retrieves the admins of that community, maps them to a Rest API response format, and returns it as a `ResponseEntity`.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community for which the list of admins is requested.",
                "complex_type": false
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "paging information for the list of community admins, allowing the method to fetch a subset of the admins starting from a specified page and with a maximum number of results per page.\n\n* `@PageableDefault(size = 200)`: This annotation specifies the default page size for pagination, which is set to 200 in this example. The page size determines the number of community admins returned per page.\n* `Pageable`: This interface represents a pageable object, which provides methods for navigating through a sequence of pages. In this function, `pageable` is used to determine the pagination settings for the list of community admins.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ListCommunityAdminsResponse` object containing the list of community admins.\n\n* `ResponseEntity<ListCommunityAdminsResponse>`: This is the overall response entity that contains the list of community admins.\n* `ListCommunityAdminsResponse`: This class represents the list of community admins in a REST API format. It has an `admins` field that contains the list of admins for the specified community ID.\n* `map(Function<T, U> mappingFunction)`: This method is used to map the input data to the desired output format using a provided function. In this case, it maps the `HashSet` of community admins to the `ListCommunityAdminsResponse` class.\n* `orElseGet(() -> ResponseEntity.notFound().build())`: This method is used to provide an alternative response if the original data cannot be processed successfully. In this case, it returns a `ResponseEntity.notFound()` response if the community ID is not found.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\n  public void should_list_community_admins_when_successful() {\n    // Arrange\n    String communityId = \"1234567890\";\n    List<CommunityAdmin> admins = Arrays.asList(new CommunityAdmin(\"1\", \"John Doe\"),\n                                               new CommunityAdmin(\"2\", \"Jane Doe\"));\n    Pageable pageable = PageRequest.of(0, 2);\n\n    when(communityService.findCommunityAdminsById(communityId, pageable))\n        .thenReturn(admins);\n\n    // Act\n    ResponseEntity<ListCommunityAdminsResponse> response =\n        communityApiController.listCommunityAdmins(communityId, pageable);\n\n    // Assert\n    assertThat(response).isNotNull();\n    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);\n    assertThat(response.getBody().getAdmins())\n        .extracting(\"id\", \"username\")\n        .containsExactlyInAnyOrder(new Object[] { \"1\", \"John Doe\" }, new Object[] { \"2\", \"Jane Doe\" });\n  }\n",
              "description": "\nThe test case uses the `when` method to mock the behavior of the `communityService.findCommunityAdminsById` method and return a list of `CommunityAdmin` objects. The test case then invokes the `listCommunityAdmins` method with the provided community ID and pageable object, and asserts that the response status code is 200 OK and that the returned admins are equal to the expected admins based on their IDs and usernames."
            },
            "name": "listCommunityAdmins",
            "location": {
              "start": 271,
              "insert": 222,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 221,
                "end": 270
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 49
          },
          {
            "id": "543bbc3a-e157-9f9c-124c-78f40d657469",
            "ancestors": [
              "bff040c8-21cc-058e-cf4e-eb170396529e"
            ],
            "type": "function",
            "description": "receives a community ID and page number, retrieves all houses associated with that community from the database, maps them to a `HashSet`, converts them into a `GetHouseDetailsResponse`, and returns the response entity.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "unique identifier for a community that the user wants to retrieve house details for.",
                "complex_type": false
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page size and sort order for listing community houses, allowing for pagination of the results.\n\n* `@PageableDefault(size = 200)`: This annotation specifies the default page size for the list of houses returned in the response. The value `200` represents the maximum number of houses to be listed per page.\n* `Pageable`: This is an interface that defines the `getPageNumber()` and `getPageSize()` methods, which are used to control the pagination of the list of houses.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntityGetHouseDetailsResponse",
              "description": "a `GetHouseDetailsResponse` object containing a list of houses for a specified community.\n\n* `ResponseEntity<GetHouseDetailsResponse>` is an object that represents a response with a status code and a body containing the list of houses.\n* `getHouses()` returns a list of `CommunityHouseSet`, which is a set of house details in JSON format.\n* `map(Function<List<CommunityHouse>, GetHouseDetailsResponse>)` is a method that takes a function as an argument and applies it to the list of houses, transforming them into a response object.\n* `orElseGet(() -> ResponseEntity.notFound().build())` is a method that returns a default response if the function provided as an argument does not produce a valid response. In this case, the default response is `ResponseEntity.notFound().build()`, which means \"not found\".",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<GetHouseDetailsResponse> response = communityController.listCommunityHouses(\"communityId\");\n",
              "description": "\nHere, \"communityId\" is a string representing the ID of the community whose houses we want to get details for.     The `listCommunityHouses` method uses this ID to call `findCommunityHousesById` on the `communityService`, which returns a set of `CommunityHouse` objects containing the details of all houses within the specified community. These are then converted into a set of `RestApiResponseCommunityHouse` objects using `communityApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet()`. Finally, these `RestApiResponseCommunityHouse` objects are returned in a `GetHouseDetailsResponse` object and wrapped in a `ResponseEntity`, which is then returned as the response to the client.\n\nIf no houses were found for the specified community ID, the method would return a `ResponseEntity` with a status code of `NOT_FOUND`. This indicates that the specified community could not be found, which means that either the community ID is invalid or the user does not have permission to access it. In this case, the client would receive an empty response body and a HTTP 404 status code.\n\nThe `@PageableDefault(size = 200)` annotation on the `pageable` parameter indicates that if the client provides no page size or offset in their request, the default value of 200 will be used for the page size, and an offset of 0 will be used. This allows us to paginate through the list of houses returned by the method without having to worry about the client providing a valid page size and offset every time."
            },
            "name": "listCommunityHouses",
            "location": {
              "start": 315,
              "insert": 285,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 284,
                "end": 314
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 30
          },
          {
            "id": "987d97db-548f-3390-5946-4a4a3ebf8439",
            "ancestors": [
              "bff040c8-21cc-058e-cf4e-eb170396529e"
            ],
            "type": "function",
            "description": "adds admins to a community based on a request. It retrieves the community and adds the provided admins to it, returning a response with the updated admins set.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community for which admins are being added.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "AddCommunityAdminRequest",
                "description": "AddCommunityAdminRequest object containing the information about the admins to be added to the community.\n\n* `@Valid`: This annotation indicates that the input request body must be validated according to the specified validation rules.\n* `@PathVariable`: This annotation specifies that the `communityId` parameter is passed from the URL path variable.\n* `AddCommunityAdminRequest`: This class represents the request body, which contains the list of admins to be added to the community. Its properties are:\n\t+ `admins()`: A list of admin user IDs.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of `CREATED` and a `AddCommunityAdminResponse` object containing the set of admins for the specified community.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a HTTP request. It has a status code and a body, which in this case contains the `AddCommunityAdminResponse`.\n* `AddCommunityAdminResponse`: This is a custom response class that contains information about the added admins to the community. It has a single attribute called `admins`, which is a set of user IDs.\n* `HttpStatus.CREATED`: This is an instance of the `HttpStatus` class, which represents a HTTP status code indicating that the request was successful and the resource was created.\n* `body`: This is the body of the response entity, which contains the `AddCommunityAdminResponse`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate CommunityApiController communityApiController;\n\n@Test\npublic void testAddCommunityAdmin() {\n    String communityId = \"1234\";\n    Set<String> admins = new HashSet<>();\n    admins.add(\"admin1\");\n    admins.add(\"admin2\");\n\n    AddCommunityAdminRequest request = new AddCommunityAdminRequest(admins);\n    ResponseEntity<AddCommunityAdminResponse> response = communityApiController.addCommunityAdmins(communityId, request);\n\n    assertEquals(HttpStatus.CREATED, response.getStatusCode());\n    assertNotNull(response.getBody());\n}\n",
              "description": "\nThe test method first obtains an instance of the CommunityApiController using Autowired annotation and then sets up two admin names \"admin1\" and \"admin2\". The request object is created by passing in the set of admin names into its constructor, and the community ID to be used for the request is \"1234\".\n\nThe test method calls the addCommunityAdmins method on the controller instance with the communityId and the AddCommunityAdminRequest object as parameters. The response variable contains the actual response from the server.\n\nThen, the test method checks that the status code of the response is HttpStatus.CREATED, which indicates that the request was successful. It also checks that the body of the response is not null."
            },
            "name": "addCommunityAdmins",
            "location": {
              "start": 367,
              "insert": 329,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 328,
                "end": 366
              }
            },
            "item_type": "method",
            "length": 16,
            "docLength": 38
          },
          {
            "id": "4b5bb944-5b3c-4a9c-5c41-af83f65f5ef6",
            "ancestors": [
              "bff040c8-21cc-058e-cf4e-eb170396529e"
            ],
            "type": "function",
            "description": "adds one or more houses to a community identified by its ID. It receives a request body containing the house names and returns a response with the IDs of the added houses.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community to which new houses will be added.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "AddCommunityHouseRequest",
                "description": "AddCommunityHouseRequest object that contains the houses to be added to the community.\n\n* `@Valid`: The `AddCommunityHouseRequest` object is validated using the `@Valid` annotation.\n* `@PathVariable String communityId`: The community ID is passed as a path variable in the URL.\n* `@RequestBody AddCommunityHouseRequest request`: The `AddCommunityHouseRequest` object is serialized and passed in the body of the HTTP request.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AddCommunityHouseResponse",
              "description": "a `ResponseEntity` with a `HttpStatus.CREATED` code and a `AddCommunityHouseResponse` object containing the newly created house IDs.\n\n* `AddCommunityHouseResponse`: This is the class that represents the response to the API request.\n* `setHouses()`: This method sets the `houses` attribute of the `AddCommunityHouseResponse` object to a set of strings representing the IDs of the added houses.\n* `status()`: The HTTP status code of the response, which is set to `HttpStatus.CREATED` if the request was successful and `HttpStatus.BAD_REQUEST` otherwise.\n* `body()`: The body of the response, which is an instance of `AddCommunityHouseResponse`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\n  void addCommunityHouse_successful() {\n    String communityId = \"1234567890\";\n    AddCommunityHouseRequest request = new AddCommunityHouseRequest();\n    Set<CommunityHouseName> houses = new HashSet<>();\n    houses.add(new CommunityHouseName(\"1\", \"house 1\"));\n    houses.add(new CommunityHouseName(\"2\", \"house 2\"));\n    request.setHouses(houses);\n    ResponseEntity<AddCommunityHouseResponse> response = communityApiController.addCommunityHouses(communityId, request);\n    assertEquals(HttpStatus.CREATED, response.getStatusCode());\n    AddCommunityHouseResponse body = response.getBody();\n    assertNotNull(body);\n    Set<String> housesAdded = body.getHouses();\n    assertFalse(housesAdded.isEmpty());\n  }\n",
              "description": "\nThis test would check that the method addCommunityHouses returns a status code of HttpStatus.CREATED if it is successful and the body contains the ID of the added houses."
            },
            "name": "addCommunityHouses",
            "location": {
              "start": 453,
              "insert": 384,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 383,
                "end": 452
              }
            },
            "item_type": "method",
            "length": 17,
            "docLength": 69
          },
          {
            "id": "2b445c34-f450-3c82-c84d-ba0d7dac4589",
            "ancestors": [
              "bff040c8-21cc-058e-cf4e-eb170396529e"
            ],
            "type": "function",
            "description": "deletes a house from a community based on its ID, using the community service to retrieve the community details and remove the house from the community.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community that the house to be deleted belongs to.",
                "complex_type": false
              },
              {
                "name": "houseId",
                "type_name": "String",
                "description": "ID of the house to be removed from the specified community.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntityVoid",
              "description": "a `ResponseEntity` object with a status code of `noContent`, indicating that the house was successfully removed from the community.\n\n* `ResponseEntity<Void>`: This represents an empty response entity with a type of Void.\n* `noContent()`: This is a builder class that creates an instance of `ResponseEntity` with a status code of 204 (No Content) and a body of Void.\n* `<Void>`: This is the type of the body of the response entity, indicating that the response contains no content.\n\nThe function first logs a trace message to indicate that it has received a request to delete a house from a community. Then, it uses the `getCommunityDetailsById` method of the `communityService` class to obtain an optional reference to a `Community` object associated with the provided community ID. If the community is found, the function uses the `removeHouseFromCommunityByHouseId` method to remove the house from the community. Finally, the function returns a response entity with a status code of 204 (No Content) and an empty body, indicating that the request was successful.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\nvoid deleteCommunityHouse_whenSuccessful() {\n  // given\n  String communityId = \"1234567890\";\n  String houseId = \"abcdefghij\";\n\n  // when\n  ResponseEntity<Void> response = communityController.removeCommunityHouse(communityId, houseId);\n\n  // then\n  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);\n}\n",
              "description": "\nHere's an explanation of the example:\n* The test starts by creating two strings that represent IDs for a community and house to be removed from a community.\n* Then, the test calls the `removeCommunityHouse` method with these IDs as arguments, using the `communityController` object, which is an instance of the `CommunityController` class that we're testing.\n* The test verifies that the response has a status code of `NO_CONTENT`, which indicates that the house was successfully removed from the community."
            },
            "name": "removeCommunityHouse",
            "location": {
              "start": 498,
              "insert": 471,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 470,
                "end": 497
              }
            },
            "item_type": "method",
            "length": 15,
            "docLength": 27
          },
          {
            "id": "22ec5ac3-ae34-1abf-344a-f230afe64d4a",
            "ancestors": [
              "bff040c8-21cc-058e-cf4e-eb170396529e"
            ],
            "type": "function",
            "description": "removes an admin from a community based on the community ID and admin ID provided in the path variables. It first checks if the admin was successfully removed, then returns a NO_CONTENT status code if successful or a NOT_FOUND status code otherwise.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community to which the admin belongs.",
                "complex_type": false
              },
              {
                "name": "adminId",
                "type_name": "String",
                "description": "ID of the admin to be removed from the community.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntityVoid",
              "description": "a response entity with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the admin was successfully removed from the community.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the requested resource has been successfully deleted and no content was returned in the response body.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the admin to be removed could not be found in the community with the provided ID.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@RestController\npublic class CommunityApiController {\n    private final CommunityService communityService;\n    private final CommunityApiMapper communityApiMapper;\n    public CommunityApiController(CommunityService communityService, CommunityApiMapper communityApiMapper) {\n        this.communityService = communityService;\n        this.communityApiMapper = communityApiMapper;\n    }\n    \n    // ... other methods\n    \n    @DeleteMapping(\"/communities/{communityId}/administrators/{adminId}\")\n    public ResponseEntity<Void> removeAdminFromCommunity(\n            @PathVariable String communityId, \n            @PathVariable String adminId) {\n        log.trace(\"Received request to delete an admin from community with community id[{}] and admin id[{}]\", communityId, adminId);\n        boolean adminRemoved = communityService.removeAdminFromCommunity(communityId, adminId);\n        if (adminRemoved) {\n            return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n        } else {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n        }\n    }\n}\n",
              "description": "\nIn this example, a request is sent to the `/communities/{communityId}/administrators/{adminId}` endpoint using the `DELETE` HTTP method with `{communityId}` and `{adminId}` being path variables. The method then uses the `removeAdminFromCommunity` method from the `CommunityService` class to remove an admin from a community, returning a `ResponseEntity<Void>` object indicating whether the deletion was successful or not. If the admin was successfully removed from the community, it returns a `HttpStatus.NO_CONTENT` status code. Otherwise, if the specified community could not be found or the admin ID is invalid, it returns a `HttpStatus.NOT_FOUND` status code."
            },
            "name": "removeAdminFromCommunity",
            "location": {
              "start": 538,
              "insert": 514,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 513,
                "end": 537
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 24
          },
          {
            "id": "a8cf6739-6de6-7499-3243-c61f09392c41",
            "ancestors": [
              "bff040c8-21cc-058e-cf4e-eb170396529e"
            ],
            "type": "function",
            "description": "handles requests to delete a community. It checks if the community is deleted successfully and returns a `NO_CONTENT` status code if successful, or a `NOT_FOUND` status code otherwise.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community to be deleted.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the community was successfully deleted.\n\n* `ResponseEntity<Void>`: This is the type of the output returned by the function. It represents an empty response entity with a status code.\n* `HttpStatus.NO_CONTENT`: This is the status code associated with the output. It indicates that the requested resource has been successfully deleted and no content was returned.\n* `HttpStatus.NOT_FOUND`: This is the alternative status code associated with the output when the delete operation fails due to the community not found.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\npublic ResponseEntity<Void> deleteCommunity(String communityId) {\n    log.trace(\"Received request to delete community with id[{}]\", communityId);\n    boolean isDeleted = communityService.deleteCommunity(communityId);\n    if (isDeleted) {\n        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n}\n",
              "description": "\nThis method would be used as follows:\n"
            },
            "name": "deleteCommunity",
            "location": {
              "start": 567,
              "insert": 552,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 551,
                "end": 566
              }
            },
            "item_type": "method",
            "length": 10,
            "docLength": 15
          }
        ]
      }
    }
  },
  {
    "name": "HouseController.java",
    "path": "service/src/main/java/com/myhome/controllers/HouseController.java",
    "content": {
      "structured": {
        "description": "A REST API for managing houses and their members. It includes functions for listing all members of a house, adding new members to a house, and deleting members from a house. The code utilizes various Java packages, including `ResponseEntity`, `RestApiResponse`, `HouseMember`, and `Pageable`.",
        "items": [
          {
            "id": "872cf4e3-54f3-7bb0-ca44-d41bd7f152c6",
            "ancestors": [],
            "type": "function",
            "description": "provides functions for managing houses and their members. These functions include getting house details, listing all members of a house, adding members to a house, and deleting members from a house. The class uses generic types and method references to work with different response entities and status codes. Additionally, the class logs messages related to the execution of its functions using a logging object.",
            "name": "HouseController",
            "location": {
              "start": 46,
              "insert": 43,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 42,
                "end": 45
              }
            },
            "item_type": "class",
            "length": 274,
            "docLength": 3
          },
          {
            "id": "01dbceaa-d93f-a59b-6845-44330a8f80db",
            "ancestors": [
              "872cf4e3-54f3-7bb0-ca44-d41bd7f152c6"
            ],
            "type": "function",
            "description": "receives a pageable request parameter and lists all houses from the database using the `houseService`. The list is then mapped to a REST API response using `houseApiMapper`, and returned as a `GetHouseDetailsResponse` object in a `ResponseEntity`.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page request parameters, such as the page number and size of the result set, which allows the listAllHouses method to filter and sort the house details based on the user's preferences.\n\n* `@PageableDefault`: This annotation indicates that the `pageable` parameter has default values for its properties, which are specified in the annotation metadata. The defaults are specified as an immutable Map, where each key-value pair represents a property of the pageable object. In this case, the default values are `size=200`, indicating that the list of houses will be returned with up to 200 elements per page.\n* `Pageable`: This interface defines the methods required for pagination, including `getTotalElements()` (which returns the total number of houses in the list), `getTotalPages()` (which returns the total number of pages that can be generated from the list), and `getPageAtPosition()` (which returns a page at a specific position).\n* `size`: This property represents the number of elements to return per page. It is set to `200` by default, but can be changed depending on the requirements of the application.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "GetHouseDetailsResponse",
              "description": "a `GetHouseDetailsResponse` object containing a set of `CommunityHouse` objects converted from the list of houses retrieved from the database.\n\n* `GetHouseDetailsResponse`: This class represents the response to the list all houses request.\n* `setHouses()`: This method returns a set of `GetHouseDetailsResponseCommunityHouse` objects, which contain the details of each house in the community.\n* `HttpStatus.OK`: The status code of the response indicates that the request was successful.\n* `body()`: This method returns the response body, which contains the `GetHouseDetailsResponse` object.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<GetHouseDetailsResponse> listAllHouses(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses\");\n\n    Set<CommunityHouse> houseDetails =\n        houseService.listAllHouses(pageable);\n    Set<GetHouseDetailsResponseCommunityHouse> getHouseDetailsResponseSet =\n        houseApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet(houseDetails);\n\n    GetHouseDetailsResponse response = new GetHouseDetailsResponse();\n\n    response.setHouses(getHouseDetailsResponseSet);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n}\n",
              "description": "\nIn this example, the method `listAllHouses` is being called with a Pageable object as its only argument, which sets the page size to 200 by default. The returned value of this function is then processed further to create an HTTP response entity."
            },
            "name": "listAllHouses",
            "location": {
              "start": 82,
              "insert": 54,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 53,
                "end": 81
              }
            },
            "item_type": "method",
            "length": 16,
            "docLength": 28
          },
          {
            "id": "884f49fc-9822-c494-ba4d-8003b3b83aa7",
            "ancestors": [
              "872cf4e3-54f3-7bb0-ca44-d41bd7f152c6"
            ],
            "type": "function",
            "description": "retrieves house details for a given id and maps them to a `GetHouseDetailsResponse`.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "id of the house for which details are requested to be retrieved.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "GetHouseDetailsResponse",
              "description": "a `GetHouseDetailsResponse` object containing a list of houses with their details.\n\n* `ResponseEntity<GetHouseDetailsResponse>`: This is a functional response entity that returns a `GetHouseDetailsResponse` object.\n* `getHouseDetailsResponseCommunityHouses`: This is a list of community houses that are returned as part of the response.\n* `houses(getHouseDetailsResponseCommunityHouses)`: This is a method that takes a list of community houses and returns them in the response.\n* `map(Function<GetHouseDetailsResponse, ResponseEntity<GetHouseDetailsResponse>> mapper)`: This line uses a lambda function to map the `getHouseDetailsResponseCommunityHouses` list to a `ResponseEntity<GetHouseDetailsResponse>` object.\n* `orElse(ResponseEntity.notFound().build())`: This line provides an alternative response if the `map` method does not return a valid response. It returns a `ResponseEntity.notFound()` object by default.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "String houseId = \"1\";\nResponseEntity<GetHouseDetailsResponse> responseEntity = restApiClient.getHouseDetails(houseId);\n// If the house with ID '1' exists, responseEntity will contain a non-null value.\nif (responseEntity != null) {\n    System.out.println(\"Got details for house with ID \" + houseId);\n} else {\n    System.out.println(\"House with ID \" + houseId + \" does not exist\");\n}\n",
              "description": "\nIn this example, the method getHouseDetails is called with a house ID of 1 as input parameter. The responseEntity variable will hold the ResponseEntity object returned by the method. If the house with ID 1 exists, responseEntity will contain a non-null value and the statement inside the if block will be executed. Otherwise, the statement inside the else block will be executed."
            },
            "name": "getHouseDetails",
            "location": {
              "start": 159,
              "insert": 99,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 98,
                "end": 158
              }
            },
            "item_type": "method",
            "length": 10,
            "docLength": 60
          },
          {
            "id": "73aeaa33-fca5-1f99-c642-b89e8f2a151d",
            "ancestors": [
              "872cf4e3-54f3-7bb0-ca44-d41bd7f152c6"
            ],
            "type": "function",
            "description": "retrieves all members of a house identified by `houseId`, converts them to a set using `HashSet::new`, maps each member to a REST API response, and returns the resulting list of members in the `ListHouseMembersResponse`.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "unique identifier of the house for which members are to be listed.",
                "complex_type": false
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page request, specifying the number of members to return and the starting point for the list.\n\n* `size`: The maximum number of members to return per page.\n* `sort`: The field by which the members will be sorted.\n* `direction`: The direction of the sort (ascending or descending).",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntityListHouseMembersResponse",
              "description": "a `ResponseEntity<ListHouseMembersResponse>` object containing a list of `HouseMember` objects in a REST API format.\n\n* `ResponseEntity<ListHouseMembersResponse>`: This is the generic type of the returned response entity, which represents a list of `HouseMember` objects.\n* `ListHouseMembersResponse`: This class represents the contents of the list returned by the function. It has a single property, `members`, which is a list of `HouseMember` objects.\n* `members`: This property is a list of `HouseMember` objects, which are the actual members of the house being listed. Each object in the list contains the member's ID, name, and any other relevant information.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate HouseController houseController;\n\nList<HouseMember> members = houseController.listAllMembersOfHouse(\"houseId\", Pageable.unpaged()).getBody();\n",
              "description": "\nThis code autowires a HouseController instance, and then uses it to list all the members of the house with an ID of \"houseId\" using the `listAllMembersOfHouse` method. The pageable argument is set to `Pageable.unpaged()`, which indicates that the entire list of members should be retrieved in a single page. Finally, the `getBody` method is used to retrieve the list of HouseMember objects from the returned ResponseEntity object."
            },
            "name": "listAllMembersOfHouse",
            "location": {
              "start": 204,
              "insert": 170,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 169,
                "end": 203
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 34
          },
          {
            "id": "6fe3330d-efe9-a99d-c14e-8d3156a10605",
            "ancestors": [
              "872cf4e3-54f3-7bb0-ca44-d41bd7f152c6"
            ],
            "type": "function",
            "description": "adds members to a house based on the provided request. It retrieves the existing members of the house, updates the member list with new members, and returns the updated list or a NOT_FOUND status if no new members were added.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "identifier of the house for which members are being added.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "AddHouseMemberRequest",
                "description": "AddHouseMemberRequest object containing the member information to be added to the specified house.\n\n* `houseId`: The ID of the house to which members are being added.\n* `request.getMembers()`: A set of `HouseMemberDto` objects representing the new members to be added to the house.\n* `houseService.addHouseMembers(houseId, members)`: An API call that adds the members to the house, returning a set of saved members.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AddHouseMemberResponse",
              "description": "a `ResponseEntity` object containing the added house members as a list of `AddHouseMemberResponse` objects.\n\n* `AddHouseMemberResponse`: This is a response object that contains information about the added members to the house.\n\t+ `setMembers`: This is a set of `House Member` objects that represent the added members to the house. These objects have attributes such as `id`, `name`, `email`, and `role`.\n\nThe function returns an `AddHouseMemberResponse` object depending on whether any members were added successfully or not. If no members were added, it returns a `ResponseEntity` with a status code of `NOT_FOUND`. Otherwise, it returns a `ResponseEntity` with a status code of `CREATED` and the `AddHouseMemberResponse` object as the body.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\n  public void givenAValidMemberAndHouseId_whenAddingAMemberToAHouse_thenReturnsHttpStatusCreated() {\n    // Given\n    final String houseId = \"a-house-id\";\n    final AddHouseMemberRequest request = new AddHouseMemberRequest();\n    final HouseMemberDto memberDto = new HouseMemberDto(\"a-member-id\", \"John Doe\");\n    request.setMembers(Collections.singletonList(memberDto));\n\n    // When\n    ResponseEntity<AddHouseMemberResponse> response =\n        houseController.addHouseMembers(houseId, request);\n\n    // Then\n    assertEquals(HttpStatus.CREATED, response.getStatusCode());\n  }\n",
              "description": "\nThis test case would verify that a valid member and house ID is provided to the addHouseMembers method, which returns a HTTP status code of CREATED if the members were successfully added to the specified house."
            },
            "name": "addHouseMembers",
            "location": {
              "start": 262,
              "insert": 218,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 217,
                "end": 261
              }
            },
            "item_type": "method",
            "length": 18,
            "docLength": 44
          },
          {
            "id": "36b936a4-bcc8-cbbd-5f47-823764cb0933",
            "ancestors": [
              "872cf4e3-54f3-7bb0-ca44-d41bd7f152c6"
            ],
            "type": "function",
            "description": "deletes a member from a house based on the provided house ID and member ID, returning an HTTP response indicating whether the operation was successful or not.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "12-digit unique identifier of the house for which the member is to be deleted.",
                "complex_type": false
              },
              {
                "name": "memberId",
                "type_name": "String",
                "description": "ID of the member to be deleted from the specified house.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the member was successfully deleted or not.\n\n* The `ResponseEntity` object represents the result of the delete operation, with a status code indicating whether the operation was successful or not.\n* The `HttpStatus` field contains the status code of the response, which is either `NO_CONTENT` (204) if the member was successfully deleted, or `NOT_FOUND` (404) otherwise.\n\nOverall, the output of the `deleteHouseMember` function indicates whether the delete operation was successful or not, and provides additional information about the outcome of the operation.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class MyController {\n  private final HouseService houseService;\n  \n  @Autowired\n  public MyController(HouseService houseService) {\n    this.houseService = houseService;\n  }\n  \n  @RequestMapping(\"/delete-member\")\n  @ResponseStatus(HttpStatus.NO_CONTENT)\n  public void deleteMember(@PathVariable String houseId, @PathVariable String memberId) {\n    houseService.deleteHouseMember(houseId, memberId);\n  }\n}\n",
              "description": "\nThis example shows how the deleteHouseMember method can be used in a controller class. When this route is called with two path variables (i.e., `houseId` and `memberId`), it will use the houseService to delete the specified member from the specified house."
            },
            "name": "deleteHouseMember",
            "location": {
              "start": 308,
              "insert": 281,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 280,
                "end": 307
              }
            },
            "item_type": "method",
            "length": 11,
            "docLength": 27
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberDocumentController.java",
    "path": "service/src/main/java/com/myhome/controllers/HouseMemberDocumentController.java",
    "content": {
      "structured": {
        "description": "A REST controller for managing house member documents. It includes three main endpoints: `getHouseMemberDocument`, `uploadHouseMemberDocument`, and `updateHouseMemberDocument`. These endpoints handle requests to retrieve, upload, or update house member documents, respectively. The controller uses the `HouseMemberDocumentService` to interact with the document database and returns appropriate HTTP status codes and headers in response to the requests.",
        "items": [
          {
            "id": "45b6a8d1-072f-56a2-0c42-35fef284e325",
            "ancestors": [],
            "type": "function",
            "description": "from the file provides functions for handling house member documents. The class includes methods for retrieving and updating house member documents, as well as deleting them. The functions log trace messages to indicate that they have received a request to perform an operation on a house member document. The class also uses the `HttpHeaders` and `ResponseEntity` objects to return status codes and headers to the client.",
            "name": "HouseMemberDocumentController",
            "location": {
              "start": 42,
              "insert": 39,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 38,
                "end": 41
              }
            },
            "item_type": "class",
            "length": 172,
            "docLength": 3
          },
          {
            "id": "d994bdcd-8321-90a9-c144-9875d68b0357",
            "ancestors": [
              "45b6a8d1-072f-56a2-0c42-35fef284e325"
            ],
            "type": "function",
            "description": "retrieves a house member document given its ID and returns it as a byte array in an HTTP response entity with appropriate headers for caching and content type.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "id of the house member for whom the document is being retrieved.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing the requested house member document content as a byte array, along with headers setting the cache control and content type.\n\n* `ResponseEntity<byte[]>` represents an entity containing the house member document as a byte array.\n* `HttpHeaders` is an instance of `HttpHeaders`, which contains headers related to caching and content type.\n* `ContentDisposition` is an instance of `ContentDisposition`, which provides information about how the response should be displayed in the browser, including the filename of the document.\n* `HttpStatus.OK` indicates that the request was successful and the document could be retrieved.\n* The `map` method is used to transform the `Optional<HouseMemberDocument>` into a `ResponseEntity<byte[]>` if the house member document exists, or an empty `ResponseEntity` otherwise.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n}\n",
              "description": ""
            },
            "name": "getHouseMemberDocument",
            "location": {
              "start": 70,
              "insert": 49,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 48,
                "end": 69
              }
            },
            "item_type": "method",
            "length": 24,
            "docLength": 21
          },
          {
            "id": "17076232-c2e0-ddae-c84c-44a4c6a96d8f",
            "ancestors": [
              "45b6a8d1-072f-56a2-0c42-35fef284e325"
            ],
            "type": "function",
            "description": "receives a request to upload a house member document and creates a new house member document in the database using the provided multipart file. It then returns a response entity indicating whether the document was successfully created or not.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "ID of the house member whose document is being uploaded.",
                "complex_type": false
              },
              {
                "name": "memberDocument",
                "type_name": "MultipartFile",
                "description": "MultipartFile containing the member's document to be added to the house member documents.\n\n* `@RequestParam(\"memberDocument\") MultipartFile memberDocument`: This represents a file uploaded by the user as part of the House Member document upload process. The `MultipartFile` class provides access to the file's metadata, such as its name and size.\n* `log.trace(\"Received request to add house member documents\")` : This line logs an informational message indicating that a request has been received to add new House Member documents.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code indicating whether the document was successfully uploaded or not.\n\n* `ResponseEntity.status(HttpStatus.NO_CONTENT).build()`: This returns a response entity with a status code of NO_CONTENT, indicating that the operation was successful and no additional content was provided.\n* `ResponseEntity.status(HttpStatus.NOT_FOUND).build()`: This returns a response entity with a status code of NOT_FOUND, indicating that the requested resource could not be found.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<Void> response = \n                       controller.uploadHouseMemberDocument(memberId, memberDocument);\nif (response.getStatusCode() == HttpStatus.NO_CONTENT) {\n    // Document was successfully added\n} else if (response.getStatusCode() == HttpStatus.NOT_FOUND) {\n    // Document could not be found\n} else {\n    // Unexpected error occurred\n}\n",
              "description": "\nThis is using the controller as a variable in the example code, and the method uploadHouseMemberDocument is being called with two parameters: memberId and memberDocument.  The response from the function is being stored in the variable \"response\", and then checked for its status code. If the status code is HttpStatus.NO_CONTENT, this means that the document was successfully added. If it's HttpStatus.NOT_FOUND, this means that the document could not be found. Otherwise, an error occurred."
            },
            "name": "uploadHouseMemberDocument",
            "location": {
              "start": 128,
              "insert": 95,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 94,
                "end": 127
              }
            },
            "item_type": "method",
            "length": 11,
            "docLength": 33
          },
          {
            "id": "d6a5f9d6-a0d5-f880-2747-d25509410db3",
            "ancestors": [
              "45b6a8d1-072f-56a2-0c42-35fef284e325"
            ],
            "type": "function",
            "description": "updates a house member's document based on the inputted file. It returns a ResponseEntity with a status code indicating whether the update was successful or not.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "identifier of the house member whose document is being updated.",
                "complex_type": false
              },
              {
                "name": "memberDocument",
                "type_name": "MultipartFile",
                "description": "file containing the updated member document to be saved in the database by the `houseMemberDocumentService`.\n\n* `memberId`: The ID of the member whose document is being updated.\n* `memberDocument`: A `MultipartFile` object representing the document to be updated.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a response entity with a status code of NO_CONTENT or NOT_FOUND, depending on whether the update was successful.\n\n* `ResponseEntity.status(HttpStatus.NO_CONTENT).build()`: This is a response entity with a status code of NO_CONTENT, indicating that the request was successful and no content was returned.\n* `ResponseEntity.status(HttpStatus.NOT_FOUND).build()`: This is a response entity with a status code of NOT_FOUND, indicating that the requested resource could not be found.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n",
              "description": "\nThis method is used to update a house member document based on the provided 'memberId'. It takes in two parameters:\n* @PathVariable String memberId, which represents the ID of the house member whose document is to be updated.\n* @RequestParam(\"memberDocument\") MultipartFile memberDocument, which contains the updated document for the house member."
            },
            "name": "updateHouseMemberDocument",
            "location": {
              "start": 173,
              "insert": 140,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 139,
                "end": 172
              }
            },
            "item_type": "method",
            "length": 10,
            "docLength": 33
          },
          {
            "id": "ea9356ab-149f-d593-a14d-ccbf82b7a523",
            "ancestors": [
              "45b6a8d1-072f-56a2-0c42-35fef284e325"
            ],
            "type": "function",
            "description": "deletes a house member document based on the given `memberId`. If the document is deleted successfully, a `NO_CONTENT` status code is returned. Otherwise, a `NOT_FOUND` status code is returned.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "unique identifier of the house member whose document is to be deleted.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the document was successfully deleted.\n\n* `HttpStatus`: This is an instance of `HttpStatus`, which represents the HTTP status code of the response. In this case, it can be either `NO_CONTENT` or `NOT_FOUND`.\n* `ResponseEntity`: This is an instance of `ResponseEntity`, which is a higher-level object that contains both the `HttpStatus` and the body of the response. In this case, the body is ` Void`, which means the response has no content.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<Void> response = deleteHouseMemberDocument(\"1234567890\");\n",
              "description": "\nIn this case, the parameter `memberId` would be set to `\"1234567890\"`, and the method would attempt to delete a house member document with that ID. If it is successful in deleting the document, the return value of the method would be a `ResponseEntity` object with a status code of `HttpStatus.NO_CONTENT`. Otherwise, if the document cannot be found or any other error occurs, the method would return a `ResponseEntity` object with a status code of `HttpStatus.NOT_FOUND`."
            },
            "name": "deleteHouseMemberDocument",
            "location": {
              "start": 203,
              "insert": 184,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 183,
                "end": 202
              }
            },
            "item_type": "method",
            "length": 10,
            "docLength": 19
          }
        ]
      }
    }
  },
  {
    "name": "PaymentController.java",
    "path": "service/src/main/java/com/myhome/controllers/PaymentController.java",
    "content": {
      "structured": {
        "description": "An API for managing community members and their roles within a community house. It utilizes various high-level packages such as `ResponseEntity`, `Pageable`, `SchedulePaymentResponse`, `ListMemberPaymentsResponse`, and `CommunityHouse`. The code provides several methods for retrieving payment details, listing all member payments, and listing all scheduled payments for an admin. These methods use various functions and mappers to map data from the community service to a standardized response format.",
        "items": [
          {
            "id": "defd3179-3cc8-219c-f441-65d6d667abfe",
            "ancestors": [],
            "type": "function",
            "description": "is responsible for handling requests related to payments within a community. It provides methods for listing all payments associated with a member ID, scheduling payments, and retrieving payment details for a specified payment ID. The class also includes a method for checking if an admin is present in a specific community by querying the community details and admins based on the user ID.",
            "name": "PaymentController",
            "location": {
              "start": 60,
              "insert": 51,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 50,
                "end": 59
              }
            },
            "item_type": "class",
            "length": 278,
            "docLength": 9
          },
          {
            "id": "00fc69e3-4a4f-7f9b-1b47-f602ab16d73d",
            "ancestors": [
              "defd3179-3cc8-219c-f441-65d6d667abfe"
            ],
            "type": "function",
            "description": "takes a `SchedulePaymentRequest` object, validates it, and then schedules a payment for the community member based on the admin's approval.",
            "params": [
              {
                "name": "request",
                "type_name": "SchedulePaymentRequest",
                "description": "SchedulePaymentRequest object containing the information necessary to schedule a payment for a member of a community.\n\n* `request.getMemberId()`: The member ID of the house member who is requesting the payment.\n* `request.getAdminId()`: The admin ID of the community admin who is responsible for managing payments in the community.\n* `paymentService.getHouseMember(request.getMemberId())`: A method call to retrieve the house member with the provided member ID from the payment service. If the member ID does not exist, a `RuntimeException` is thrown.\n* `communityService.findCommunityAdminById(request.getAdminId())`: A method call to retrieve the community admin with the provided admin ID from the community service. If the admin ID does not exist, a `RuntimeException` is thrown.\n* `isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)`: A boolean method that checks whether the given admin is an admin of the same community house as the house member. If the admin is not an admin of the same community house, a `RuntimeException` is thrown.\n* `schedulePaymentApiMapper.enrichSchedulePaymentRequest(request, admin, houseMember)`: A method call to enrich the input request with additional information from the community service and the payment service. The resulting `EnrichedSchedulePaymentRequest` object is used to create a `PaymentDto` object.\n* `schedulePaymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(paymentRequest)`: A method call to transform the enriched `EnrichedSchedulePaymentRequest` object into a `PaymentDto` object.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "SchedulePaymentResponse",
              "description": "a `SchedulePaymentResponse` object containing the scheduled payment information.\n\n* `ResponseEntity`: This is the type of response entity returned by the function, which has a status code and a body.\n* `HttpStatus`: The status code of the response entity, which indicates whether the request was successful (200-299) or not (400-599).\n* `SchedulePaymentResponse`: This is the type of response entity returned by the function, which contains information about the scheduled payment.\n* `body`: The body of the response entity contains the `SchedulePaymentResponse` object, which has various properties and attributes, including:\n\t+ `paymentId`: A unique identifier for the scheduled payment.\n\t+ `paymentDate`: The date on which the payment is scheduled to be made.\n\t+ `amount`: The amount of the scheduled payment.\n\t+ `description`: A brief description of the scheduled payment.\n\t+ `status`: The status of the scheduled payment (e.g., \"scheduled\", \"paid\", etc.).",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class SchedulePaymentController {\n  private final PaymentService paymentService;\n  private final CommunityService communityService;\n  \n  public ResponseEntity<SchedulePaymentResponse> schedulePayment(@Valid @RequestBody SchedulePaymentRequest request) {\n    log.trace(\"Received schedule payment request\");\n    \n    // Get the house member and admin from the database, or throw an error if they do not exist\n    HouseMember houseMember = paymentService.getHouseMember(request.getMemberId())\n        .orElseThrow(() -> new RuntimeException(\n            \"House member with given id not exists: \" + request.getMemberId()));\n    User admin = communityService.findCommunityAdminById(request.getAdminId())\n        .orElseThrow(\n            () -> new RuntimeException(\"Admin with given id not exists: \" + request.getAdminId()));\n    \n    // Check if the user is an admin of the community house by calling isUserAdminOfCommunityHouse\n    if (isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)) {\n      // Enrich the schedule payment request with the admin and house member, then map it to a PaymentDto object\n      final EnrichedSchedulePaymentRequest paymentRequest =\n          schedulePaymentApiMapper.enrichSchedulePaymentRequest(request, admin, houseMember);\n      final PaymentDto paymentDto =\n          schedulePaymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(paymentRequest);\n      \n      // Schedule the payment using the PaymentService and map the returned PaymentDto to a SchedulePaymentResponse object\n      final PaymentDto processedPayment = paymentService.schedulePayment(paymentDto);\n      final SchedulePaymentResponse paymentResponse =\n          schedulePaymentApiMapper.paymentToSchedulePaymentResponse(processedPayment);\n      \n      // Return a status code of HttpStatus.CREATED along with the response body as a ResponseEntity object\n      return ResponseEntity.status(HttpStatus.CREATED).body(paymentResponse);\n    }\n    \n    // If the user is not an admin of the community house, return a 404 Not Found response\n    return ResponseEntity.notFound().build();\n  }\n}\n",
              "description": "\nIn this example, the schedulePayment controller receives a request body with a member ID and admin ID in the request header. It then retrieves the HouseMember and User from the database using the IDs passed in the request headers. If the user is an admin of the community house, it maps the request to an EnrichedSchedulePaymentRequest object using the enrichSchedulePaymentRequest method. The EnrichedSchedulePaymentRequest is then mapped to a PaymentDto object using the enrichedSchedulePaymentRequestToPaymentDto method. The payment service is used to schedule the payment, and the returned PaymentDto is mapped to a SchedulePaymentResponse object using the paymentToSchedulePaymentResponse method. Finally, a status code of HttpStatus.CREATED along with the response body as a ResponseEntity object is returned. If the user is not an admin of the community house, a 404 Not Found response is returned."
            },
            "name": "schedulePayment",
            "location": {
              "start": 110,
              "insert": 68,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 67,
                "end": 109
              }
            },
            "item_type": "method",
            "length": 25,
            "docLength": 42
          },
          {
            "id": "e0f65e1c-52f3-0d96-e14b-6898e70b2201",
            "ancestors": [
              "defd3179-3cc8-219c-f441-65d6d667abfe"
            ],
            "type": "function",
            "description": "determines whether a given `User` is an admin of a specified `CommunityHouse` by checking if the user is present in the community's admin list.",
            "params": [
              {
                "name": "communityHouse",
                "type_name": "CommunityHouse",
                "description": "Community House object that is being checked for the presence of the specified `admin`.\n\n* `CommunityHouse`: A class that represents a community house with various attributes and methods.\n* `getCommunity()`: A method that returns a `Community` object, which is the parent class of `CommunityHouse`.\n* `getAdmins()`: A method that returns a list of `User` objects, representing the admins of the community house.",
                "complex_type": true
              },
              {
                "name": "admin",
                "type_name": "User",
                "description": "User object that is being checked whether they are an admin of the CommunityHouse.\n\n* `CommunityHouse communityHouse`: This is an object of the class `CommunityHouse`, which contains information about a house or community.\n* `getAdmins()`: This is a method of the `CommunityHouse` object that returns a list of objects representing the admins of the house or community.\n* `contains(admin)`: This is a method of the `List` class that checks if an object is present in the list. In this case, it checks if the `admin` object is present in the list of admins of the house or community.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "a boolean value indicating whether the specified User is an admin of the Community House.\n\n* `communityHouse`: A reference to an object of the `CommunityHouse` class, which represents a community house.\n* `getCommunity()`: A method that returns a reference to the community associated with the `communityHouse` object.\n* `getAdmins()`: A method that returns a list of `User` objects representing the administrators of the community.\n* `contains()`: A method that checks if a given `User` object is present in the list of admins returned by the `getAdmins()` method.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "private boolean isUserAdminOfCommunityHouse(CommunityHouse communityHouse, User admin) {\n    return communityHouse.getCommunity()\n        .getAdmins()\n        .contains(admin);\n}\n\npublic static void main(String[] args) {\n    CommunityHouse communityHouse = new CommunityHouse();\n    User admin = new User();\n    boolean isAdminOfCommunityHouse = isUserAdminOfCommunityHouse(communityHouse, admin);\n    \n    System.out.println(\"Is user an admin of the community house? \" + isAdminOfCommunityHouse);\n}\n",
              "description": "\nThis example demonstrates how to call the `isUserAdminOfCommunityHouse` method with the correct input parameters: a `communityHouse` object and a `admin` object. It then prints whether or not the user is an admin of the community house.\n\nNote that this is just a simple example, in real-world scenarios you would need to handle more complex cases such as null checks, edge cases, etc..."
            },
            "name": "isUserAdminOfCommunityHouse",
            "location": {
              "start": 163,
              "insert": 136,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 135,
                "end": 162
              }
            },
            "item_type": "method",
            "length": 5,
            "docLength": 27
          },
          {
            "id": "b95ed799-d842-1d9e-6f4e-d5b5b9dcaebe",
            "ancestors": [
              "defd3179-3cc8-219c-f441-65d6d667abfe"
            ],
            "type": "function",
            "description": "receives a payment ID and queries the payment service for details. The response is then transformed into a `SchedulePaymentResponse` object using a mapping function, and finally returned as an `OK` ResponseEntity.",
            "params": [
              {
                "name": "paymentId",
                "type_name": "String",
                "description": "id of the payment for which details are requested.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object representing the payment details.\n\n* `paymentId`: The unique identifier for the payment being retrieved.\n* `paymentService`: An instance of the `PaymentService` class, which provides the functionality to retrieve payment details.\n* `schedulePaymentApiMapper`: A mapping function that converts a `Payment` object into a `SchedulePaymentResponse` object.\n* `ResponseEntity`: The type of response returned by the `orElseGet` method, which is either an `ok` response or a `notFound` response.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@RestController\npublic class PaymentController {\n    @Autowired\n    private SchedulePaymentService schedulePaymentService;\n\n    @GetMapping(\"/payments/{paymentId}\")\n    public ResponseEntity<SchedulePaymentResponse> getPaymentDetails(\n        @PathVariable String paymentId\n    ) {\n        return schedulePaymentService.listPaymentDetails(paymentId);\n    }\n}\n",
              "description": "\nThis is an example of how the method would be used in a controller using the `@GetMapping` annotation to retrieve a payment details by its id. This example is simplified, as there might be additional features and configurations involved when using this method in real-world scenarios."
            },
            "name": "listPaymentDetails",
            "location": {
              "start": 189,
              "insert": 169,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 168,
                "end": 188
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 20
          },
          {
            "id": "105e28d0-6c16-cc99-e544-dfa901b19433",
            "ancestors": [
              "defd3179-3cc8-219c-f441-65d6d667abfe"
            ],
            "type": "function",
            "description": "receives a member ID and queries multiple APIs to retrieve and transform data into a response entity containing a list of payments for that member.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "id of the house member for whom all payments are to be listed.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing a list of `MemberPayment` objects.\n\n* `ResponseEntity<ListMemberPaymentsResponse>` is the generic type of the output, indicating that it is an entity containing a list of member payments.\n* `ListMemberPaymentsResponse` is a class that contains the list of member payments.\n* `payments()` is a method of the `ListMemberPaymentsResponse` class that returns the list of member payments.\n* `ok` is a method of the `ResponseEntity` class that indicates whether the response is successful or not. In this case, it is always successful.\n* `notFound()` is a method of the `ResponseEntity` class that indicates that the response represents a 404 status code (not found).",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n",
              "description": "\nThis example calls the `paymentService` to get a `HouseMember`, then it retrieves all payments of that member by using `paymentService.getPaymentsByMember(memberId)`. It uses the `schedulePaymentApiMapper` to map the resulting payment set to a `ListMemberPaymentsResponse` object, which is then returned as the output of the function. If the house member cannot be found, it returns an error response with status code 404 (Not Found).\n\nThe input for this method would be a string representing the ID of the house member for whom all payments are to be listed. For example:\n"
            },
            "name": "listAllMemberPayments",
            "location": {
              "start": 224,
              "insert": 199,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 198,
                "end": 223
              }
            },
            "item_type": "method",
            "length": 12,
            "docLength": 25
          },
          {
            "id": "c2b77da2-45c5-3195-ca40-b713878ac266",
            "ancestors": [
              "defd3179-3cc8-219c-f441-65d6d667abfe"
            ],
            "type": "function",
            "description": "list all payments scheduled by an admin in a community. It checks if the admin is in the given community, retrieves the payments for that admin, converts them to a REST API response format, and returns it as a `ResponseEntity`.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "community that the admin belongs to, which is used to filter the payments scheduled by the admin.",
                "complex_type": false
              },
              {
                "name": "adminId",
                "type_name": "String",
                "description": "id of the admin for whom scheduled payments are to be listed.",
                "complex_type": false
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page request parameters, such as the number of payments to display per page, and is used to retrieve a subset of the payments scheduled by the admin.\n\n* `communityId`: The ID of the community to filter payments for.\n* `adminId`: The ID of the admin to filter payments by.\n* `isAdminInGivenCommunity`: A boolean indicating whether the admin is in the given community.\n\nThese properties are used in the function to filter and retrieve payments for the specified admin in the given community, and then map them to a REST API response.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ListAdminPayment",
              "description": "a `ResponseEntity` object containing a `ListAdminPaymentsResponse` body with the scheduled payments for the given admin and community.\n\n* `payments`: A list of `AdminPayment` objects, representing the scheduled payments for the given admin in the specified community.\n* `pageInfo`: The `PageInfo` object containing information about the page of payments that were retrieved, including the total number of payments and the total number of pages.\n\nThe function first checks if the admin is present in the given community using the `isAdminInGivenCommunity` method. If the admin is present, it retrieves the scheduled payments for the admin using the `paymentService.getPaymentsByAdmin()` method and maps them to an `AdminPaymentSet` object using the `schedulePaymentApiMapper`. Finally, it returns a `ResponseEntity` object with the `payments` property set to the `AdminPaymentSet` object and the `pageInfo` property set to the `PageInfo` object.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<ListAdminPaymentsResponse> response =\n    schedulePaymentApiController.listAllAdminScheduledPayments(\n        \"84043f37-8a2e-416c-9c36-81cfc52a70bc\", // communityId\n        \"2b9b804f-fdda-4dba-9f50-2fda7861458e\", // adminId\n        Pageable.of(2, 2)); // pageable\n",
              "description": "\nIn this example, we are requesting the list of scheduled payments for a specific community and an administrator within that community with IDs \"84043f37-8a2e-416c-9c36-81cfc52a70bc\" and \"2b9b804f-fdda-4dba-9f50-2fda7861458e\", respectively. We are also specifying the page number (2) and page size (2) for the response. The result of this request would be a list of scheduled payments that the specified administrator has made within the given community.\n\nThis example is based on the following assumptions:\n\n* The ID \"84043f37-8a2e-416c-9c36-81cfc52a70bc\" represents a valid community.\n* The ID \"2b9b804f-fdda-4dba-9f50-2fda7861458e\" represents a valid administrator within that community.\n* The page number (2) and page size (2) are valid values for the pagination of the response.\n\nNote that this is just one possible usage example, and there may be other scenarios in which this method would be used. Additionally, it's important to note that these inputs and any others can change based on the specific implementation of the SchedulePaymentApiController class."
            },
            "name": "listAllAdminScheduledPayments",
            "location": {
              "start": 277,
              "insert": 237,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 236,
                "end": 276
              }
            },
            "item_type": "method",
            "length": 22,
            "docLength": 40
          },
          {
            "id": "67b5279c-9a18-bcb1-154a-2ee2c1ac9b31",
            "ancestors": [
              "defd3179-3cc8-219c-f441-65d6d667abfe"
            ],
            "type": "function",
            "description": "takes a community ID and an administrator ID as input, and returns a boolean value indicating whether the administrator is an admin in the specified community.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of a community for which the method checks if an admin with the provided `adminId` is present as an administrator.",
                "complex_type": false
              },
              {
                "name": "adminId",
                "type_name": "String",
                "description": "12-digit user ID of the admin to check if they are an administrator in the specified community.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "a `Boolean` value indicating whether the specified user is an administrator in the given community.\n\n* The function returns a `Boolean` value indicating whether the given admin is an administrator in the provided community.\n* The function first retrieves the community details using `communityService.getCommunityDetailsByIdWithAdmins(communityId)`, which returns a `List<Community>` object containing the community details and a list of admins.\n* The function then maps the `admins` list to a stream of `Admin` objects, using `map(Community::getAdmins)`.\n* The function then maps the `Admin` objects to a stream of `UserId` values using `map(admin -> admin.getUserId())`.\n* The function finally checks if there is at least one admin with the given `UserId`, using `orElseThrow()`. If no such admin is found, the function throws a `RuntimeException` with the community ID as the message.\n\nIn summary, the function returns a `Boolean` value indicating whether an admin exists in a given community based on the community details and admins list retrieved from the service.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "String communityId = \"123\";\nString adminId = \"456\";\nBoolean isAdmin = isAdminInGivenCommunity(communityId, adminId);\nif (isAdmin) {\n    System.out.println(\"Admin with ID \" + adminId + \" is in the community with ID \" + communityId);\n} else {\n    System.out.println(\"Admin with ID \" + adminId + \" is not in the community with ID \" + communityId);\n}\n",
              "description": "\nThis example would result in a boolean value being printed to the console indicating whether the specified admin is an administrator of the given community."
            },
            "name": "isAdminInGivenCommunity",
            "location": {
              "start": 330,
              "insert": 300,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 299,
                "end": 329
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 30
          }
        ]
      }
    }
  },
  {
    "name": "UserController.java",
    "path": "service/src/main/java/com/myhome/controllers/UserController.java",
    "content": {
      "structured": {
        "description": "A RESTful API for managing users in a system. The API provides endpoints for listing all users, retrieving a single user by ID, creating a new user, updating an existing user, and deleting a user. Additionally, there are functions for resetting a user's password and confirming their email address. The code uses various packages from the Spring Web framework, including `ResponseEntity`, `Pageable`, `HashSet`, `HttpStatus`, and `PasswordActionType`.",
        "items": [
          {
            "id": "4b525281-b732-a593-7e47-679fd0ea0beb",
            "ancestors": [],
            "type": "function",
            "description": "is responsible for handling API requests related to users in an application. It provides functions for listing all users, retrieving a specific user by ID, resetting a password, and confirming an email address. The class also includes methods for resending an email confirmation link if one was previously sent.",
            "name": "UserController",
            "location": {
              "start": 57,
              "insert": 50,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 49,
                "end": 56
              }
            },
            "item_type": "class",
            "length": 307,
            "docLength": 7
          },
          {
            "id": "82e72f95-6d55-bc8f-5043-fc1d0da723be",
            "ancestors": [
              "4b525281-b732-a593-7e47-679fd0ea0beb"
            ],
            "type": "function",
            "description": "takes a `CreateUserRequest` and creates a new user in the system, returning the created user response in case of success or a conflict status otherwise.",
            "params": [
              {
                "name": "request",
                "type_name": "CreateUserRequest",
                "description": "CreateUserRequest object that contains the user's information to be created.\n\nlog.trace(\"Received SignUp request\"); - This line is a trace message generated by the logging framework and provides no additional information.\nUserDto requestUserDto = userApiMapper.createUserRequestToUserDto(request); - This line maps the incoming `CreateUserRequest` object to a `UserDto` object using a mapping function provided by the `userApiMapper` class. The resulting `UserDto` object contains the attributes of the original request, such as the user's name, email, and password.\nOptional<UserDto> createdUserDto = userService.createUser(requestUserDto); - This line calls the `createUser` method of the `userService` class, passing in the mapped `UserDto` object. The method either creates a new user or returns an empty optional if the creation was successful.\nThe rest of the code deals with handling the response to the request.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of `CREATED` and the created user's details in the body.\n\n* The `ResponseEntity` object contains the HTTP status code and the body of the response, which is a `CreateUserResponse` object in this case.\n* The `HttpStatus` field indicates that the request was successful (STATUS_CREATED) or conflicted (STATUS_CONFLICT).\n* The `body` field contains the `CreateUserResponse` object, which represents the result of the sign-up operation.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nUserController userController;\n\n// Create a new user with the given username, email and password\nCreateUserRequest createUserRequest = new CreateUserRequest();\ncreateUserRequest.setUsername(\"username\");\ncreateUserRequest.setEmail(\"email@example.com\");\ncreateUserRequest.setPassword(\"password\");\nuserController.signUp(createUserRequest);\n",
              "description": "\nThis method is used to sign up a new user by sending a `CreateUserRequest` object to the controller, which then creates and returns the corresponding `CreateUserResponse` object. The request contains the username, email, and password of the new user. If the creation is successful, it returns an HTTP status code 201 (CREATED), along with a response body containing the newly created user. Otherwise, if the creation fails due to an invalid input or conflicting data, it returns an HTTP status code 409 (CONFLICT)."
            },
            "name": "signUp",
            "location": {
              "start": 108,
              "insert": 67,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 66,
                "end": 107
              }
            },
            "item_type": "method",
            "length": 12,
            "docLength": 41
          },
          {
            "id": "bc36ad45-a4e2-feb2-3840-53c838d9cc21",
            "ancestors": [
              "4b525281-b732-a593-7e47-679fd0ea0beb"
            ],
            "type": "function",
            "description": "logs a trace message, lists all users from the `userService`, maps them to a REST API response format using `userApiMapper`, and returns a `GetUserDetailsResponse` object with the list of users.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page number and page size of the users to be listed, allowing for pagination of the list.\n\n* `log.trace(\"Received request to list all users\")` - This line logs a trace message indicating that the method has received a request to list all users.\n* `Set<User> userDetails = userService.listAll(pageable);` - This line calls the `listAll` method of the `userService` class, passing in `pageable` as an argument. The `listAll` method returns a set of `User` objects representing all users in the system.\n* `Set<GetUserDetailsResponseUser> userDetailsResponse = userApiMapper.userSetToRestApiResponseUserSet(userDetails);` - This line calls the `userApiMapper` class's `userSetToRestApiResponseUserSet` method, passing in the set of `User` objects returned by the `listAll` method. The `userApiMapper` class maps the `User` objects to a corresponding set of `GetUserDetailsResponseUser` objects, which are used to construct the response to the original request.\n* `GetUserDetailsResponse response = new GetUserDetailsResponse();` - This line creates a new instance of the `GetUserDetailsResponse` class, which represents the response to the original request.\n* `response.setUsers(userDetailsResponse);` - This line sets the `users` field of the `GetUserDetailsResponse` object to the set of `GetUserDetailsResponseUser` objects returned by the `userApiMapper` method.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "GetUserDetailsResponse",
              "description": "a list of user details in a REST API response format.\n\n* `GetUserDetailsResponse`: This is the class that represents the response to the list all users request. It has a `users` field that contains a set of `GetUserDetailsResponseUser` objects, which represent the list of users.\n* `users`: This field is a Set<GetUserDetailsResponseUser> and contains the list of users returned by the function. Each user in the list is represented as a `GetUserDetailsResponseUser` object.\n* `GetUserDetailsResponseUser`: This class represents a single user in the response. It has properties such as `id`, `username`, `email`, etc. that contain the details of each user.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate UserApi userApi;\n\n@Test\npublic void testGetAllUsers() {\n    // Set pageable to a PageRequest object with desired page and page size values.\n    Pageable pageable = PageRequest.of(0, 2);\n    ResponseEntity<GetUserDetailsResponse> response = userApi.listAllUsers(pageable);\n    \n    // Check that the API request was successful (status code OK)\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    \n    // Extract the list of users from the response body\n    List<GetUserDetailsResponseUser> users = response.getBody().getUsers();\n    \n    // Check that the user list contains 2 users\n    assertEquals(2, users.size());\n    \n    // Check that the first user in the list is named \"Alice\"\n    GetUserDetailsResponseUser alice = users.get(0);\n    assertEquals(\"Alice\", alice.getUsername());\n}\n",
              "description": ""
            },
            "name": "listAllUsers",
            "location": {
              "start": 157,
              "insert": 121,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 120,
                "end": 156
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 36
          },
          {
            "id": "0663fd5a-71a9-0dbe-404d-3eb4557e0a02",
            "ancestors": [
              "4b525281-b732-a593-7e47-679fd0ea0beb"
            ],
            "type": "function",
            "description": "receives a user ID and queries the user service to retrieve user details. If successful, it returns a `ResponseEntity` with the user details in the form of a `GetUserDetailsResponse`. If unsuccessful, it returns an empty response entity with a status code of `NOT_FOUND`.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "ID of the user whose details are being requested.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status of `OK` and the user details as its body.\n\n* `ResponseEntity<GetUserDetailsResponseUser>` represents an entity with a response body of type `GetUserDetailsResponseUser`.\n* `getUserDetails(String userId)` is the method signature for receiving a user ID as input and returning a response entity.\n* `log.trace(\"Received request to get details of user with Id[{}]\", userId)` logs a trace message indicating that the function has received a request for user details with the provided user ID.\n* `userService.getUserDetails(userId)` is called to retrieve the user details using the `userService` object, passing in the user ID as an argument.\n* `map(function)` applies the given mapping function to the response body of the `userService.getUserDetails()` call, transforming it into a new response entity.\n* `map(response -> ResponseEntity.status(HttpStatus.OK).body(response))` creates a new response entity with a status code of `HttpStatus.OK` and the transformed response body as its body.\n* `orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build())` provides an alternative response entity with a status code of `HttpStatus.NOT_FOUND` if the original call to `userService.getUserDetails()` fails or returns a non-OK response.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate UserController userController;\n\n@Test\nvoid testGetUserDetails() {\n    // given\n    String userId = \"some_user_id\";\n\n    // when\n    ResponseEntity<GetUserDetailsResponseUser> responseEntity = userController.getUserDetails(userId);\n\n    // then\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK);\n}\n",
              "description": "\nThis test case shows that a `userId` of \"some_user_id\" is passed to the method getUserDetails, and it checks if the status code returned by the response entity is equal to `HttpStatus.OK`.\n\nThe test case assumes that a `UserController` instance has been autowired into the class containing this test, and that the method under test returns an instance of `ResponseEntity` with a successful (200) HTTP status code and a body containing a valid `GetUserDetailsResponseUser` object. The actual implementation of the method may differ depending on the specific requirements of the application."
            },
            "name": "getUserDetails",
            "location": {
              "start": 188,
              "insert": 171,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 170,
                "end": 187
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 17
          },
          {
            "id": "b46ec1f8-e762-5983-5f42-82c2ea49ee70",
            "ancestors": [
              "4b525281-b732-a593-7e47-679fd0ea0beb"
            ],
            "type": "function",
            "description": "processes password reset requests. It checks the input action and performs corresponding actions, such as requesting a reset password or resetting it directly. If successful, it returns an `OK` response entity; otherwise, it returns a `BAD_REQUEST` response entity.",
            "params": [
              {
                "name": "action",
                "type_name": "String",
                "description": "password action to be performed, with possible values of `FORGOT` or `RESET`, which determine the corresponding password reset functionality.",
                "complex_type": false
              },
              {
                "name": "forgotPasswordRequest",
                "type_name": "ForgotPasswordRequest",
                "description": "Forgot Password Request object containing the user's email address and other information required to reset the password.\n\n* `@NotNull`: The `action` parameter must not be null.\n* `@Valid`: The `forgotPasswordRequest` object must be valid according to its schema.\n* `@RequestBody`: The `forgotPasswordRequest` object is passed as a request body in the HTTP request.\n* `ForgotPasswordRequest`: A class that contains properties for resetting or recovering a user's password. Its attributes may include:\n\t+ `email`: The user's email address for whom the password needs to be reset.\n\t+ `password`: The user's current password (optional).\n\t+ `newPassword`: The new password the user wants to set (optional).",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status of `ok` or `badRequest`, depending on whether the password reset was successful.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a REST API request. It contains information about the status of the request and any data returned in the response body.\n* `ok()`: This is a method of the `ResponseEntity` class that returns a response with a status code of 200 (OK).\n* `build()`: This is a method of the `ResponseEntity` class that returns a constructed response entity. It takes the status code, headers, and body of the response as arguments and combines them to create the final response.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\nvoid reset_password() {\n    // Setup\n    String userId = \"123\";\n    String forgotPasswordRequest = \"{\\\"email\\\": \\\"john.doe@example.com\\\"}\";\n    PasswordActionType action = PasswordActionType.RESET;\n\n    // Action\n    ResponseEntity<Void> response = usersPasswordPost(action, forgotPasswordRequest);\n\n    // Verify\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n}\n",
              "description": ""
            },
            "name": "usersPasswordPost",
            "location": {
              "start": 235,
              "insert": 198,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 197,
                "end": 234
              }
            },
            "item_type": "method",
            "length": 16,
            "docLength": 37
          },
          {
            "id": "9730b393-b27d-1c86-5541-841167ddc517",
            "ancestors": [
              "4b525281-b732-a593-7e47-679fd0ea0beb"
            ],
            "type": "function",
            "description": "receives a user ID and a pageable parameter, it retrieves all house members for that user from the houses service, maps them to a REST API response format using a custom mapper, and returns a ResponseEntity with the list of house members.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "user ID for whom the list of housemates is being requested.",
                "complex_type": false
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "pagination information for retrieving the list of house members, allowing for efficient and flexible retrieval of a subset of the total number of house members.\n\n* `userId`: The ID of the user for whom the housemembers are being listed (string)\n* `pageable`: A pageable object representing the pagination parameters for the list request (Pageable)",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ListHouseMembersResponse",
              "description": "a `ListHouseMembersResponse` object containing the list of members for all houses of the specified user.\n\n* `ResponseEntity<ListHouseMembersResponse>`: This is the generic type of the returned response entity, which contains a list of `HouseMemberSet` objects.\n* `ListHouseMembersResponse`: This class represents the response to the list all housemates request, containing a list of `HouseMember` objects.\n* `members()`: This is a method that returns a list of `HouseMember` objects, which are the actual entities being retrieved from the database.\n* `ok()`: This is a method that returns a response entity with a status code of 200 (OK), indicating successful retrieval of the data.\n* `notFound()`: This is a method that returns a response entity with a status code of 404 (Not Found), indicating that no housemembers could be found for the given user ID.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\nvoid listAllHousemates() {\n    String userId = \"testUser\";\n    Pageable pageable = PageRequest.of(0, 10);\n    List<Set<HouseMember>> houseMembers = new ArrayList<>();\n    houseMembers.add(new HashSet<>());\n    when(houseService.listHouseMembersForHousesOfUserId(userId, pageable)).thenReturn(houseMembers);\n    ResponseEntity<ListHouseMembersResponse> response = userApiController.listAllHousemates(userId, pageable);\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertTrue(response.hasBody());\n}\n",
              "description": "\nThis test method would use the `houseService` mock object to return a list of house members for a given user ID and pageable parameters, which are then passed on to the `listAllHousemates` method of the `UserApiController`. The response is then asserted to be an HTTP OK status code (200) and have a non-empty body.\n\nHere's another example of how the method could be used:\n"
            },
            "name": "listAllHousemates",
            "location": {
              "start": 286,
              "insert": 252,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 251,
                "end": 285
              }
            },
            "item_type": "method",
            "length": 11,
            "docLength": 34
          },
          {
            "id": "7af871cb-c968-1192-504c-cdd6e5c23b2c",
            "ancestors": [
              "4b525281-b732-a593-7e47-679fd0ea0beb"
            ],
            "type": "function",
            "description": "confirms an email address for a user by querying the user service and returning an HTTP response based on the result of the confirmation process.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "user whose email is being confirmed.",
                "complex_type": false
              },
              {
                "name": "emailConfirmToken",
                "type_name": "String",
                "description": "unique token sent to the user's email address for confirmation of their email address.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "an `ResponseEntity` object indicating whether the email confirmation was successful or not.\n\n* `ResponseEntity`: This is an object representing a response entity, which contains information about the result of the API call. In this case, it either returns `OK` or `BAD_REQUEST`.\n* `ok()`: This method builds an `ResponseEntity` object with a status code of `200 OK`, indicating that the email confirmation was successful.\n* `badRequest()`: This method builds an `ResponseEntity` object with a status code of `400 BAD_REQUEST`, indicating that there was an error in processing the email confirmation request.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "String userId = \"123\"; // some user ID\nString emailConfirmToken = \"some-email-confirmation-token\"; // some email confirmation token\n\n// Call the confirmEmail method, passing in the user ID and the email confirmation token\nResponseEntity<Void> response = usersApi.confirmEmail(userId, emailConfirmToken);\n",
              "description": "\nIn this example, the user with ID \"123\" has requested to confirm their email address using the token \"some-email-confirmation-token\". The `confirmEmail` method is called and returns a `ResponseEntity<Void>` object, indicating whether the email was confirmed successfully or not. In this case, the response code is 200 (OK), indicating that the email confirmation was successful.\n\nIt's worth noting that this method would likely be called from within another method in a service class or controller class, and so it would typically be used to perform some action based on whether the email confirmation was successful or not. For example, if the user was confirmed successfully, they might then be logged into the system (assuming there is an `authenticate` method that takes the username and password). If the user's email could not be confirmed, this would indicate an issue with the token and so the user may need to try again or contact support."
            },
            "name": "confirmEmail",
            "location": {
              "start": 322,
              "insert": 298,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 297,
                "end": 321
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 24
          },
          {
            "id": "1e4966b6-9701-69ab-264b-977601b8162a",
            "ancestors": [
              "4b525281-b732-a593-7e47-679fd0ea0beb"
            ],
            "type": "function",
            "description": "resends an email confirmation to a user if one was previously sent and failed, returning a `ResponseEntity` with a status code indicating success or failure.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "identifier of the user for whom an email confirmation link needs to be resent.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object indicating whether the email confirmation resend was successful or not.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a web request.\n* `ok()`: This method builds an `ResponseEntity` object with a status code of 200 (OK) and a body containing the empty `Void` value.\n* `badRequest()`: This method builds an `ResponseEntity` object with a status code of 400 (Bad Request) and an empty body.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<Void> response = userController.resendConfirmEmailMail(\"some-user-id\");\nif (response.getStatusCode() == HttpStatus.OK) {\n    // success\n} else {\n    // failure\n}\n",
              "description": "\nExplanation:\nThe resendConfirmEmailMail method takes in a String parameter 'userId', which is the unique identifier of the user for whom an email confirmation link needs to be resent. The method then calls the userService's resendEmailConfirm(userId) method and checks if it returned true or false. If it returns true, then the response status code is set to HttpStatus.OK (200), indicating that the email confirmation was successfully sent, and an empty body is returned. Otherwise, the response status code is set to HttpStatus.BAD_REQUEST(400) and an empty body is returned.\nThe example then checks if the response status code is OK or not. If it is OK, then this indicates that the email confirmation was successfully sent and the method has been successful in sending the confirmation link to the user with the specified 'userId'. Otherwise, this indicates that there was an error in processing the request and the method failed to send the email confirmation link.\nDo note that this is just an example of how the method would be used and may not reflect the actual implementation of the method in the codebase."
            },
            "name": "resendConfirmEmailMail",
            "location": {
              "start": 354,
              "insert": 332,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 331,
                "end": 353
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 22
          }
        ]
      }
    }
  },
  {
    "name": "AmenityDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/AmenityDto.java",
    "content": {
      "structured": {
        "description": "A data transfer object (DTO) class called `AmenityDto` for representing amenities. The class has fields for id, amenityId, name, description, price, and communityId, allowing construction and manipulation of DTO objects. The `AllArgsConstructor`, `NoArgsConstructor`, `Builder`, `@With`, and `@Data` annotations are used to define the class.",
        "items": [
          {
            "id": "03b74707-6fd5-1488-8743-46f157630275",
            "ancestors": [],
            "type": "function",
            "description": "represents an amenity with identifier, name, description, price, and communityId fields for construction and manipulation of DTO objects representing amenities.\nFields:\n\t- id (Long): represents an identifier for each amenity, which could be a unique number assigned to it.\n\t- amenityId (String): represents a unique identifier for an amenity within a community.\n\t- name (String): represents a string value referring to the name of an amenity.\n\t- description (String): represents a string value of variable length that could be any textual information related to an amenity.\n\t- price (BigDecimal): represents a decimal value representing the cost of an amenity.\n\t- communityId (String): in the AmenityDto class represents a unique identifier for the community to which an amenity belongs.\n\n",
            "fields": [
              {
                "name": "id",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "represents an identifier for each amenity, which could be a unique number assigned to it."
              },
              {
                "name": "amenityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "represents a unique identifier for an amenity within a community."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "represents a string value referring to the name of an amenity."
              },
              {
                "name": "description",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "represents a string value of variable length that could be any textual information related to an amenity."
              },
              {
                "name": "price",
                "type_name": "BigDecimal",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "represents a decimal value representing the cost of an amenity."
              },
              {
                "name": "communityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "in the AmenityDto class represents a unique identifier for the community to which an amenity belongs."
              }
            ],
            "name": "AmenityDto",
            "location": {
              "start": 43,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 42
              }
            },
            "item_type": "class",
            "length": 13,
            "docLength": 17
          }
        ]
      }
    }
  },
  {
    "name": "CommunityDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/CommunityDto.java",
    "content": {
      "structured": {
        "description": "A `CommunityDto` class with various fields and methods. The class has an `id`, `communityId`, `name`, `district`, and a set of `UserDtos` representing admins. The class uses Lombok, a dependency injection library, for constructor injection. The class also defines getters and setters for each field.",
        "items": [
          {
            "id": "38256eb6-6c14-b492-9e48-9faf620be65f",
            "ancestors": [],
            "type": "function",
            "description": "represents a community object with an ID, community ID, name, district, and set of admins.\nFields:\n\t- id (Long): represents a unique identifier for a community object in the program.\n\t- communityId (String): represents a unique identifier for a specific community.\n\t- name (String): represents a string value representing the name of a community.\n\t- district (String): in the CommunityDto class represents a string value specifying the name of the district associated with the community.\n\t- admins (Set<UserDto>): in the CommunityDto class represents a set of UserDtos containing the administrators of a community.\n\n",
            "fields": [
              {
                "name": "id",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "represents a unique identifier for a community object in the program."
              },
              {
                "name": "communityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "represents a unique identifier for a specific community."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "represents a string value representing the name of a community."
              },
              {
                "name": "district",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "in the CommunityDto class represents a string value specifying the name of the district associated with the community."
              },
              {
                "name": "admins",
                "type_name": "Set<UserDto>",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "in the CommunityDto class represents a set of UserDtos containing the administrators of a community."
              }
            ],
            "name": "CommunityDto",
            "location": {
              "start": 37,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 36
              }
            },
            "item_type": "class",
            "length": 10,
            "docLength": 13
          }
        ]
      }
    }
  },
  {
    "name": "CommunityHouseDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/CommunityHouseDto.java",
    "content": {
      "structured": {
        "description": "A `CommunityHouseDto` class with two fields: `houseId` and `name`. The `houseId` field represents a unique identifier for a community house within a given context, while the `name` field represents the name of a house. The class uses Lombok, an automated code generation tool, to implement both constructors: one with all arguments (`AllArgsConstructor`) and another without any arguments (`NoArgsConstructor`).",
        "items": [
          {
            "id": "2ee270fd-3782-3cab-5c49-32b665f56705",
            "ancestors": [],
            "type": "function",
            "description": "has properties for a unique identifier and name for representing community houses within a given context.\nFields:\n\t- houseId (String): in the CommunityHouseDto class represents a unique identifier for a community house within a given context.\n\t- name (String): represents the name of a house within the context of the CommunityHouseDto class.\n\n",
            "fields": [
              {
                "name": "houseId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityHouseDto",
                "description": "in the CommunityHouseDto class represents a unique identifier for a community house within a given context."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityHouseDto",
                "description": "represents the name of a house within the context of the CommunityHouseDto class."
              }
            ],
            "name": "CommunityHouseDto",
            "location": {
              "start": 31,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 30
              }
            },
            "item_type": "class",
            "length": 7,
            "docLength": 8
          }
        ]
      }
    }
  },
  {
    "name": "PaymentDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/PaymentDto.java",
    "content": {
      "structured": {
        "description": "A data transfer object (DTO) named PaymentDto, which represents payment information. The DTO includes fields for payment ID, charge amount, payment type, description, recurring status, due date, and associations with an admin user and a house member. The code uses Lombok for building, getting, and setting the DTO's fields, and it defines a UserDto and HouseMemberDto for additional information related to payments.",
        "items": [
          {
            "id": "fb6ec82e-bf4e-3eb0-6f43-045c709c42d6",
            "ancestors": [],
            "type": "function",
            "description": "represents a data transfer object for payment information, including payment ID, charge amount, payment type, description, recurring status, due date, and member details.\nFields:\n\t- paymentId (String): in the PaymentDto class represents a unique identifier for each payment made by a member of a house.\n\t- charge (BigDecimal): represents a monetary value.\n\t- type (String): represents a string indicating the type of payment, such as \"credit card\", \"bank transfer\", or \"other\".\n\t- description (String): represents a human-readable explanation of the payment, which may include information about the purpose of the payment or any relevant details.\n\t- recurring (boolean): in PaymentDto represents whether a payment is ongoing or a one-time transfer.\n\t- dueDate (String): represents the date by which a payment is intended to be made.\n\t- admin (UserDto): in the PaymentDto class represents an user who manages or oversees payments.\n\t- member (HouseMemberDto): in the PaymentDto class represents an association between a payment and a specific house member.\n\n",
            "fields": [
              {
                "name": "paymentId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents a unique identifier for each payment made by a member of a house."
              },
              {
                "name": "charge",
                "type_name": "BigDecimal",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "represents a monetary value."
              },
              {
                "name": "type",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "represents a string indicating the type of payment, such as \"credit card\", \"bank transfer\", or \"other\"."
              },
              {
                "name": "description",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "represents a human-readable explanation of the payment, which may include information about the purpose of the payment or any relevant details."
              },
              {
                "name": "recurring",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in PaymentDto represents whether a payment is ongoing or a one-time transfer."
              },
              {
                "name": "dueDate",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "represents the date by which a payment is intended to be made."
              },
              {
                "name": "admin",
                "type_name": "UserDto",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents an user who manages or oversees payments."
              },
              {
                "name": "member",
                "type_name": "HouseMemberDto",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents an association between a payment and a specific house member."
              }
            ],
            "name": "PaymentDto",
            "location": {
              "start": 46,
              "insert": 25,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 24,
                "end": 45
              }
            },
            "item_type": "class",
            "length": 13,
            "docLength": 21
          }
        ]
      }
    }
  },
  {
    "name": "UserDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/UserDto.java",
    "content": {
      "structured": {
        "description": "A data transfer object (DTO) called `UserDto` that represents a user's information. The DTO has fields for id, userId, name, email, password, encryptedPassword, communityIds, and emailConfirmed. The `Builder`, `Getter`, and `Setter` annotations indicate that these fields can be built, accessed, and modified using builder methods, getter methods, and setter methods respectively.",
        "items": [
          {
            "id": "10389423-5935-5182-3448-cf5d6cf478c9",
            "ancestors": [],
            "type": "function",
            "description": "represents a data transfer object for storing and manipulating user information, including id, userId, name, email, password, encryptedPassword, communityIds, and emailConfirmed fields.\nFields:\n\t- id (Long): represents a unique identifier for each user in the application.\n\t- userId (String): represents a unique identifier for a user in the system.\n\t- name (String): stores a string value representing the user's name.\n\t- email (String): in the UserDto class stores a user's email address.\n\t- password (String): stores a string value representing the user's password.\n\t- encryptedPassword (String): in the UserDto class contains an encoded version of the user's password for added security.\n\t- communityIds (Set<String>): in the UserDto class stores a set of strings representing the communities to which a user belongs.\n\t- emailConfirmed (boolean): indicates whether an user's email address has been confirmed through a verification process.\n\n",
            "fields": [
              {
                "name": "id",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "represents a unique identifier for each user in the application."
              },
              {
                "name": "userId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "represents a unique identifier for a user in the system."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "stores a string value representing the user's name."
              },
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class stores a user's email address."
              },
              {
                "name": "password",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "stores a string value representing the user's password."
              },
              {
                "name": "encryptedPassword",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class contains an encoded version of the user's password for added security."
              },
              {
                "name": "communityIds",
                "type_name": "Set<String>",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class stores a set of strings representing the communities to which a user belongs."
              },
              {
                "name": "emailConfirmed",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "indicates whether an user's email address has been confirmed through a verification process."
              }
            ],
            "name": "UserDto",
            "location": {
              "start": 42,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 41
              }
            },
            "item_type": "class",
            "length": 13,
            "docLength": 18
          }
        ]
      }
    }
  },
  {
    "name": "CommunityMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/CommunityMapper.java",
    "content": {
      "structured": {
        "description": "An interface called CommunityMapper that uses MapStruct to map between CommunityDto objects and Community objects through a single method, communityDtoToCommunity(). The interface does not include any other methods.",
        "items": [
          {
            "id": "1e66cde3-1446-caac-bd45-c4db25a4a0c7",
            "ancestors": [],
            "type": "function",
            "description": "maps between a CommunityDto object and its corresponding Community object using a single method, communityDtoToCommunity().",
            "name": "CommunityMapper",
            "location": {
              "start": 26,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 25
              }
            },
            "item_type": "interface",
            "length": 5,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/HouseMemberMapper.java",
    "content": {
      "structured": {
        "description": "An interface `HouseMemberMapper` that provides mappings between `HouseMember` objects and their corresponding REST API response versions using Mapstruct. The interface has three methods: `houseMemberSetToRestApiResponseHouse MemberSet`, `houseMemberDtoSetToHouseMemberSet`, and `houseMemberSetToRestApiResponseAddHouseMemberSet`. These methods map sets of `HouseMember` objects to corresponding REST API response sets, and vice versa. The code also uses the `@Mapper` annotation, which is part of the Mapstruct package.",
        "items": [
          {
            "id": "fee362ae-448d-efad-134b-e92645ca338a",
            "ancestors": [],
            "type": "function",
            "description": "maps between House Member objects and their corresponding REST API response versions using a set-based mapping approach.",
            "name": "HouseMemberMapper",
            "location": {
              "start": 28,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 27
              }
            },
            "item_type": "interface",
            "length": 10,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "PaymentMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/PaymentMapper.java",
    "content": {
      "structured": {
        "description": "An interface `PaymentMapper` that implements `Mapper` interface from `org.mapstruct`. It provides mappings between `PaymentDto` and `Payment` objects, including converting a `PaymentDto` object to a `Payment` object and vice versa. The mapper uses the `Mapping` annotation to specify the mapping between the source and target fields, including date format conversion for the `dueDate` field.",
        "items": [
          {
            "id": "7b637bf1-cf25-f185-8e41-5d0878628bd5",
            "ancestors": [],
            "type": "function",
            "description": "provides conversion between DTO and entity objects for the Payment domain object through two methods: paymentDtoToPayment() and paymentToPaymentDto().",
            "name": "PaymentMapper",
            "location": {
              "start": 29,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 28
              }
            },
            "item_type": "interface",
            "length": 7,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "UserMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/UserMapper.java",
    "content": {
      "structured": {
        "description": "An interface `UserMapper` that provides a mapping between `UserDto` and `User` objects using the `MapStruct` package. The interface includes two methods: `userDtoToUser` converts a `UserDto` object to a `User` object, while `userToUserDto` converts a `User` object to a `UserDto` object.",
        "items": [
          {
            "id": "d1158371-3585-d995-cd4c-8e61fdcd9b62",
            "ancestors": [],
            "type": "function",
            "description": "provides conversion between Domain Entity and DTO objects for User entities.",
            "name": "UserMapper",
            "location": {
              "start": 29,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 28
              }
            },
            "item_type": "interface",
            "length": 6,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "FileUploadExceptionAdvice.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptionhandler/FileUploadExceptionAdvice.java",
    "content": {
      "structured": {
        "description": "An exception handler class called `FileUploadExceptionAdvice` that handles two types of exceptions: `MaxUploadSizeExceededException` and `IOException`. The class uses Spring's `@ControllerAdvice` annotation to indicate that it is a controller advice class. The `handleMaxSizeException()` method processes the `MaxUploadSizeExceededException` and returns a custom response entity with an error message, while the `handleIOException()` method handles the `IOException` and also returns a custom response entity with an error message.",
        "items": [
          {
            "id": "025d1200-8f71-0583-7c4c-7d6d25c0c1e9",
            "ancestors": [],
            "type": "function",
            "description": "is an exception handler that processes exceptions related to file size exceeding limits and document saving errors. The class provides custom response entities with error messages for each type of exception.",
            "name": "FileUploadExceptionAdvice",
            "location": {
              "start": 30,
              "insert": 27,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 26,
                "end": 29
              }
            },
            "item_type": "class",
            "length": 56,
            "docLength": 3
          },
          {
            "id": "5324d794-c0bf-5db9-114a-94fe2d5a2785",
            "ancestors": [
              "025d1200-8f71-0583-7c4c-7d6d25c0c1e9"
            ],
            "type": "function",
            "description": "handles MaxUploadSizeExceededException by returning a response entity with an error message.",
            "params": [
              {
                "name": "exc",
                "type_name": "MaxUploadSizeExceededException",
                "description": "MaxUploadSizeExceededException object that is passed to the function.\n\n* `class`: The class of the exception object, which in this case is `MaxUploadSizeExceededException`.\n* `message`: A string attribute containing a message about the file size exceeding the limit.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HttpStatus",
              "description": "a response entity with a HTTP status code of `PAYLOAD_TOO_LARGE` and a message body containing the error message.\n\n* The `ResponseEntity` object is an instance of the `ResponseEntity` class in Java, which represents a response entity with a status code and a body.\n* The `status` field of the `ResponseEntity` object is set to `HttpStatus.PAYLOAD_TOO_LARGE`, indicating that the uploaded file size exceeds the limit.\n* The `body` field of the `ResponseEntity` object is a map containing a single key-value pair, where the key is `\"message\"` and the value is a string containing the error message `\"File size exceeds limit!\"`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@ExceptionHandler(MaxUploadSizeExceededException.class)\n  public ResponseEntity handleMaxSizeException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(new HashMap<String, String>() {{\n      put(\"message\", \"File size exceeds limit!\");\n    }});\n  }\n",
              "description": "\nThe above method would be used to handle a MaxUploadSizeExceededException that is thrown by the server when a file size exceeds the allowed limit. The method returns a customized response entity with an error message."
            },
            "name": "handleMaxSizeException",
            "location": {
              "start": 55,
              "insert": 33,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 32,
                "end": 54
              }
            },
            "item_type": "method",
            "length": 6,
            "docLength": 22
          },
          {
            "id": "1935e05b-bc68-63b4-ce4a-9d7bd4463caa",
            "ancestors": [
              "025d1200-8f71-0583-7c4c-7d6d25c0c1e9"
            ],
            "type": "function",
            "description": "handles an IOException exception by returning a ResponseEntity object with a status code of CONFLICT and a message body containing a custom error message.",
            "params": [
              {
                "name": "exc",
                "type_name": "MaxUploadSizeExceededException",
                "description": "`MaxUploadSizeExceededException` that the function is designed to handle.\n\n* `MaxUploadSizeExceededException`: This is the type of exception handled by this function.\n* `exc`: The deserialized input representing an instance of `MaxUploadSizeExceededException`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HttpStatus",
              "description": "a `ResponseEntity` with a status code of `CONFLICT` and a message body containing the error message \"Something went wrong with document saving!\".\n\n* The status code of the response entity is `HttpStatus.CONFLICT`, indicating an error condition.\n* The body of the response entity contains a map with a single key-value pair, where the key is \"message\" and the value is a string containing the error message \"Something went wrong with document saving!\".",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@ExceptionHandler(IOException.class)\n  public ResponseEntity handleIOException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.CONFLICT).body(new HashMap<String, String>() {{\n      put(\"message\", \"Something go wrong with document saving!\");\n    }});\n  }\n",
              "description": "\nIn this example, the handleIOException method is used to handle an IOException that has occurred during the process of saving a document. The method returns a ResponseEntity with a status code of HttpStatus.CONFLICT and a body containing a single key-value pair where the key is \"message\" and the value is a string representing an error message related to document saving.\nThe IOException parameter 'exc' in this example is an instance of the MaxUploadSizeExceededException class, which represents an error that occurred during document saving due to exceeding the maximum upload size limit."
            },
            "name": "handleIOException",
            "location": {
              "start": 79,
              "insert": 62,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 61,
                "end": 78
              }
            },
            "item_type": "method",
            "length": 6,
            "docLength": 17
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationException.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptions/AuthenticationException.java",
    "content": {
      "structured": {
        "description": "An exception class called \"AuthenticationException\" that extends \"RuntimeException\". The class has a custom error message for unauthorized requests and uses the \"Slf4j\" package for logging. Additionally, the class uses the \"Spring\" package for handling HTTP status codes.",
        "items": [
          {
            "id": "7d365450-6ffb-31b7-b34f-12d1b3d36d7f",
            "ancestors": [],
            "type": "function",
            "description": "is an extension of RuntimeException with a custom error message for unauthorized requests.\nFields:\n\t- ERROR_MESSAGE (String): is a static string representing an error message related to incorrect or non-existent user credentials.\n\n",
            "fields": [
              {
                "name": "ERROR_MESSAGE",
                "type_name": "String",
                "value": "\"Credentials are incorrect or user does not exists\"",
                "constant": true,
                "class_name": "AuthenticationException",
                "description": "is a static string representing an error message related to incorrect or non-existent user credentials."
              }
            ],
            "name": "AuthenticationException",
            "location": {
              "start": 14,
              "insert": 7,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 6,
                "end": 13
              }
            },
            "item_type": "class",
            "length": 8,
            "docLength": 7
          }
        ]
      }
    }
  },
  {
    "name": "CredentialsIncorrectException.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptions/CredentialsIncorrectException.java",
    "content": {
      "structured": {
        "description": "An exception class called CredentialsIncorrectException that extends AuthenticationException. The custom error message is provided for the user ID when credentials are incorrect.",
        "items": [
          {
            "id": "cda6d38f-2a28-c3ac-ec49-9ef130dc47aa",
            "ancestors": [],
            "type": "function",
            "description": "extends AuthenticationException and provides a custom message for user Id when credentials are incorrect.\n",
            "fields": [],
            "name": "CredentialsIncorrectException",
            "location": {
              "start": 9,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 4,
                "end": 8
              }
            },
            "item_type": "class",
            "length": 7,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "UserNotFoundException.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptions/UserNotFoundException.java",
    "content": {
      "structured": {
        "description": "A custom exception class called `UserNotFoundException` that extends `AuthenticationException`. The new exception provides additional logging information when a user is not found using their email address by using the `@Slf4j` annotation and log4j library. The constructor of the `UserNotFoundException` logs an info message with the email address of the user who could not be found.",
        "items": [
          {
            "id": "3dea28d7-bbc1-dabe-114f-a8db10eeae88",
            "ancestors": [],
            "type": "function",
            "description": "is an extension of AuthenticationException with additional logging information when a user is not found using their email address, using the @Slf4j annotation for logging purposes.\n",
            "fields": [],
            "name": "UserNotFoundException",
            "location": {
              "start": 9,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 4,
                "end": 8
              }
            },
            "item_type": "class",
            "length": 7,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "AmenityApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/AmenityApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface `AmenityApiMapper` that implements mappings between `Amenity` objects and their corresponding `Dto` representations, as well as vice versa, using Mapper methods for each of these mappings. The interface provides four mapping methods: `amenityToAmenityDetailsResponse`, `amenitiesSetToAmenityDetailsResponseSet`, `amenityDtoToAmenity`, and `amenityToAmenityDto`.",
        "items": [
          {
            "id": "3220c1cd-6248-64b1-5a4d-284b1a1e2db2",
            "ancestors": [],
            "type": "function",
            "description": "provides mappings between Amenity objects and their corresponding Dto representations, as well as vice versa, using Mapper methods for each of these mappings.",
            "name": "AmenityApiMapper",
            "location": {
              "start": 30,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 29
              }
            },
            "item_type": "interface",
            "length": 13,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "CommunityApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/CommunityApiMapper.java",
    "content": {
      "structured": {
        "description": "A mapping between various data structures in the Community domain and their corresponding REST API responses using Mapstruct. The code includes several mappings, such as creating a DTO from a CreateCommunityRequest, converting a Community to a REST API response, and setting admin information for a Community. Additionally, it defines methods for mapping sets of data structures to sets of REST API responses.",
        "items": [
          {
            "id": "290177c9-f9fd-51ab-6148-da7595d4ce53",
            "ancestors": [],
            "type": "function",
            "description": "defines a mapping between various data structures in the Community domain and their corresponding REST API responses.",
            "name": "CommunityApiMapper",
            "location": {
              "start": 37,
              "insert": 33,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 32,
                "end": 36
              }
            },
            "item_type": "interface",
            "length": 24,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "HouseApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/HouseApiMapper.java",
    "content": {
      "structured": {
        "description": "A mapping between sets of CommunityHouse objects and GetHouseDetailsResponseCommunityHouse objects using MapStruct. The HouseApiMapper interface implements this mapping, providing two methods: communityHouseSetToRestApiResponseCommunityHouseSet and communityHouseToRestApiResponseCommunityHouse. These methods map the domain object to the REST API response object, allowing for the efficient transfer of data between the two structures.",
        "items": [
          {
            "id": "8a3b40d1-ee79-0181-4b43-d752d9ed0149",
            "ancestors": [],
            "type": "function",
            "description": "defines a mapping between sets of CommunityHouse objects and GetHouseDetailsResponseCommunityHouse objects using MapStruct.",
            "name": "HouseApiMapper",
            "location": {
              "start": 28,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 27
              }
            },
            "item_type": "interface",
            "length": 8,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "SchedulePaymentApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/SchedulePaymentApiMapper.java",
    "content": {
      "structured": {
        "description": "A set of utility classes for mapping and enriching `SchedulePaymentRequest` objects with additional information from the input. The code utilizes Lombok and MapStruct to generate getters and setters for the payment request's fields, allowing them to be mapped to target classes. EnrichedSchedulePaymentRequest is a custom class that contains additional information, such as community IDs, member details, and recurrence information. The code also defines methods to build `UserDto` and `HouseMemberDto` objects from the enriched schedule payment request, providing the administrator's details and the member's ID, name, and entity ID, respectively.",
        "items": [
          {
            "id": "c4fa097f-be58-b18b-e449-010f2bfa5325",
            "ancestors": [],
            "type": "function",
            "description": "maps a Schedule Payment Request to a Payment Dto using enriched user details, and provides additional functionality for recurring payments, member ID, and community IDs.",
            "name": "SchedulePaymentApiMapper",
            "location": {
              "start": 46,
              "insert": 41,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 40,
                "end": 45
              }
            },
            "item_type": "interface",
            "length": 322,
            "docLength": 5
          },
          {
            "id": "5b0c0cd7-a077-f3b9-cd4b-60f86f13c6b7",
            "ancestors": [
              "c4fa097f-be58-b18b-e449-010f2bfa5325"
            ],
            "type": "function",
            "description": "builds a `UserDto` object from a given `adminId`.",
            "params": [
              {
                "name": "adminId",
                "type_name": "String",
                "description": "user ID of an admin in the `UserDto` object constructed by the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "UserDto",
              "description": "a `UserDto` object with a `userId` field set to the input `adminId`.\n\n* `userId`: This field contains the value of the `adminId` parameter passed to the function, which is used as the `userId` attribute of the resulting `UserDto`.",
              "complex_type": true
            },
            "name": "adminIdToAdminDto",
            "location": {
              "start": 64,
              "insert": 49,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 48,
                "end": 63
              }
            },
            "item_type": "method",
            "length": 6,
            "docLength": 15
          },
          {
            "id": "953abda7-65ae-a2b9-514f-a7035c93e421",
            "ancestors": [
              "c4fa097f-be58-b18b-e449-010f2bfa5325"
            ],
            "type": "function",
            "description": "maps a `memberId` string parameter to a `HouseMemberDto` object, providing a convenient conversion for further processing or storage.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "identifier of a member in the `HouseMemberDto` object created by the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "HouseMemberDto",
              "description": "a `HouseMemberDto` object containing the input `memberId`.\n\n* `memberId`: A string attribute that holds the member ID of the House Member.\n* `HouseMemberDto`: The output is a instance of the `HouseMemberDto` class, which represents a House Member in a structured format.",
              "complex_type": true
            },
            "name": "memberIdToMemberDto",
            "location": {
              "start": 84,
              "insert": 71,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 70,
                "end": 83
              }
            },
            "item_type": "method",
            "length": 5,
            "docLength": 13
          },
          {
            "id": "184ff2db-1340-c1ac-4f49-f45aa147e77f",
            "ancestors": [
              "c4fa097f-be58-b18b-e449-010f2bfa5325"
            ],
            "type": "function",
            "description": "transforms a `UserDto` object into a string representation of the user's ID.",
            "params": [
              {
                "name": "userDto",
                "type_name": "UserDto",
                "description": "user object containing the user ID, which is returned as the output of the `adminToAdminId` function.\n\n* The `UserDto` object contains a `userId` property that returns a string value representing the user ID.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a string representing the user ID of the admin.",
              "complex_type": false
            },
            "name": "adminToAdminId",
            "location": {
              "start": 107,
              "insert": 90,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 89,
                "end": 106
              }
            },
            "item_type": "method",
            "length": 4,
            "docLength": 17
          },
          {
            "id": "b225409d-54f7-fe80-0649-f06c832cfa1c",
            "ancestors": [
              "c4fa097f-be58-b18b-e449-010f2bfa5325"
            ],
            "type": "function",
            "description": "returns the `MemberId` of a given `HouseMemberDto`.",
            "params": [
              {
                "name": "houseMemberDto",
                "type_name": "HouseMemberDto",
                "description": "HouseMember object that contains information about a member of a house, which is used to retrieve the member's ID.\n\n* `getMemberId()` returns the member ID.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a string representing the member ID of the inputted HouseMemberDto object.",
              "complex_type": false
            },
            "name": "memberToMemberId",
            "location": {
              "start": 128,
              "insert": 112,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 111,
                "end": 127
              }
            },
            "item_type": "method",
            "length": 4,
            "docLength": 16
          },
          {
            "id": "10801ad4-c723-f08c-db4d-926c643158a5",
            "ancestors": [
              "c4fa097f-be58-b18b-e449-010f2bfa5325"
            ],
            "type": "function",
            "description": "maps the user details from a payment request to an admin and another member, leveraging the `@MappingTarget` annotation to generate a Builder instance for the PaymentDto class.",
            "params": [
              {
                "name": "paymentDto",
                "type_name": "PaymentDto.PaymentDtoBuilder",
                "description": "PaymentDto object to which user fields will be mapped.\n\n* `PaymentDto.PaymentDtoBuilder`: This is an instance of a builder class for the `PaymentDto` class, which is annotated with `@Builder`. The use of `AfterMapping` requires passing in the instance of the builder class.\n* `EnrichedSchedulePaymentRequest`: This is the original input passed to the function, which has been enriched with additional information.\n* `getEnrichedRequestMember()` and `getEnrichedRequestAdmin()`: These are methods that extract the relevant user details from the enriched input, such as members or admins, and return them as instances of the `PaymentDto` class.",
                "complex_type": true
              },
              {
                "name": "enrichedSchedulePaymentRequest",
                "type_name": "EnrichedSchedulePaymentRequest",
                "description": "PaymentDto and provides the user details that need to be converted to admin and house member details for further processing.\n\n* `PaymentDto.PaymentDtoBuilder`: This is an instance of the `PaymentDto.PaymentDtoBuilder` class, which is a builder class for the `PaymentDto` class.\n* `EnrichedSchedulePaymentRequest`: This is the input parameter for the function, which contains various properties and attributes related to the payment request. These include:\n\t+ `member`: A reference to a member of the house associated with the payment request.\n\t+ `admin`: A reference to an administrator associated with the payment request.\n\nThe function modifies these properties by calling the `getEnrichedRequestMember` and `getEnrichedRequestAdmin` methods, which are responsible for extracting the relevant information from the input `enrichedSchedulePaymentRequest`.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "PaymentDto paymentDto = new PaymentDto();\nEnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest = new EnrichedSchedulePaymentRequest(new SchedulePaymentRequest(\"ONE_TIME\", \"description\", false, BigDecimal.valueOf(0), LocalDate.now(), adminId, adminEntityId, adminName, adminEmail, adminEncryptedPassword));\nPaymentDto result = enrichSchedulePaymentRequest(paymentDto, enrichedSchedulePaymentRequest);\n",
              "description": "\nThe method enrichSchedulePaymentRequest takes in two parameters: a PaymentDto object (which is empty) and an EnrichedSchedulePaymentRequest object. It then calls the setUserFields method using those two objects as parameters. The setUserFields method populates the member and admin fields of the paymentDto with enriched details from the enrichedSchedulePaymentRequest, which are then used to populate the paymentDto with the relevant information for the response object."
            },
            "name": "setUserFields",
            "location": {
              "start": 174,
              "insert": 142,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 141,
                "end": 173
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 32
          },
          {
            "id": "c5d0c5c0-0baa-a28a-8d4b-609eb32a80ad",
            "ancestors": [
              "c4fa097f-be58-b18b-e449-010f2bfa5325"
            ],
            "type": "function",
            "description": "enriches a `SchedulePaymentRequest` object with additional information about the admin and member, such as their IDs, names, email addresses, and community membership.",
            "params": [
              {
                "name": "request",
                "type_name": "SchedulePaymentRequest",
                "description": "Schedule Payment Request that is being enriched, providing its type, description, recurring status, charge amount, due date, administrator ID, and other relevant information.\n\n* `type`: The type of schedule payment request, which is an immutable property.\n* `description`: A description of the schedule payment request, which is an immutable property.\n* `isRecurring`: Indicates whether the schedule payment request is recurring or not, which is a Boolean property.\n* `charge`: The charge amount for the schedule payment request, which is an immutable property.\n* `dueDate`: The due date of the schedule payment request, which is an immutable property.\n* `adminId`: The ID of the admin who created the schedule payment request, which is an immutable property.\n* `adminName`: The name of the admin who created the schedule payment request, which is an immutable property.\n* `adminEmail`: The email address of the admin who created the schedule payment request, which is an immutable property.\n* `encryptedPassword`: The encrypted password of the admin who created the schedule payment request, which is an immutable property.\n* `communityIds`: A set of community IDs associated with the schedule payment request, which is generated from the IDs of the communities to which the admin belongs, using the `map` and `collect` methods of the Stream API.\n* `memberId`: The ID of the member who requested the schedule payment, which is an immutable property.\n* `memberName`: The name of the member who requested the schedule payment, which is an immutable property.\n* `houseMemberDocumentFilename`: The filename of the House Member document associated with the member, if available, which is an immutable property.\n* `communityHouseId`: The ID of the community to which the member belongs, if available, which is an immutable property.",
                "complex_type": true
              },
              {
                "name": "admin",
                "type_name": "User",
                "description": "User object that contains information about the administrator who is enriching the payment request, including their ID, name, email, encrypted password, and communities.\n\n* `getCommunities()` returns a stream of `Community` objects representing the user's communities.\n* `map(Collectors.toSet())` converts the stream into a set of community IDs.\n\nThe remaining properties of `admin` are:\n\n* `id`: the user's ID\n* `name`: the user's name\n* `email`: the user's email address\n* `encryptedPassword`: the user's encrypted password\n\nThe `member` object has the following properties:\n\n* `getMemberId()` returns the member's ID\n* `getHouseMemberDocument()` returns a `Document` object representing the member's house document (if available)",
                "complex_type": true
              },
              {
                "name": "member",
                "type_name": "HouseMember",
                "description": "HouseMember object associated with the payment request, providing its member ID, house ID, and community ID.\n\n* `member.getMemberId()`: The unique identifier for the member in the system.\n* `member.getId()`: The internal ID of the member within the `HouseMember` document.\n* `member.getHouseMemberDocument() != null ? member.getHouseMemberDocument().getDocumentFilename() : \"\"`: The filename of the member's House Member document, or an empty string if no document is available.\n* `member.getName()`: The name of the member.\n* `member.getCommunityHouse() != null ? member.getCommunityHouse().getHouseId() : \"\"`: The ID of the community house that the member belongs to, or an empty string if no community house is associated with the member.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "EnrichedSchedulePaymentRequest",
              "description": "an enriched `SchedulePaymentRequest` object containing additional fields.\n\n* `type`: The type of payment request, which is an arbitrary string.\n* `description`: A brief description of the payment request, which is a string.\n* `isRecurring`: A boolean indicating whether the payment request is recurring or not.\n* `charge`: The charge amount for the payment request, which is a decimal value.\n* `dueDate`: The due date of the payment request, which is a date in the format `YYYY-MM-DD`.\n* `adminId`: The ID of the admin who created the payment request, which is an integer.\n* `adminName`: The name of the admin who created the payment request, which is a string.\n* `adminEmail`: The email address of the admin who created the payment request, which is a string.\n* `encryptedPassword`: The encrypted password of the admin who created the payment request, which is a string.\n* `communityIds`: A set of community IDs associated with the payment request, which is a collection of strings.\n* `memberId`: The ID of the member for whom the payment request is made, which is an integer.\n* `houseMemberDocumentFilename`: The filename of the House Member document associated with the payment request (empty string if not available).\n* `memberName`: The name of the member for whom the payment request is made, which is a string.\n* `communityHouseId`: The ID of the community house associated with the payment request (empty string if not available).",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "User admin = User.builder()\n        .id(\"admin-1\")\n        .email(\"admin@example.com\")\n        .name(\"Administrator\")\n        .encryptedPassword(\"$2a$10$.6X8tGUh3g9VcF4B5DYRiP.\")\n        .build();\nHouseMember member = HouseMember.builder()\n        .memberId(\"member-1\")\n        .id(\"house-member-1\")\n        .name(\"John Doe\")\n        .houseMemberDocument(new Document(\"document-1\", \"filename.pdf\"))\n        .communityHouse(new House(\"house-1\", new Community(\"community-1\")))\n        .build();\nSchedulePaymentRequest request = SchedulePaymentRequest.builder()\n        .type(\"schedule\")\n        .description(\"monthly payment\")\n        .isRecurring(true)\n        .charge(10.00)\n        .dueDate(LocalDate.of(2023, 1, 1))\n        .adminId(\"admin-1\")\n        .memberId(\"member-1\")\n        .build();\nEnrichedSchedulePaymentRequest enriched = enrichSchedulePaymentRequest(request, admin, member);\n",
              "description": "\nIn this example, the method would be used to create an EnrichedSchedulePaymentRequest object containing information about a payment request made by a user, including their details. The request object is first converted into an EnrichedSchedulePaymentRequest using the enrichSchedulePaymentRequest method. The user's admin and member details are then fetched from the HouseMember and User objects respectively, and passed as arguments to the method. The resulting EnrichedSchedulePaymentRequest contains various properties and attributes that can be used for various purposes, including populating a PaymentDto object with user details from the input."
            },
            "name": "enrichSchedulePaymentRequest",
            "location": {
              "start": 276,
              "insert": 200,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 199,
                "end": 275
              }
            },
            "item_type": "method",
            "length": 24,
            "docLength": 76
          },
          {
            "id": "789982b4-8bd5-3ca1-1f43-5f1217e40a70",
            "ancestors": [
              "c4fa097f-be58-b18b-e449-010f2bfa5325"
            ],
            "type": "function",
            "description": "creates a `UserDto` object containing the admin's details, based on the enriched schedule payment request provided as input.",
            "params": [
              {
                "name": "enrichedSchedulePaymentRequest",
                "type_name": "EnrichedSchedulePaymentRequest",
                "description": "administrative user for whom the method is generating the enriched request.\n\n* `userId`: The ID of the administrator associated with the schedule payment request.\n* `id`: The entity ID of the administrator associated with the schedule payment request.\n* `name`: The name of the administrator associated with the schedule payment request.\n* `email`: The email address of the administrator associated with the schedule payment request.\n* `encryptedPassword`: The encrypted password of the administrator associated with the schedule payment request.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "UserDto",
              "description": "a `UserDto` object containing the admin's details.\n\n* `userId`: The ID of the admin associated with the enriched schedule payment request.\n* `id`: The entity ID of the admin associated with the enriched schedule payment request.\n* `name`: The name of the admin associated with the enriched schedule payment request.\n* `email`: The email address of the admin associated with the enriched schedule payment request.\n* `encryptedPassword`: The encrypted password of the admin associated with the enriched schedule payment request.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "UserDto admin = getEnrichedRequestAdmin(enrichedSchedulePaymentRequest);\n",
              "description": "\nThis line of code calls the `getEnrichedRequestAdmin` method provided by the interface, which returns a `UserDto` object containing the admin's details from an enriched schedule payment request. The method uses the `EnrichedSchedulePaymentRequest` object as its input parameter to fetch the administrator's ID, name, email address, and encrypted password from the request object.\n\nThe returned `UserDto` object is then assigned to the `admin` variable, which can be used for further processing or storage in a database. This approach allows developers to enrich an administrative user's details from an enriched schedule payment request, without having to manually extract them from the input parameter and create a new user DTO object."
            },
            "name": "getEnrichedRequestAdmin",
            "location": {
              "start": 328,
              "insert": 301,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 300,
                "end": 327
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 27
          },
          {
            "id": "e65e5f85-9053-efb4-9f45-a428d9558c70",
            "ancestors": [
              "c4fa097f-be58-b18b-e449-010f2bfa5325"
            ],
            "type": "function",
            "description": "transforms an `EnrichedSchedulePaymentRequest` object into a `HouseMemberDto` object, including member ID, name, and entity ID.",
            "params": [
              {
                "name": "enrichedSchedulePaymentRequest",
                "type_name": "EnrichedSchedulePaymentRequest",
                "description": "payment request with additional details such as member entity ID, member ID, and house member name.\n\n* `getMemberEntityId()` returns the entity ID of the member associated with the schedule payment request.\n* `getMemberId()` returns the ID of the member associated with the schedule payment request.\n* `getHouseMemberName()` returns the name of the house member associated with the schedule payment request.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HouseMemberDto",
              "description": "a `HouseMemberDto` object with member ID, name, and entity ID.\n\n* `id`: This property represents the ID of the house member entity associated with the enriched schedule payment request.\n* `memberId`: This property contains the unique identifier of the member associated with the enriched schedule payment request.\n* `name`: This property holds the name of the house member associated with the enriched schedule payment request.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest = new EnrichedSchedulePaymentRequest();\n  // ... initialize fields of enrichedSchedulePaymentRequest\n  \n  HouseMemberDto houseMemberDto = getEnrichedRequestMember(enrichedSchedulePaymentRequest);\n",
              "description": "\nIn this example, the method `getEnrichedRequestMember` is called on an instance of `EnrichedSchedulePaymentRequest`, and the result is stored in a variable named `houseMemberDto`. This variable would contain a `HouseMemberDto` object with the fields populated using values from the provided `enrichedSchedulePaymentRequest` object."
            },
            "name": "getEnrichedRequestMember",
            "location": {
              "start": 361,
              "insert": 338,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 337,
                "end": 360
              }
            },
            "item_type": "method",
            "length": 6,
            "docLength": 23
          }
        ]
      }
    }
  },
  {
    "name": "UserApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/UserApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface `UserApiMapper` that provides a mapping between different data structures related to users, such as from `CreateUserRequest` to `UserDto` and vice versa, and from `Set<User>` to `RestApiResponseUserSet`. The interface includes several methods for conversion, including `createUserRequestToUserDto`, `userSetToRestApiResponseUserSet`, `userDtoToCreateUserResponse`, and `userDtoToGetUserDetailsResponse`.",
        "items": [
          {
            "id": "d4a06b51-dad9-b386-ca43-2e3d27f42c3a",
            "ancestors": [],
            "type": "function",
            "description": "provides a mapping between various data structures related to users, such as from CreateUserRequest to UserDto and vice versa, and from Set<User> to RestApiResponseUserSet.",
            "name": "UserApiMapper",
            "location": {
              "start": 34,
              "insert": 30,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 29,
                "end": 33
              }
            },
            "item_type": "interface",
            "length": 12,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "EnrichedSchedulePaymentRequest.java",
    "path": "service/src/main/java/com/myhome/controllers/request/EnrichedSchedulePaymentRequest.java",
    "content": {
      "structured": {
        "description": "An enriched SchedulePaymentRequest class that extends the standard SchedulePaymentRequest class. The enriched class includes additional fields for admin and house member details, which can be used to map to user and house member fields in payment successfully. The class provides a constructor that allows for passing in additional parameters to enrich the request further.",
        "items": [
          {
            "id": "4f10e3a3-be8c-4c80-9f40-17fd679a251b",
            "ancestors": [],
            "type": "function",
            "description": "extends the SchedulePaymentRequest class and provides additional information on admin and house member details to enrich the payment request.\nFields:\n\t- adminEntityId (Long): represents an entity associated with the administrative user who created or updated the enriched payment request.\n\t- adminName (String): represents the human name of an administrative user associated with the payment request.\n\t- adminEmail (String): represents an email address associated with an administrative user entity in the system.\n\t- adminEncryptedPassword (String): stores an encrypted password for an administrator of a house member in the system.\n\t- adminCommunityIds (Set<String>): represents a set of community IDs associated with an administrative user who created or updated the EnrichedSchedulePaymentRequest.\n\t- memberEntityId (Long): represents an entity in the system of interest.\n\t- houseMemberDocumentName (String): represents the name of a document related to the member's house information.\n\t- houseMemberName (String): represents the name of a member of a particular household within their community.\n\t- houseMemberHouseID (String): represents a unique identifier for a member's household within their community.\n\n",
            "fields": [
              {
                "name": "adminEntityId",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents an entity associated with the administrative user who created or updated the enriched payment request."
              },
              {
                "name": "adminName",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents the human name of an administrative user associated with the payment request."
              },
              {
                "name": "adminEmail",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents an email address associated with an administrative user entity in the system."
              },
              {
                "name": "adminEncryptedPassword",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "stores an encrypted password for an administrator of a house member in the system."
              },
              {
                "name": "adminCommunityIds",
                "type_name": "Set<String>",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents a set of community IDs associated with an administrative user who created or updated the EnrichedSchedulePaymentRequest."
              },
              {
                "name": "memberEntityId",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents an entity in the system of interest."
              },
              {
                "name": "houseMemberDocumentName",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents the name of a document related to the member's house information."
              },
              {
                "name": "houseMemberName",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents the name of a member of a particular household within their community."
              },
              {
                "name": "houseMemberHouseID",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents a unique identifier for a member's household within their community."
              }
            ],
            "name": "EnrichedSchedulePaymentRequest",
            "location": {
              "start": 54,
              "insert": 33,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 32,
                "end": 53
              }
            },
            "item_type": "class",
            "length": 34,
            "docLength": 21
          }
        ]
      }
    }
  },
  {
    "name": "ForgotPasswordRequest.java",
    "path": "service/src/main/java/com/myhome/controllers/request/ForgotPasswordRequest.java",
    "content": {
      "structured": {
        "description": "A data class called ForgotPasswordRequest, which stores email address, token, and new password for forgot password functionality. The class uses Lombok packages to provide constructor and data methods.",
        "items": [
          {
            "id": "af26af37-c229-09a6-044e-a8795120a621",
            "ancestors": [],
            "type": "function",
            "description": "represents an email address, token, and new password for forgot password functionality.\nFields:\n\t- email (String): in the ForgotPasswordRequest class represents an email address associated with the user's account.\n\t- token (String): in the ForgotPasswordRequest class represents a unique code or identifier for the user to reset their password.\n\t- newPassword (String): in the ForgotPasswordRequest class represents a string value entered by the user to reset their password.\n\n",
            "fields": [
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "ForgotPasswordRequest",
                "description": "in the ForgotPasswordRequest class represents an email address associated with the user's account."
              },
              {
                "name": "token",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "ForgotPasswordRequest",
                "description": "in the ForgotPasswordRequest class represents a unique code or identifier for the user to reset their password."
              },
              {
                "name": "newPassword",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "ForgotPasswordRequest",
                "description": "in the ForgotPasswordRequest class represents a string value entered by the user to reset their password."
              }
            ],
            "name": "ForgotPasswordRequest",
            "location": {
              "start": 20,
              "insert": 9,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 8,
                "end": 19
              }
            },
            "item_type": "class",
            "length": 9,
            "docLength": 11
          }
        ]
      }
    }
  },
  {
    "name": "CreateUserResponse.java",
    "path": "service/src/main/java/com/myhome/controllers/response/CreateUserResponse.java",
    "content": {
      "structured": {
        "description": "A response model for creating a user in a system. The CreateUserResponse class has fields for user ID, name, and email. The class uses Lombok, an automated programming tool, to generate getter, setter, no-args constructor, and all-args constructor methods.",
        "items": [
          {
            "id": "bb2ad009-c909-b8bc-474e-e400c1fe8d65",
            "ancestors": [],
            "type": "function",
            "description": "is a model for responding to a create user request with attributes for user ID, name, and email.\nFields:\n\t- userId (String): represents a unique identifier for a user in the system.\n\t- name (String): of the CreateUserResponse class represents a string value representing the user's name.\n\t- email (String): in the CreateUserResponse class represents a string value of a user's email address.\n\n",
            "fields": [
              {
                "name": "userId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateUserResponse",
                "description": "represents a unique identifier for a user in the system."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateUserResponse",
                "description": "of the CreateUserResponse class represents a string value representing the user's name."
              },
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateUserResponse",
                "description": "in the CreateUserResponse class represents a string value of a user's email address."
              }
            ],
            "name": "CreateUserResponse",
            "location": {
              "start": 39,
              "insert": 30,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 29,
                "end": 38
              }
            },
            "item_type": "class",
            "length": 9,
            "docLength": 9
          }
        ]
      }
    }
  },
  {
    "name": "HouseDetailResponse.java",
    "path": "service/src/main/java/com/myhome/controllers/response/HouseDetailResponse.java",
    "content": {
      "structured": {
        "description": "A class called `HouseDetailResponse` that contains a single field representing a `CommunityHouseDto` object. The class uses Lombok's no-args and all-args constructors, as well as data annotations to provide metadata about the class.",
        "items": [
          {
            "id": "6ab44442-800d-95be-e34b-aaa4487789c7",
            "ancestors": [],
            "type": "function",
            "description": "represents a response containing a CommunityHouseDto object.\nFields:\n\t- house (CommunityHouseDto): in the HouseDetailResponse class contains an instance of the CommunityHouseDto object.\n\n",
            "fields": [
              {
                "name": "house",
                "type_name": "CommunityHouseDto",
                "value": null,
                "constant": false,
                "class_name": "HouseDetailResponse",
                "description": "in the HouseDetailResponse class contains an instance of the CommunityHouseDto object."
              }
            ],
            "name": "HouseDetailResponse",
            "location": {
              "start": 29,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 28
              }
            },
            "item_type": "class",
            "length": 6,
            "docLength": 5
          }
        ]
      }
    }
  },
  {
    "name": "SchedulePaymentResponse.java",
    "path": "service/src/main/java/com/myhome/controllers/response/SchedulePaymentResponse.java",
    "content": {
      "structured": {
        "description": "A `SchedulePaymentResponse` class that represents a response for scheduling payments. The class has various fields and constructors, including `paymentId`, `charge`, `type`, `description`, `recurring`, `dueDate`, `adminId`, and `memberId`. These fields represent information about the payment being scheduled, such as the unique identifier, monetary value, type of payment, and due date. The class uses Lombok, a dependency injection library, to simplify the creation of the class.",
        "items": [
          {
            "id": "7ae10295-a120-e9a2-9343-47690915cabb",
            "ancestors": [],
            "type": "function",
            "description": "represents a response for scheduling payments, including payment ID, charge amount, and other relevant information.\nFields:\n\t- paymentId (String): represents a unique identifier for a payment.\n\t- charge (BigDecimal): represents a monetary value.\n\t- type (String): represents the payment's type, which could be \"credit card\", \"bank transfer\", or \"other\".\n\t- description (String): likely represents a brief textual explanation of the payment or charge being made provided by the user or administrator.\n\t- recurring (boolean): indicates whether a payment is a one-time payment or a recurring payment.\n\t- dueDate (String): represents a date when a payment is expected to be made.\n\t- adminId (String): represents an identifier for the administrator who manages the payment schedule.\n\t- memberId (String): represents a unique identifier for a member associated with the payment schedule.\n\n",
            "fields": [
              {
                "name": "paymentId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "SchedulePaymentResponse",
                "description": "represents a unique identifier for a payment."
              },
              {
                "name": "charge",
                "type_name": "BigDecimal",
                "value": null,
                "constant": false,
                "class_name": "SchedulePaymentResponse",
                "description": "represents a monetary value."
              },
              {
                "name": "type",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "SchedulePaymentResponse",
                "description": "represents the payment's type, which could be \"credit card\", \"bank transfer\", or \"other\"."
              },
              {
                "name": "description",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "SchedulePaymentResponse",
                "description": "likely represents a brief textual explanation of the payment or charge being made provided by the user or administrator."
              },
              {
                "name": "recurring",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "SchedulePaymentResponse",
                "description": "indicates whether a payment is a one-time payment or a recurring payment."
              },
              {
                "name": "dueDate",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "SchedulePaymentResponse",
                "description": "represents a date when a payment is expected to be made."
              },
              {
                "name": "adminId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "SchedulePaymentResponse",
                "description": "represents an identifier for the administrator who manages the payment schedule."
              },
              {
                "name": "memberId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "SchedulePaymentResponse",
                "description": "represents a unique identifier for a member associated with the payment schedule."
              }
            ],
            "name": "SchedulePaymentResponse",
            "location": {
              "start": 46,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 45
              }
            },
            "item_type": "class",
            "length": 13,
            "docLength": 22
          }
        ]
      }
    }
  },
  {
    "name": "Amenity.java",
    "path": "service/src/main/java/com/myhome/domain/Amenity.java",
    "content": {
      "structured": {
        "description": "An entity called `Amenity` that represents a specific amenity available for booking at a community house. The code includes annotations and utilizes various packages such as Lombok and Java Persistence API (JPA) to define the structure and relationships of the entity. The `Amenity` class has fields for amenity ID, name, description, price, community, community house, and booking items, which are defined using Lombok annotations. The code also defines named entity graphs for the `Amenity` class, which allow for efficient querying and persistence of the entity.",
        "items": [
          {
            "id": "dc95f3aa-2860-62b1-404f-26bd1db483a0",
            "ancestors": [],
            "type": "function",
            "description": "represents a specific amenity available for booking at a CommunityHouse with associated attributes and relationships with other entities.\nFields:\n\t- amenityId (String): represents a unique identifier for each amenity.\n\t- name (String): represents a string attribute that contains the name of an amenity.\n\t- description (String): represents a brief textual description of an amenity's purpose or features.\n\t- price (BigDecimal): represents a monetary value.\n\t- community (Community): in the Amenity class represents an association to a Community entity.\n\t- communityHouse (CommunityHouse): represents an association between an amenity and one or more community houses where the amenity can be booked for use.\n\t- bookingItems (Set<AmenityBookingItem>): in the Amenity class represents a collection of AmenityBookingItem objects linked to the amenity via the amenityId attribute, used for storing and managing bookings for the amenity.\n\n",
            "fields": [
              {
                "name": "amenityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Amenity",
                "description": "represents a unique identifier for each amenity."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Amenity",
                "description": "represents a string attribute that contains the name of an amenity."
              },
              {
                "name": "description",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Amenity",
                "description": "represents a brief textual description of an amenity's purpose or features."
              },
              {
                "name": "price",
                "type_name": "BigDecimal",
                "value": null,
                "constant": false,
                "class_name": "Amenity",
                "description": "represents a monetary value."
              },
              {
                "name": "community",
                "type_name": "Community",
                "value": null,
                "constant": false,
                "class_name": "Amenity",
                "description": "in the Amenity class represents an association to a Community entity."
              },
              {
                "name": "communityHouse",
                "type_name": "CommunityHouse",
                "value": null,
                "constant": false,
                "class_name": "Amenity",
                "description": "represents an association between an amenity and one or more community houses where the amenity can be booked for use."
              },
              {
                "name": "bookingItems",
                "type_name": "Set<AmenityBookingItem>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "Amenity",
                "description": "in the Amenity class represents a collection of AmenityBookingItem objects linked to the amenity via the amenityId attribute, used for storing and managing bookings for the amenity."
              }
            ],
            "name": "Amenity",
            "location": {
              "start": 58,
              "insert": 37,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 36,
                "end": 57
              }
            },
            "item_type": "class",
            "length": 38,
            "docLength": 21
          }
        ]
      }
    }
  }
]