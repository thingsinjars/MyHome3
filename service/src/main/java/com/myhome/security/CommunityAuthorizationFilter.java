package com.myhome.security;

import com.myhome.domain.User;
import com.myhome.services.CommunityService;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * is responsible for filtering incoming HTTP requests based on a pattern and user
 * authentication. The filter checks whether the URL matches a specific pattern and
 * if the user is not an administrator of a community, it sets the response status
 * to SC_UNAUTHORIZED and returns. If the user is an administrator, the filter delegates
 * to the super method for further filtering.
 */
public class CommunityAuthorizationFilter extends BasicAuthenticationFilter {
    private final CommunityService communityService;
    private final String uuidPattern = "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}";
    private final Pattern addAdminRequestPattern = Pattern.compile("/communities/" + uuidPattern + "/admins");


    public CommunityAuthorizationFilter(AuthenticationManager authenticationManager,
                                        CommunityService communityService) {
        super(authenticationManager);
        this.communityService = communityService;
    }

    /**
     * filters incoming HTTP requests based on a pattern and checks if the user is an
     * admin using a method `isUserCommunityAdmin`. If the user is not an admin, it
     * responds with a status code of `HttpServletResponse.SC_UNAUTHORIZED`.
     * 
     * @param request HTTP request being processed by the filter.
     * 
     * * `getRequestURI()`: returns the request URI.
     * * `matcher()`: returns a `Matcher` object that can be used to check if the request
     * URL matches a pattern.
     * * `isUserCommunityAdmin()`: a method that checks whether the current user is an
     * administrator of a specific community.
     * 
     * These properties are used in the function to filter the requests based on the admin
     * patterns and permissions.
     * 
     * @param response ServletResponse object that is used to send the filtered response
     * to the client.
     * 
     * * `HttpServletResponse`: This is an instance of a class that represents a web
     * response in Java. It has several attributes and methods related to handling HTTP
     * requests and responses, such as status code, content type, and output stream.
     * * `status`: A integer attribute representing the status code returned by the server.
     * The possible values are between 100 and 599, inclusive.
     * * `contentType`: An instance of a class representing the MIME type of the response
     * content. It can be used to determine the format of the data sent back to the client.
     * * `outputStream`: An instance of a class representing an output stream that can
     * be used to send the response content back to the client.
     * 
     * @param chain next filter in the chain that should be executed after the current
     * filter has completed its processing.
     * 
     * * `request`: The original HTTP request sent by the client, which is passed through
     * to the next filter in the chain.
     * * `response`: The HTTP response generated by the previous filter in the chain,
     * which is then processed by this filter.
     * * `chain`: An instance of `FilterChain`, representing the sequence of filters that
     * are applied to the incoming request. This property can be accessed and manipulated
     * within the filter function.
     */
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
                                    FilterChain chain) throws IOException, ServletException {

        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());

        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            return;
        }

        super.doFilterInternal(request, response, chain);
    }

    /**
     * verifies if a user is an administrator of a community based on their ID and the
     * community ID in the request URL. It returns `true` if the user is an admin, otherwise
     * returns `false`.
     * 
     * @param request HTTP request that triggered the function execution and provides the
     * community ID from the request URI.
     * 
     * * `request`: An instance of `HttpServletRequest`, which contains information about
     * the HTTP request received by the server.
     * 	+ `getRequestURI()`: Returns the complete request URI, including any query string
     * or fragment component.
     * 	+ `split("/")` : Splits the request URI into a array of substrings using the `/`
     * character as the delimiter. The second element in the array is the community ID.
     * * `SecurityContextHolder`: An instance of `SecurityContextHolder`, which provides
     * information about the security context of the current request, including the
     * authenticated user and their role.
     * * `getAuthentication()`: Returns an instance of `Authentication`, which contains
     * information about the authenticated user, including their principal (e.g., username)
     * and any additional details (e.g., authentication method).
     * * `getPrincipal()`: Returns the principal (e.g., username) of the authenticated user.
     * * `communityService`: An instance of `CommunityService`, which provides methods
     * for interacting with the community database.
     * * `findCommunityAdminsById()`: Finds a list of community admins by their ID, using
     * a `Optional` container to indicate whether the operation was successful. If the
     * list is present, it contains a list of `User` objects representing the community
     * admins.
     * * `stream()`: Returns a stream of `User` objects from the list of community admins,
     * which can be used for further filtering or manipulation.
     * * `filter()`: Filters the stream of `User` objects to select only those that have
     * the same user ID as the authenticated user.
     * * `findFirst()`: Finds the first `User` object from the filtered stream that
     * satisfies the condition, or returns `null` if no such object exists.
     * * `orElse()`: Returns the value provided as an alternative to `null`, if the
     * `findFirst()` operation fails.
     * 
     * @returns a boolean value indicating whether the current user is an administrator
     * of the specified community.
     */
    private boolean isUserCommunityAdmin(HttpServletRequest request) {
        String userId = (String) SecurityContextHolder
                .getContext().getAuthentication().getPrincipal();
        String communityId = request
                .getRequestURI().split("/")[2];
        Optional<List<User>> optional = communityService
                .findCommunityAdminsById(communityId, null);

        if (optional.isPresent()) {
            List<User> communityAdmins = optional.get();
            User admin = communityAdmins
                    .stream()
                    .filter(communityAdmin -> communityAdmin.getUserId().equals(userId))
                    .findFirst()
                    .orElse(null);

            return admin != null;
        }

        return false;
    }
}