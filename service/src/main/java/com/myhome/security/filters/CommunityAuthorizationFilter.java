package com.myhome.security.filters;

import com.myhome.domain.User;
import com.myhome.services.CommunityService;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * is used to filter HTTP requests based on a pattern and user authentication. It
 * checks if the request URI matches a specific pattern and the user is not an
 * administrator in a specific community, returning a FORBIDDEN status code. If the
 * request is valid, it delegates to the superclass's `doFilterInternal` method.
 */
public class CommunityAuthorizationFilter extends BasicAuthenticationFilter {
  private final CommunityService communityService;
  private static final String UUID_PATTERN =
      "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}";
  private static final Pattern ADD_AMENITY_REQUEST_PATTERN =
      Pattern.compile("/communities/" + UUID_PATTERN + "/amenities");

  public CommunityAuthorizationFilter(AuthenticationManager authenticationManager,
      CommunityService communityService) {
    super(authenticationManager);
    this.communityService = communityService;
  }

  /**
   * checks if the request URI matches a pattern for adding amenities and if the user
   * is not an admin, it sets the status code to FORBIDDEN and stops the filtering
   * process. If the condition is met, it delegates the filtering task to the superclass
   * using `super.doFilterInternal`.
   * 
   * @param request HTTP request being processed and is used to determine whether the
   * user has access to the requested amenity.
   * 
   * * `request.getRequestURI()` returns the request URL.
   * * `matcher.find()` checks if the request URL matches the pattern in `ADD_AMENITY_REQUEST_PATTERN`.
   * * `!isUserCommunityAdmin(request)` checks if the current user is an administrator
   * of a community.
   * 
   * These properties are used to determine whether the request should be allowed or not.
   * 
   * @param response HTTP response object that is being filtered by the method.
   * 
   * * `HttpServletRequest request`: The incoming HTTP request that triggered the
   * filter's execution.
   * * `HttpServletResponse response`: The outgoing HTTP response generated by the filter.
   * * `FilterChain chain`: The chain of filters that the current filter is a part of,
   * which determines the order in which the filters are executed.
   * 
   * @param chain next filter in the pipeline, which is executed after the current filter.
   * 
   * * `request`: The original HTTP request object passed to the filter chain.
   * * `response`: The response object created by the filter chain.
   * * `chain`: The next filter in the chain, which may be null if this is the last filter.
   */
  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
      FilterChain chain) throws IOException, ServletException {

    Matcher urlMatcher = ADD_AMENITY_REQUEST_PATTERN.matcher(request.getRequestURI());

    if (urlMatcher.find() && !isUserCommunityAdmin(request)) {
      response.setStatus(HttpServletResponse.SC_FORBIDDEN);
      return;
    }

    super.doFilterInternal(request, response, chain);
  }

  /**
   * determines if a user is an admin of a community based on the current SecurityContext
   * and the request URI.
   * 
   * @param request HTTP request being processed and provides the community ID from the
   * request URI.
   * 
   * * `request`: The incoming HTTP request object containing information about the
   * client's request.
   * 
   * The following attributes of `request` are relevant to this function:
   * 
   * * `getRequestURI()`: Returns the fully qualified URL of the current request,
   * including any query parameters or fragments.
   * * `split("/")`): Splits the URL into its component parts (scheme, authority, path,
   * and fragment), but does not alter the original object.
   * * `getParameterMap()`: Returns a map of all the HTTP request parameters, keyed by
   * parameter name.
   * * `getAttributeMap()`: Returns a map of all the HTTP request attributes, keyed by
   * attribute name.
   * * `getMethod()`: Returns the HTTP method (e.g., GET, POST, PUT, DELETE) used in
   * the current request.
   * * `getProtocol()`: Returns the HTTP protocol version (e.g., HTTP/1.1 or HTTP/2)
   * used in the current request.
   * 
   * @returns a boolean value indicating whether the current user is an admin of a
   * specified community.
   * 
   * * `SecurityContextHolder`: This is an instance of `SecurityContextHolder`, which
   * provides information about the current security context.
   * * `Authentication`: This is an instance of `Authentication`, representing the
   * security token passed in the request.
   * * `Principal`: This is a `UserDetails` object, containing information about the
   * user making the request.
   * * `communityId`: This is the ID of the community being checked for admin status.
   * * `communityService`: This is an instance of `CommunityService`, providing methods
   * for interacting with communities.
   * * `findCommunityAdminsById()`: This method retrieves a list of admins for a given
   * community ID, using the `Community` service.
   * * `flatMap()`: This method flattens the list of admins into a stream, allowing for
   * further processing.
   * * `map()`: This method maps each admin to its user ID, allowing for filtering.
   * * `filter()`: This method filters the list of user IDs to find the ID of the user
   * who is an admin for the specified community.
   * * `findFirst()`: This method finds the first element in the filtered list, which
   * is the ID of the user who is an admin for the specified community.
   * 
   * Overall, the function returns a boolean value indicating whether the user making
   * the request is an admin for the specified community, based on their user ID and
   * the admins for that community.
   */
  private boolean isUserCommunityAdmin(HttpServletRequest request) {
    String userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    String communityId = request.getRequestURI().split("/")[2];

    return communityService.findCommunityAdminsById(communityId, null)
        .flatMap(admins -> admins.stream()
            .map(User::getUserId)
            .filter(userId::equals)
            .findFirst()
        )
        .isPresent();
  }
}
