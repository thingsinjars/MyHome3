/*
 * Copyright 2020 Prathab Murugan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.myhome.security;

import com.myhome.security.jwt.AppJwt;
import com.myhome.security.jwt.AppJwtEncoderDecoder;
import java.io.IOException;
import java.util.Collections;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.core.env.Environment;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;

/**
 * is used to filter incoming HTTP requests based on an authorization token found in
 * the request header. It retrieves an authentication token from the request header
 * and decodes it to obtain a user ID, creating a `UsernamePasswordAuthenticationToken`
 * instance with the user ID and no credentials. The filter then passes the request
 * through the next stage of the filter chain for further processing.
 */
public class MyHomeAuthorizationFilter extends BasicAuthenticationFilter {

  private final Environment environment;
  private final AppJwtEncoderDecoder appJwtEncoderDecoder;

  public MyHomeAuthorizationFilter(
      AuthenticationManager authenticationManager,
      Environment environment,
      AppJwtEncoderDecoder appJwtEncoderDecoder) {
    super(authenticationManager);
    this.environment = environment;
    this.appJwtEncoderDecoder = appJwtEncoderDecoder;
  }

  /**
   * authenticates the request by checking for an authorisation token in the request
   * header. If a token is present and matches the expected format, it sets the
   * SecurityContextHolder with the authentication token. Otherwise, it passes the
   * request to the next filter in the chain.
   * 
   * @param request HTTP request being processed and passed through the filter chain.
   * 
   * * `authHeaderName`: The name of the HTTP header containing the authentication token.
   * * `authHeaderPrefix`: The prefix of the authentication token in the HTTP header.
   * * `authHeader`: The value of the HTTP header containing the authentication token,
   * or null if no token is present.
   * * `request`: The original HTTP request deserialized by the filter chain.
   * 
   * @param response HTTP response object that will be modified or replaced by the
   * filter chain.
   * 
   * * `HttpServletRequest request`: The incoming HTTP request that triggered the
   * filter's execution.
   * * `HttpServletResponse response`: The outgoing HTTP response generated by the filter.
   * * `FilterChain chain`: A reference to the next filter in the pipeline, which will
   * receive the filtered request and generate the final response.
   * 
   * The function then checks the authentication header of the incoming request and
   * performs actions based on its content:
   * 
   * * `String authHeaderName = environment.getProperty("authorization.token.header.name");`:
   * This line retrieves the name of the authorization header from an environment property.
   * * `String authHeaderPrefix = environment.getProperty("authorization.token.header.prefix");`:
   * This line retrieves the prefix of the authorization header from an environment property.
   * * `String authHeader = request.getHeader(authHeaderName);`: This line retrieves
   * the value of the specified authorization header from the incoming request.
   * * `if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {`: This
   * line checks if the authentication header is null or does not start with the prefix
   * specified in the environment property. If either condition is true, the chain is
   * called with the request and response as arguments.
   * * `SecurityContextHolder.getContext().setAuthentication(authentication);`: This
   * line sets the current SecurityContext to the deserialized `UsernamePasswordAuthenticationToken`
   * object, which was retrieved from the incoming request.
   * * `chain.doFilter(request, response);`: This line calls the next filter in the
   * pipeline with the filtered request and response as arguments.
   * 
   * @param chain 3rd layer of the Servlet filter chain, which is the point where the
   * filter can decide to proceed with processing the request or stop and let the next
   * filter handle it.
   * 
   * * `HttpServletRequest request`: The current HTTP request being processed by the filter.
   * * `HttpServletResponse response`: The current HTTP response being generated by the
   * filter.
   * * `FilterChain chain`: The filter chain that the function is called with, which
   * contains multiple filters that can be applied to the request in sequence.
   * * `IOException`, `ServletException` throws`: Exceptions that can occur during the
   * processing of the request and can be caught and handled by the filter.
   */
  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
      FilterChain chain) throws IOException, ServletException {
    String authHeaderName = environment.getProperty("authorization.token.header.name");
    String authHeaderPrefix = environment.getProperty("authorization.token.header.prefix");

    String authHeader = request.getHeader(authHeaderName);
    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {
      chain.doFilter(request, response);
      return;
    }

    UsernamePasswordAuthenticationToken authentication = getAuthentication(request);
    SecurityContextHolder.getContext().setAuthentication(authentication);
    chain.doFilter(request, response);
  }

  /**
   * takes an `HttpServletRequest` object and returns a `UsernamePasswordAuthenticationToken`.
   * It extracts the authentication token from the `Authorization` header, decodes it
   * using the `appJwtEncoderDecoder`, and returns a token with the user ID and no other
   * credentials.
   * 
   * @param request HTTP request that triggered the function execution and provides the
   * authorization header containing the authentication token.
   * 
   * * `getHeader()` returns a header value associated with the request. The property
   * `environment.getProperty("authorization.token.header.name")` specifies the name
   * of the header field that contains the authentication token.
   * * `authHeader` is the result of calling `getHeader()` on the `request`. It represents
   * the authentication token included in the HTTP request headers.
   * * `token` is a substring extracted from the `authHeader` using the value of
   * `environment.getProperty("authorization.token.header.prefix")`. This prefix is
   * removed before decoding the JWT.
   * * `appJwtEncoderDecoder` is an instance of a class that encodes and decodes JWT
   * tokens. It is used to extract the user ID from the token.
   * * `jwt.getUserId()` returns the user ID extracted from the decoded JWT token.
   * * The `Collections.emptyList()` is used to create an empty list, which is returned
   * as the value of the `UsernamePasswordAuthenticationToken`.
   * 
   * @returns a `UsernamePasswordAuthenticationToken` object representing the authenticated
   * user.
   * 
   * * The `String` variable `authHeader` represents the authorization header sent in
   * the HTTP request.
   * * The `String` variable `token` is obtained by removing the prefix provided by the
   * environment property `authorization.token.header.prefix` from the authorization header.
   * * The `AppJwt` object `jwt` is decoded from the token using the `appJwtEncoderDecoder.decode()`
   * method and provides the user ID in its `getUserId()` method.
   * * The `UsernamePasswordAuthenticationToken` object returned is created with the
   * user ID as the username, a null password, and an empty list of authorities.
   */
  private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {
    String authHeader =
        request.getHeader(environment.getProperty("authorization.token.header.name"));
    if (authHeader == null) {
      return null;
    }

    String token =
        authHeader.replace(environment.getProperty("authorization.token.header.prefix"), "");
    AppJwt jwt = appJwtEncoderDecoder.decode(token, environment.getProperty("token.secret"));

    if (jwt.getUserId() == null) {
      return null;
    }
    return new UsernamePasswordAuthenticationToken(jwt.getUserId(), null, Collections.emptyList());
  }
}
