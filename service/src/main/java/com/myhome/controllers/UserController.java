/*
 * Copyright 2020 Prathab Murugan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.myhome.controllers;

import com.myhome.api.UsersApi;
import com.myhome.controllers.dto.UserDto;
import com.myhome.controllers.dto.mapper.HouseMemberMapper;
import com.myhome.controllers.mapper.UserApiMapper;
import com.myhome.domain.PasswordActionType;
import com.myhome.domain.User;
import com.myhome.model.CreateUserRequest;
import com.myhome.model.CreateUserResponse;
import com.myhome.model.ForgotPasswordRequest;
import com.myhome.model.GetUserDetailsResponse;
import com.myhome.model.GetUserDetailsResponseUser;
import com.myhome.model.ListHouseMembersResponse;
import com.myhome.services.HouseService;
import com.myhome.services.UserService;
import java.util.HashSet;
import java.util.Optional;
import java.util.Set;
import javax.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.constraints.NotNull;

/**
 * Controller for facilitating user actions.
 */
/**
 * is responsible for handling API requests related to users in an application. It
 * provides functions for listing all users, retrieving a specific user by ID, resetting
 * a password, and confirming an email address. The class also includes methods for
 * resending an email confirmation link if one was previously sent.
 */
@RestController
@Slf4j
@RequiredArgsConstructor
public class UserController implements UsersApi {

  private final UserService userService;
  private final UserApiMapper userApiMapper;
  private final HouseService houseService;
  private final HouseMemberMapper houseMemberMapper;

  /**
   * takes a `CreateUserRequest` and creates a new user in the system, returning the
   * created user response in case of success or a conflict status otherwise.
   * 
   * @param request CreateUserRequest object that contains the user's information to
   * be created.
   * 
   * log.trace("Received SignUp request"); - This line is a trace message generated by
   * the logging framework and provides no additional information.
   * UserDto requestUserDto = userApiMapper.createUserRequestToUserDto(request); - This
   * line maps the incoming `CreateUserRequest` object to a `UserDto` object using a
   * mapping function provided by the `userApiMapper` class. The resulting `UserDto`
   * object contains the attributes of the original request, such as the user's name,
   * email, and password.
   * Optional<UserDto> createdUserDto = userService.createUser(requestUserDto); - This
   * line calls the `createUser` method of the `userService` class, passing in the
   * mapped `UserDto` object. The method either creates a new user or returns an empty
   * optional if the creation was successful.
   * The rest of the code deals with handling the response to the request.
   * 
   * @returns a `ResponseEntity` object with a status code of `CREATED` and the created
   * user's details in the body.
   * 
   * * The `ResponseEntity` object contains the HTTP status code and the body of the
   * response, which is a `CreateUserResponse` object in this case.
   * * The `HttpStatus` field indicates that the request was successful (STATUS_CREATED)
   * or conflicted (STATUS_CONFLICT).
   * * The `body` field contains the `CreateUserResponse` object, which represents the
   * result of the sign-up operation.
   */
  @Override
  public ResponseEntity<CreateUserResponse> signUp(@Valid CreateUserRequest request) {
    log.trace("Received SignUp request");
    UserDto requestUserDto = userApiMapper.createUserRequestToUserDto(request);
    Optional<UserDto> createdUserDto = userService.createUser(requestUserDto);
    return createdUserDto
        .map(userDto -> {
          CreateUserResponse response = userApiMapper.userDtoToCreateUserResponse(userDto);
          return ResponseEntity.status(HttpStatus.CREATED).body(response);
        })
        .orElseGet(() -> ResponseEntity.status(HttpStatus.CONFLICT).build());
  }

  /**
   * logs a trace message, lists all users from the `userService`, maps them to a REST
   * API response format using `userApiMapper`, and returns a `GetUserDetailsResponse`
   * object with the list of users.
   * 
   * @param pageable page number and page size of the users to be listed, allowing for
   * pagination of the list.
   * 
   * * `log.trace("Received request to list all users")` - This line logs a trace message
   * indicating that the method has received a request to list all users.
   * * `Set<User> userDetails = userService.listAll(pageable);` - This line calls the
   * `listAll` method of the `userService` class, passing in `pageable` as an argument.
   * The `listAll` method returns a set of `User` objects representing all users in the
   * system.
   * * `Set<GetUserDetailsResponseUser> userDetailsResponse =
   * userApiMapper.userSetToRestApiResponseUserSet(userDetails);` - This line calls the
   * `userApiMapper` class's `userSetToRestApiResponseUserSet` method, passing in the
   * set of `User` objects returned by the `listAll` method. The `userApiMapper` class
   * maps the `User` objects to a corresponding set of `GetUserDetailsResponseUser`
   * objects, which are used to construct the response to the original request.
   * * `GetUserDetailsResponse response = new GetUserDetailsResponse();` - This line
   * creates a new instance of the `GetUserDetailsResponse` class, which represents the
   * response to the original request.
   * * `response.setUsers(userDetailsResponse);` - This line sets the `users` field of
   * the `GetUserDetailsResponse` object to the set of `GetUserDetailsResponseUser`
   * objects returned by the `userApiMapper` method.
   * 
   * @returns a list of user details in a REST API response format.
   * 
   * * `GetUserDetailsResponse`: This is the class that represents the response to the
   * list all users request. It has a `users` field that contains a set of
   * `GetUserDetailsResponseUser` objects, which represent the list of users.
   * * `users`: This field is a Set<GetUserDetailsResponseUser> and contains the list
   * of users returned by the function. Each user in the list is represented as a
   * `GetUserDetailsResponseUser` object.
   * * `GetUserDetailsResponseUser`: This class represents a single user in the response.
   * It has properties such as `id`, `username`, `email`, etc. that contain the details
   * of each user.
   */
  @Override
  public ResponseEntity<GetUserDetailsResponse> listAllUsers(Pageable pageable) {
    log.trace("Received request to list all users");

    Set<User> userDetails = userService.listAll(pageable);
    Set<GetUserDetailsResponseUser> userDetailsResponse =
        userApiMapper.userSetToRestApiResponseUserSet(userDetails);

    GetUserDetailsResponse response = new GetUserDetailsResponse();
    response.setUsers(userDetailsResponse);

    return ResponseEntity.status(HttpStatus.OK).body(response);
  }

  /**
   * receives a user ID and queries the user service to retrieve user details. If
   * successful, it returns a `ResponseEntity` with the user details in the form of a
   * `GetUserDetailsResponse`. If unsuccessful, it returns an empty response entity
   * with a status code of `NOT_FOUND`.
   * 
   * @param userId ID of the user whose details are being requested.
   * 
   * @returns a `ResponseEntity` object with a status of `OK` and the user details as
   * its body.
   * 
   * * `ResponseEntity<GetUserDetailsResponseUser>` represents an entity with a response
   * body of type `GetUserDetailsResponseUser`.
   * * `getUserDetails(String userId)` is the method signature for receiving a user ID
   * as input and returning a response entity.
   * * `log.trace("Received request to get details of user with Id[{}]", userId)` logs
   * a trace message indicating that the function has received a request for user details
   * with the provided user ID.
   * * `userService.getUserDetails(userId)` is called to retrieve the user details using
   * the `userService` object, passing in the user ID as an argument.
   * * `map(function)` applies the given mapping function to the response body of the
   * `userService.getUserDetails()` call, transforming it into a new response entity.
   * * `map(response -> ResponseEntity.status(HttpStatus.OK).body(response))` creates
   * a new response entity with a status code of `HttpStatus.OK` and the transformed
   * response body as its body.
   * * `orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build())` provides
   * an alternative response entity with a status code of `HttpStatus.NOT_FOUND` if the
   * original call to `userService.getUserDetails()` fails or returns a non-OK response.
   */
  @Override
  public ResponseEntity<GetUserDetailsResponseUser> getUserDetails(String userId) {
    log.trace("Received request to get details of user with Id[{}]", userId);

    return userService.getUserDetails(userId)
        .map(userApiMapper::userDtoToGetUserDetailsResponse)
        .map(response -> ResponseEntity.status(HttpStatus.OK).body(response))
        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());
  }

  /**
   * processes password reset requests. It checks the input action and performs
   * corresponding actions, such as requesting a reset password or resetting it directly.
   * If successful, it returns an `OK` response entity; otherwise, it returns a
   * `BAD_REQUEST` response entity.
   * 
   * @param action password action to be performed, with possible values of `FORGOT`
   * or `RESET`, which determine the corresponding password reset functionality.
   * 
   * @param forgotPasswordRequest Forgot Password Request object containing the user's
   * email address and other information required to reset the password.
   * 
   * * `@NotNull`: The `action` parameter must not be null.
   * * `@Valid`: The `forgotPasswordRequest` object must be valid according to its schema.
   * * `@RequestBody`: The `forgotPasswordRequest` object is passed as a request body
   * in the HTTP request.
   * * `ForgotPasswordRequest`: A class that contains properties for resetting or
   * recovering a user's password. Its attributes may include:
   * 	+ `email`: The user's email address for whom the password needs to be reset.
   * 	+ `password`: The user's current password (optional).
   * 	+ `newPassword`: The new password the user wants to set (optional).
   * 
   * @returns a `ResponseEntity` object with a status of `ok` or `badRequest`, depending
   * on whether the password reset was successful.
   * 
   * * `ResponseEntity`: This is an instance of the `ResponseEntity` class, which
   * represents a response to a REST API request. It contains information about the
   * status of the request and any data returned in the response body.
   * * `ok()`: This is a method of the `ResponseEntity` class that returns a response
   * with a status code of 200 (OK).
   * * `build()`: This is a method of the `ResponseEntity` class that returns a constructed
   * response entity. It takes the status code, headers, and body of the response as
   * arguments and combines them to create the final response.
   */
  @Override
  public ResponseEntity<Void> usersPasswordPost(@NotNull @Valid String action, @Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest) {
    boolean result = false;
    PasswordActionType parsedAction = PasswordActionType.valueOf(action);
    if (parsedAction == PasswordActionType.FORGOT) {
      result = true;
      userService.requestResetPassword(forgotPasswordRequest);
    } else if (parsedAction == PasswordActionType.RESET) {
      result = userService.resetPassword(forgotPasswordRequest);
    }
    if (result) {
      return ResponseEntity.ok().build();
    } else {
      return ResponseEntity.badRequest().build();
    }
  }

  /**
   * receives a user ID and a pageable parameter, it retrieves all house members for
   * that user from the houses service, maps them to a REST API response format using
   * a custom mapper, and returns a ResponseEntity with the list of house members.
   * 
   * @param userId user ID for whom the list of housemates is being requested.
   * 
   * @param pageable pagination information for retrieving the list of house members,
   * allowing for efficient and flexible retrieval of a subset of the total number of
   * house members.
   * 
   * * `userId`: The ID of the user for whom the housemembers are being listed (string)
   * * `pageable`: A pageable object representing the pagination parameters for the
   * list request (Pageable)
   * 
   * @returns a `ListHouseMembersResponse` object containing the list of members for
   * all houses of the specified user.
   * 
   * * `ResponseEntity<ListHouseMembersResponse>`: This is the generic type of the
   * returned response entity, which contains a list of `HouseMemberSet` objects.
   * * `ListHouseMembersResponse`: This class represents the response to the list all
   * housemates request, containing a list of `HouseMember` objects.
   * * `members()`: This is a method that returns a list of `HouseMember` objects, which
   * are the actual entities being retrieved from the database.
   * * `ok()`: This is a method that returns a response entity with a status code of
   * 200 (OK), indicating successful retrieval of the data.
   * * `notFound()`: This is a method that returns a response entity with a status code
   * of 404 (Not Found), indicating that no housemembers could be found for the given
   * user ID.
   */
  @Override
  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {
    log.trace("Received request to list all members of all houses of user with Id[{}]", userId);

    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)
            .map(HashSet::new)
            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)
            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))
            .map(ResponseEntity::ok)
            .orElse(ResponseEntity.notFound().build());
  }

  /**
   * confirms an email address for a user by querying the user service and returning
   * an HTTP response based on the result of the confirmation process.
   * 
   * @param userId user whose email is being confirmed.
   * 
   * @param emailConfirmToken unique token sent to the user's email address for
   * confirmation of their email address.
   * 
   * @returns an `ResponseEntity` object indicating whether the email confirmation was
   * successful or not.
   * 
   * * `ResponseEntity`: This is an object representing a response entity, which contains
   * information about the result of the API call. In this case, it either returns `OK`
   * or `BAD_REQUEST`.
   * * `ok()`: This method builds an `ResponseEntity` object with a status code of `200
   * OK`, indicating that the email confirmation was successful.
   * * `badRequest()`: This method builds an `ResponseEntity` object with a status code
   * of `400 BAD_REQUEST`, indicating that there was an error in processing the email
   * confirmation request.
   */
  @Override
  public ResponseEntity<Void> confirmEmail(String userId, String emailConfirmToken) {
    boolean emailConfirmed = userService.confirmEmail(userId, emailConfirmToken);
    if(emailConfirmed) {
      return ResponseEntity.ok().build();
    } else {
      return ResponseEntity.badRequest().build();
    }
  }

  /**
   * resends an email confirmation to a user if one was previously sent and failed,
   * returning a `ResponseEntity` with a status code indicating success or failure.
   * 
   * @param userId identifier of the user for whom an email confirmation link needs to
   * be resent.
   * 
   * @returns a `ResponseEntity` object indicating whether the email confirmation resend
   * was successful or not.
   * 
   * * `ResponseEntity`: This is an instance of the `ResponseEntity` class, which
   * represents a response to a web request.
   * * `ok()`: This method builds an `ResponseEntity` object with a status code of 200
   * (OK) and a body containing the empty `Void` value.
   * * `badRequest()`: This method builds an `ResponseEntity` object with a status code
   * of 400 (Bad Request) and an empty body.
   */
  @Override
  public ResponseEntity<Void> resendConfirmEmailMail(String userId) {
    boolean emailConfirmResend = userService.resendEmailConfirm(userId);
    if(emailConfirmResend) {
      return ResponseEntity.ok().build();
    } else {
      return ResponseEntity.badRequest().build();
    }
  }
}
