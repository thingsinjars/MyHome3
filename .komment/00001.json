[
  {
    "name": "AmenityBookingItem.java",
    "path": "service/src/main/java/com/myhome/domain/AmenityBookingItem.java",
    "content": {
      "structured": {
        "description": "An entity called AmenityBookingItem that represents a booking item for an amenity. The entity has fields for the unique identifier of the booking item, the amenity associated with the booking, the start and end dates of the booking, and the user who made the booking. Additionally, the code defines named entity graphs for the amenity and user associations, and provides getters and setters for each field.",
        "items": [
          {
            "id": "afd6bcdf-4634-df84-f247-52a90ed6a915",
            "ancestors": [],
            "type": "function",
            "description": "represents a booking item for an amenity with unique identifier, amenity association, start and end dates for the booking, and user information.\nFields:\n\t- amenityBookingItemId (String): represents a unique identifier for each booking item associated with a specific amenity and user.\n\t- amenity (Amenity): represents an amenity or service associated with a booking item.\n\t- bookingStartDate (LocalDateTime): represents the date and time when a user started reserving an amenity.\n\t- bookingEndDate (LocalDateTime): represents the end time of a booking for an amenity.\n\t- bookingUser (User): represents the user who made the booking for the associated amenity item.\n\n",
            "fields": [
              {
                "name": "amenityBookingItemId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AmenityBookingItem",
                "description": "represents a unique identifier for each booking item associated with a specific amenity and user."
              },
              {
                "name": "amenity",
                "type_name": "Amenity",
                "value": null,
                "constant": false,
                "class_name": "AmenityBookingItem",
                "description": "represents an amenity or service associated with a booking item."
              },
              {
                "name": "bookingStartDate",
                "type_name": "LocalDateTime",
                "value": null,
                "constant": false,
                "class_name": "AmenityBookingItem",
                "description": "represents the date and time when a user started reserving an amenity."
              },
              {
                "name": "bookingEndDate",
                "type_name": "LocalDateTime",
                "value": null,
                "constant": false,
                "class_name": "AmenityBookingItem",
                "description": "represents the end time of a booking for an amenity."
              },
              {
                "name": "bookingUser",
                "type_name": "User",
                "value": null,
                "constant": false,
                "class_name": "AmenityBookingItem",
                "description": "represents the user who made the booking for the associated amenity item."
              }
            ],
            "name": "AmenityBookingItem",
            "location": {
              "start": 39,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 38
              }
            },
            "item_type": "class",
            "length": 33,
            "docLength": 15
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationData.java",
    "path": "service/src/main/java/com/myhome/domain/AuthenticationData.java",
    "content": {
      "structured": {
        "description": "A class called `AuthenticationData` that stores and represents authentication data for a user in a JSON Web Token (JWT) format. The class has two fields: `jwtToken`, which is a unique token issued to authenticated users by the system, and `userId`, which is a unique identifier for a user.",
        "items": [
          {
            "id": "f077737e-ba4f-cdb1-ad41-8ca0d3ecc5f5",
            "ancestors": [],
            "type": "function",
            "description": "stores and represents authentication data for a user in a JSON Web Token (JWT) format, including their unique token and identifier.\nFields:\n\t- jwtToken (String): in the AuthenticationData class represents a unique token issued by the system to authenticated users for verifying their identity.\n\t- userId (String): in the AuthenticationData class represents a unique identifier for a user.\n\n",
            "fields": [
              {
                "name": "jwtToken",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AuthenticationData",
                "description": "in the AuthenticationData class represents a unique token issued by the system to authenticated users for verifying their identity."
              },
              {
                "name": "userId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AuthenticationData",
                "description": "in the AuthenticationData class represents a unique identifier for a user."
              }
            ],
            "name": "AuthenticationData",
            "location": {
              "start": 15,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 5,
                "end": 14
              }
            },
            "item_type": "class",
            "length": 6,
            "docLength": 9
          }
        ]
      }
    }
  },
  {
    "name": "BaseEntity.java",
    "path": "service/src/main/java/com/myhome/domain/BaseEntity.java",
    "content": {
      "structured": {
        "description": "A base class called `BaseEntity` that serves as a superclass for all JPA entities. The class has an automatically generated unique identifier called `id`, which is assigned by the database using the `IDENTITY` strategy. The class also includes annotations for serialization, no-args constructor, all-args constructor, and equals and hash code methods.",
        "items": [
          {
            "id": "f8790f13-0baa-6fb9-5a4f-9f240dcc1b0c",
            "ancestors": [],
            "type": "function",
            "description": "acts as a base class for all JPA Entities and provides an identity id field through its @Id annotation with GenerationType.IDENTITY strategy.\nFields:\n\t- id (Long): in the BaseEntity class is an automatically generated unique identifier assigned by the database using the IDENTITY strategy.\n\n",
            "fields": [
              {
                "name": "id",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "BaseEntity",
                "description": "in the BaseEntity class is an automatically generated unique identifier assigned by the database using the IDENTITY strategy."
              }
            ],
            "name": "BaseEntity",
            "location": {
              "start": 39,
              "insert": 32,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 31,
                "end": 38
              }
            },
            "item_type": "class",
            "length": 10,
            "docLength": 7
          }
        ]
      }
    }
  },
  {
    "name": "Community.java",
    "path": "service/src/main/java/com/myhome/domain/Community.java",
    "content": {
      "structured": {
        "description": "An `Entity` class called `Community` that represents a valid user in a service. The class has several fields and methods for managing admins, houses, and amenities associated with each community. The code uses various packages such as Lombok, JPA, and Apache License.",
        "items": [
          {
            "id": "55a52425-4707-36ad-ab4a-b76f29d28851",
            "ancestors": [],
            "type": "function",
            "description": "represents a valid user in the service with attributes for name, community ID, district, and set of admins, houses, and amenities linked through various relationships.\nFields:\n\t- admins (Set<User>): represents a set of users who are administrators of the community, managed through a many-to-many relationship with the User entity.\n\t- houses (Set<CommunityHouse>): in the Community class represents a set of houses associated with each community entity, where each house is linked to its corresponding community through an optional one-to-one relationship.\n\t- name (String): represents a unique identifier for a specific community, with no additional information provided beyond what is explicitly stated in the code snippet.\n\t- communityId (String): represents a unique identifier for each community instance in the service.\n\t- district (String): represents a geographical area where the community is located.\n\t- amenities (Set<Amenity>): in the Community class represents a set of Amenity objects related to the community, with each Amenity object having a reference to the community it belongs to.\n\n",
            "fields": [
              {
                "name": "admins",
                "type_name": "Set<User>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "Community",
                "description": "represents a set of users who are administrators of the community, managed through a many-to-many relationship with the User entity."
              },
              {
                "name": "houses",
                "type_name": "Set<CommunityHouse>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "Community",
                "description": "in the Community class represents a set of houses associated with each community entity, where each house is linked to its corresponding community through an optional one-to-one relationship."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Community",
                "description": "represents a unique identifier for a specific community, with no additional information provided beyond what is explicitly stated in the code snippet."
              },
              {
                "name": "communityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Community",
                "description": "represents a unique identifier for each community instance in the service."
              },
              {
                "name": "district",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Community",
                "description": "represents a geographical area where the community is located."
              },
              {
                "name": "amenities",
                "type_name": "Set<Amenity>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "Community",
                "description": "in the Community class represents a set of Amenity objects related to the community, with each Amenity object having a reference to the community it belongs to."
              }
            ],
            "name": "Community",
            "location": {
              "start": 55,
              "insert": 39,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 38,
                "end": 54
              }
            },
            "item_type": "class",
            "length": 43,
            "docLength": 16
          }
        ]
      }
    }
  },
  {
    "name": "CommunityHouse.java",
    "path": "service/src/main/java/com/myhome/domain/CommunityHouse.java",
    "content": {
      "structured": {
        "description": "An entity called CommunityHouse, representing a house within a community with unique ID and name, and many members and amenities associated with it. The code uses Lombok and JPA annotations to define the fields and relationships between entities.",
        "items": [
          {
            "id": "603198dc-68fa-7c90-6946-b6524ac0a0c0",
            "ancestors": [],
            "type": "function",
            "description": "represents a house within a community with unique ID and name and has many members and amenities associated with it.\nFields:\n\t- community (Community): in the CommunityHouse class represents an object of type Community.\n\t- name (String): represents a unique identifier for each CommunityHouse entity.\n\t- houseId (String): in the CommunityHouse class represents a unique identifier for each household within the community.\n\t- houseMembers (Set<HouseMember>): in the CommunityHouse class represents a set of entities related to the community house through a many-to-one relationship, where each member represents an individual residing in the house.\n\t- amenities (Set<Amenity>): in the CommunityHouse class represents a set of additional features or services available at the community house.\n\n",
            "fields": [
              {
                "name": "community",
                "type_name": "Community",
                "value": null,
                "constant": false,
                "class_name": "CommunityHouse",
                "description": "in the CommunityHouse class represents an object of type Community."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityHouse",
                "description": "represents a unique identifier for each CommunityHouse entity."
              },
              {
                "name": "houseId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityHouse",
                "description": "in the CommunityHouse class represents a unique identifier for each household within the community."
              },
              {
                "name": "houseMembers",
                "type_name": "Set<HouseMember>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "CommunityHouse",
                "description": "in the CommunityHouse class represents a set of entities related to the community house through a many-to-one relationship, where each member represents an individual residing in the house."
              },
              {
                "name": "amenities",
                "type_name": "Set<Amenity>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "CommunityHouse",
                "description": "in the CommunityHouse class represents a set of additional features or services available at the community house."
              }
            ],
            "name": "CommunityHouse",
            "location": {
              "start": 52,
              "insert": 36,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 35,
                "end": 51
              }
            },
            "item_type": "class",
            "length": 35,
            "docLength": 16
          }
        ]
      }
    }
  },
  {
    "name": "HouseMember.java",
    "path": "service/src/main/java/com/myhome/domain/HouseMember.java",
    "content": {
      "structured": {
        "description": "A `HouseMember` entity with fields for memberId, houseMemberDocument, name, and communityHouse. The entity is annotated with various annotations such as `@Entity`, `@AllArgsConstructor`, `@NoArgsConstructor`, `@Data`, `@EqualsAndHashCode`, and `@With`. These annotations indicate that the class should be treated as an entity, should have all constructor arguments provided, should not have any default values, should implement equals and hash code methods, and should include certain fields. The `HouseMember` class also extends `BaseEntity`, which is a superclass for entities in the Java Persistence API.",
        "items": [
          {
            "id": "a13d0abc-dc75-d3ac-9246-e1348cd357bf",
            "ancestors": [],
            "type": "function",
            "description": "represents an individual member of a house with unique identification and relationship to a community house through its memberId.\nFields:\n\t- memberId (String): in the HouseMember class represents a unique identifier for each member of a community house.\n\t- houseMemberDocument (HouseMemberDocument): represents a document related to a member's membership in a community house.\n\t- name (String): in the HouseMember class represents a string value of a person's name associated with a particular community house.\n\t- communityHouse (CommunityHouse): represents a reference to a CommunityHouse object in the HouseMember class.\n\n",
            "fields": [
              {
                "name": "memberId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "HouseMember",
                "description": "in the HouseMember class represents a unique identifier for each member of a community house."
              },
              {
                "name": "houseMemberDocument",
                "type_name": "HouseMemberDocument",
                "value": null,
                "constant": false,
                "class_name": "HouseMember",
                "description": "represents a document related to a member's membership in a community house."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "HouseMember",
                "description": "in the HouseMember class represents a string value of a person's name associated with a particular community house."
              },
              {
                "name": "communityHouse",
                "type_name": "CommunityHouse",
                "value": null,
                "constant": false,
                "class_name": "HouseMember",
                "description": "represents a reference to a CommunityHouse object in the HouseMember class."
              }
            ],
            "name": "HouseMember",
            "location": {
              "start": 41,
              "insert": 30,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 29,
                "end": 40
              }
            },
            "item_type": "class",
            "length": 22,
            "docLength": 11
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberDocument.java",
    "path": "service/src/main/java/com/myhome/domain/HouseMemberDocument.java",
    "content": {
      "structured": {
        "description": "A class called `HouseMemberDocument` that represents a document associated with a member of a house. The class has fields for the document's filename and binary content, which are stored in separate columns in a database using JPA (Java Persistence API). The class also uses Lombok to automatically generate getters and setters for the fields, as well as implementations of equals, hashCode, and serialVersionUID.",
        "items": [
          {
            "id": "1d1c1c38-858f-b19f-7b4c-bbf71214fd53",
            "ancestors": [],
            "type": "function",
            "description": "represents a unique document belonging to a member of a house with binary content.\nFields:\n\t- documentFilename (String): represents a unique filename for a document associated with a member of a house.\n\t- documentContent (byte[]): is an array of bytes with a default size of zero bytes.\n\n",
            "fields": [
              {
                "name": "documentFilename",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "HouseMemberDocument",
                "description": "represents a unique filename for a document associated with a member of a house."
              },
              {
                "name": "documentContent",
                "type_name": "byte[]",
                "value": "new byte[0]",
                "constant": false,
                "class_name": "HouseMemberDocument",
                "description": "is an array of bytes with a default size of zero bytes."
              }
            ],
            "name": "HouseMemberDocument",
            "location": {
              "start": 36,
              "insert": 27,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 26,
                "end": 35
              }
            },
            "item_type": "class",
            "length": 14,
            "docLength": 9
          }
        ]
      }
    }
  },
  {
    "name": "PasswordActionType.java",
    "path": "service/src/main/java/com/myhome/domain/PasswordActionType.java",
    "content": {
      "structured": {
        "description": "An enum PasswordActionType with two constants: FORGOT and RESET.",
        "items": []
      }
    }
  },
  {
    "name": "Payment.java",
    "path": "service/src/main/java/com/myhome/domain/Payment.java",
    "content": {
      "structured": {
        "description": "An entity called Payment that represents a payment made by a user to a HouseMember. The entity has fields for payment ID, charge amount, type, description, recurring status, and due date, as well as relationships with the admin and member entities.",
        "items": [
          {
            "id": "26db27bb-7742-e881-3d4b-50afbc0db842",
            "ancestors": [],
            "type": "function",
            "description": "represents an entity for a payment made by a User to a HouseMember, with fields for payment ID, charge amount, type, description, recurring status, and due date, as well as relationships with the admin and member entities.\nFields:\n\t- paymentId (String): represents a unique identifier for each payment made by a user.\n\t- charge (BigDecimal): in the Payment class represents an amount of money to be paid by a user or member.\n\t- type (String): represents the category of the payment, such as \"electricity bill\", \"house rent\", or \"water charge\".\n\t- description (String): in the Payment class represents a brief textual description of the payment, possibly including information about the type of charge or the date it was due.\n\t- recurring (boolean): in the Payment entity represents whether a payment is recurring or not.\n\t- dueDate (LocalDate): represents the date on which a payment is due to be made.\n\t- admin (User): represents a user who made a payment.\n\t- member (HouseMember): in the Payment class represents an association between a payment and a house member.\n\n",
            "fields": [
              {
                "name": "paymentId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "represents a unique identifier for each payment made by a user."
              },
              {
                "name": "charge",
                "type_name": "BigDecimal",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "in the Payment class represents an amount of money to be paid by a user or member."
              },
              {
                "name": "type",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "represents the category of the payment, such as \"electricity bill\", \"house rent\", or \"water charge\"."
              },
              {
                "name": "description",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "in the Payment class represents a brief textual description of the payment, possibly including information about the type of charge or the date it was due."
              },
              {
                "name": "recurring",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "in the Payment entity represents whether a payment is recurring or not."
              },
              {
                "name": "dueDate",
                "type_name": "LocalDate",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "represents the date on which a payment is due to be made."
              },
              {
                "name": "admin",
                "type_name": "User",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "represents a user who made a payment."
              },
              {
                "name": "member",
                "type_name": "HouseMember",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "in the Payment class represents an association between a payment and a house member."
              }
            ],
            "name": "Payment",
            "location": {
              "start": 57,
              "insert": 35,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 34,
                "end": 56
              }
            },
            "item_type": "class",
            "length": 23,
            "docLength": 22
          }
        ]
      }
    }
  },
  {
    "name": "SecurityToken.java",
    "path": "service/src/main/java/com/myhome/domain/SecurityToken.java",
    "content": {
      "structured": {
        "description": "A `SecurityToken` class that represents a secure token with unique identifier, creation and expiry dates, and an owner. The class uses Lombok for automated generation of getters and setters, and includes columns for token type, token string, creation date, expiry date, and isUsed flag, as well as a many-to-one relationship with a user.",
        "items": [
          {
            "id": "4e50d047-1cc0-b891-bc45-2189bd480052",
            "ancestors": [],
            "type": "function",
            "description": "represents a secure token with unique identifier, creation and expiry dates, owner, and flags indicating whether it has been used or not.\nFields:\n\t- tokenType (SecurityTokenType): represents an enumerated type indicating the category of security token, such as \"access token\" or \"refresh token\".\n\t- token (String): in the SecurityToken class represents a unique identifier for a security token with metadata including creation and expiry dates, and an owner.\n\t- creationDate (LocalDate): represents the date when the security token was created.\n\t- expiryDate (LocalDate): represents the date after which the security token becomes invalid or no longer usable.\n\t- isUsed (boolean): indicates whether a security token has been used or not.\n\t- tokenOwner (User): represents a user who owns or has access to the security token in question.\n\n",
            "fields": [
              {
                "name": "tokenType",
                "type_name": "SecurityTokenType",
                "value": null,
                "constant": false,
                "class_name": "SecurityToken",
                "description": "represents an enumerated type indicating the category of security token, such as \"access token\" or \"refresh token\"."
              },
              {
                "name": "token",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "SecurityToken",
                "description": "in the SecurityToken class represents a unique identifier for a security token with metadata including creation and expiry dates, and an owner."
              },
              {
                "name": "creationDate",
                "type_name": "LocalDate",
                "value": null,
                "constant": false,
                "class_name": "SecurityToken",
                "description": "represents the date when the security token was created."
              },
              {
                "name": "expiryDate",
                "type_name": "LocalDate",
                "value": null,
                "constant": false,
                "class_name": "SecurityToken",
                "description": "represents the date after which the security token becomes invalid or no longer usable."
              },
              {
                "name": "isUsed",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "SecurityToken",
                "description": "indicates whether a security token has been used or not."
              },
              {
                "name": "tokenOwner",
                "type_name": "User",
                "value": null,
                "constant": false,
                "class_name": "SecurityToken",
                "description": "represents a user who owns or has access to the security token in question."
              }
            ],
            "name": "SecurityToken",
            "location": {
              "start": 33,
              "insert": 15,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 14,
                "end": 32
              }
            },
            "item_type": "class",
            "length": 19,
            "docLength": 18
          }
        ]
      }
    }
  },
  {
    "name": "SecurityTokenType.java",
    "path": "service/src/main/java/com/myhome/domain/SecurityTokenType.java",
    "content": {
      "structured": {
        "description": "An enumeration class `SecurityTokenType` with two member variables `RESET` and `EMAIL_CONFIRM`.",
        "items": []
      }
    }
  },
  {
    "name": "User.java",
    "path": "service/src/main/java/com/myhome/domain/User.java",
    "content": {
      "structured": {
        "description": "An entity class called `User` that represents a valid user in a service. The class has attributes for name, userId, email, and encrypted password, as well as relationships for communities and userTokens. The code also uses various annotations such as `@AllArgsConstructor`, `@Getter`, `@NoArgsConstructor`, `@Data`, `@EqualsAndHashCode`, `@Entity`, `@With`, `@NamedEntityGraphs` to specify the entity's properties and relationships.",
        "items": [
          {
            "id": "edb9a640-03ab-c5b8-e446-9ed290723c0d",
            "ancestors": [],
            "type": "function",
            "description": "represents a valid user in a service with attributes for name, userId, email, and encrypted password, as well as relationships for communities and userTokens.\nFields:\n\t- name (String): represents a user's username or handle within an application or service.\n\t- userId (String): represents a unique identifier for a valid user in the service.\n\t- email (String): in the User class represents a string value that identifies a user's email address within an application or service.\n\t- emailConfirmed (boolean): indicates whether an email address associated with the User entity has been confirmed.\n\t- encryptedPassword (String): in the User class represents a string value that encapsulates an encrypted version of the user's password for security purposes.\n\t- communities (Set<Community>): in the User class represents a set of Community objects related to the User entity through a many-to-many relationship.\n\t- userTokens (Set<SecurityToken>): in the User class represents a set of SecurityToken objects associated with the user entity through a one-to-many relationship, where the mappedBy attribute \"tokenOwner\" provides access to the related SecurityToken objects.\n\n",
            "fields": [
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "represents a user's username or handle within an application or service."
              },
              {
                "name": "userId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "represents a unique identifier for a valid user in the service."
              },
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "in the User class represents a string value that identifies a user's email address within an application or service."
              },
              {
                "name": "emailConfirmed",
                "type_name": "boolean",
                "value": "false",
                "constant": false,
                "class_name": "User",
                "description": "indicates whether an email address associated with the User entity has been confirmed."
              },
              {
                "name": "encryptedPassword",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "in the User class represents a string value that encapsulates an encrypted version of the user's password for security purposes."
              },
              {
                "name": "communities",
                "type_name": "Set<Community>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "User",
                "description": "in the User class represents a set of Community objects related to the User entity through a many-to-many relationship."
              },
              {
                "name": "userTokens",
                "type_name": "Set<SecurityToken>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "User",
                "description": "in the User class represents a set of SecurityToken objects associated with the user entity through a one-to-many relationship, where the mappedBy attribute \"tokenOwner\" provides access to the related SecurityToken objects."
              }
            ],
            "name": "User",
            "location": {
              "start": 58,
              "insert": 43,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 42,
                "end": 57
              }
            },
            "item_type": "class",
            "length": 37,
            "docLength": 15
          }
        ]
      }
    }
  },
  {
    "name": "AmenityBookingItemRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/AmenityBookingItemRepository.java",
    "content": {
      "structured": {
        "description": "An interface called `AmenityBookingItemRepository`, which is a spring data jpa repository for interacting with the database to find amenity booking items by their IDs. The interface provides methods such as `findByAmenityBookingItemId()` to retrieve a specific amenity booking item by its ID.",
        "items": [
          {
            "id": "066b7537-da81-1d8f-9741-991fc512ca74",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for interacting with the database to find amenity booking items by their IDs using JPA repository functions.",
            "name": "AmenityBookingItemRepository",
            "location": {
              "start": 11,
              "insert": 7,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 6,
                "end": 10
              }
            },
            "item_type": "interface",
            "length": 3,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "AmenityRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/AmenityRepository.java",
    "content": {
      "structured": {
        "description": "An interface called `AmenityRepository` that provides methods for retrieving Optional<Amenity> objects representing amenities based on their amenityId using Spring Data JPA queries and entity graphs. The interface includes two methods: `findByAmenityIdWithCommunity()` and `findByAmenityId()`, both of which use EntityGraph and Query annotations to define the query and retrieve the appropriate data from the database.",
        "items": [
          {
            "id": "755c57ca-c2f6-5b93-574d-49893c3e69be",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for retrieving Optional<Amenity> objects representing amenities based on their amenityId using Spring Data JPA queries and entity graphs.",
            "name": "AmenityRepository",
            "location": {
              "start": 30,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 29
              }
            },
            "item_type": "interface",
            "length": 8,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "CommunityHouseRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/CommunityHouseRepository.java",
    "content": {
      "structured": {
        "description": "A CommunityHouseRepository interface for interacting with the CommunityHouse entity in a Spring Data JPA environment. The interface provides methods for finding and deleting individual CommunityHouses or communities of CommunityHouses by their respective IDs, using queries and entity graphs to optimize performance. Additionally, it offers paging and sorting functionality for efficient data retrieval.",
        "items": [
          {
            "id": "19e247d6-fcf0-38ab-dc42-12280c79fe0c",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for interacting with the CommunityHouse entity in a Spring Data JPA environment.",
            "name": "CommunityHouseRepository",
            "location": {
              "start": 34,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 28,
                "end": 33
              }
            },
            "item_type": "interface",
            "length": 18,
            "docLength": 5
          }
        ]
      }
    }
  },
  {
    "name": "CommunityRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/CommunityRepository.java",
    "content": {
      "structured": {
        "description": "A CommunityRepository interface that provides methods for querying and manipulating Community objects in a Spring Data JPA environment. The interface implements the PagingAndSortingRepository interface and provides additional methods for finding Community objects by communityId using EntityGraph queries. These queries allow for retrieving related houses, admins, and amenities for a given Community object. The existsByCommunityId method returns a boolean indicating whether a Community object with the given communityId exists in the database.",
        "items": [
          {
            "id": "0540f31a-e2c5-529d-1a4b-9bfb68edd88a",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for querying and manipulating Community objects in a Spring Data JPA environment.",
            "name": "CommunityRepository",
            "location": {
              "start": 31,
              "insert": 27,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 26,
                "end": 30
              }
            },
            "item_type": "interface",
            "length": 19,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberDocumentRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/HouseMemberDocumentRepository.java",
    "content": {
      "structured": {
        "description": "An interface `HouseMemberDocumentRepository` that implements `JpaRepository`, allowing for the management of `HouseMemberDocuments` using Spring Data JPA. The interface provides the standard CRUD (create, read, update, delete) methods for working with the domain object `HouseMemberDocument`.",
        "items": [
          {
            "id": "08f4116b-1990-9c87-084b-7ab938afe415",
            "ancestors": [],
            "type": "function",
            "description": "defines a JpaRepository interface for managing HouseMemberDocuments using Spring Data JPA.",
            "name": "HouseMemberDocumentRepository",
            "location": {
              "start": 26,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 21,
                "end": 25
              }
            },
            "item_type": "interface",
            "length": 2,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/HouseMemberRepository.java",
    "content": {
      "structured": {
        "description": "An interface for a HouseMemberRepository in Spring Data. It provides methods for querying and manipulating HouseMembers, including finding members by ID, finding all members in a community house by ID, and finding all admins in a community house by user ID.",
        "items": [
          {
            "id": "1f1f8287-760a-429a-7649-2037f5799eff",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for querying and manipulating HouseMembers in a Spring Data repository context, including finding individual members by ID and listing all members within a specific community or group.",
            "name": "HouseMemberRepository",
            "location": {
              "start": 29,
              "insert": 25,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 24,
                "end": 28
              }
            },
            "item_type": "interface",
            "length": 8,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "PaymentRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/PaymentRepository.java",
    "content": {
      "structured": {
        "description": "An interface for interacting with payments in a database using Spring Data JPA. The PaymentRepository interface provides methods for finding and deleting payments based on their IDs.",
        "items": [
          {
            "id": "d823dfe5-62a5-79be-aa47-ba05f324176c",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for interacting with payments in a database using Spring Data JPA, including finding and deleting specific payments by ID.",
            "name": "PaymentRepository",
            "location": {
              "start": 26,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 21,
                "end": 25
              }
            },
            "item_type": "interface",
            "length": 5,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "SecurityTokenRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/SecurityTokenRepository.java",
    "content": {
      "structured": {
        "description": "An interface called `SecurityTokenRepository` that extends the `JpaRepository` interface and provides a way to interact with `SecurityTokens` in a Spring Data JPA environment. The interface defines one method, `findById`, which retrieves a `SecurityToken` object by its ID.",
        "items": [
          {
            "id": "ba8d8b4c-abb7-14b0-9b44-313bac76d3da",
            "ancestors": [],
            "type": "function",
            "description": "extends the JpaRepository interface and provides a way to interact with SecurityTokens in a Spring Data JPA environment.",
            "name": "SecurityTokenRepository",
            "location": {
              "start": 10,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 5,
                "end": 9
              }
            },
            "item_type": "interface",
            "length": 2,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "UserRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/UserRepository.java",
    "content": {
      "structured": {
        "description": "A UserRepository interface that provides methods for interacting with users in a Spring Data JPA environment. The interface implements the JpaRepository interface and provides additional methods for finding users by email or user ID, and querying users based on community IDs. The code uses the EntityGraph annotation to specify the graph structure of the User entity, which allows for more efficient queries. The interfaces use the Query annotation to define custom SQL queries for finding users with specific characteristics, such as a user ID or email address.",
        "items": [
          {
            "id": "e8e71683-d080-0692-2f49-c9f3707457f5",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for finding and querying users in a Spring Data JPA environment, including by email or user ID, and with communities or tokens.",
            "name": "UserRepository",
            "location": {
              "start": 34,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 28,
                "end": 33
              }
            },
            "item_type": "interface",
            "length": 21,
            "docLength": 5
          }
        ]
      }
    }
  },
  {
    "name": "AppUserDetailsService.java",
    "path": "service/src/main/java/com/myhome/security/AppUserDetailsService.java",
    "content": {
      "structured": {
        "description": "An `AppUserDetailsService` class that implements the `UserDetailsService` interface in Spring Security. The service provides a custom implementation for loading users based on their usernames. It retrieves a user from the repository and returns a `User` object with the email address, encrypted password, and other properties set to true. The service also defines a `getUserDetailsByUsername` method that maps a `User` entity to a `UserDto` object and returns it.",
        "items": [
          {
            "id": "3c000763-db98-8bbd-284f-89802fc870ef",
            "ancestors": [],
            "type": "function",
            "description": "is a custom implementation of Spring Security's UserDetailsService interface. It provides methods to load a user by their username and to retrieve the user's details by their email address. The class maps the retrieved user entity from the repository to a UserDto object for use in the application.",
            "name": "AppUserDetailsService",
            "location": {
              "start": 36,
              "insert": 33,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 32,
                "end": 35
              }
            },
            "item_type": "class",
            "length": 86,
            "docLength": 3
          },
          {
            "id": "f828d7f5-187a-7f9e-b745-fbf5610cbcc2",
            "ancestors": [
              "3c000763-db98-8bbd-284f-89802fc870ef"
            ],
            "type": "function",
            "description": "loads a user by their username and returns a `UserDetails` object containing the user's email, encrypted password, and other authentication-related information.",
            "params": [
              {
                "name": "username",
                "type_name": "String",
                "description": "username for which the user details are being loaded.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "User",
              "description": "a `UserDetails` object containing user information and authentication details.\n\n* `email`: The email address of the user.\n* `encryptedPassword`: The encrypted password for the user.\n* `isActived`: A boolean indicating whether the user is active (true) or not (false).\n* `isLocked`: A boolean indicating whether the user is locked (true) or not (false).\n* `isAdmin`: A boolean indicating whether the user is an administrator (true) or not (false).\n* `groups`: An empty list, as there are no groups associated with the user.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }\n",
              "description": ""
            },
            "name": "loadUserByUsername",
            "location": {
              "start": 73,
              "insert": 42,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 41,
                "end": 72
              }
            },
            "item_type": "method",
            "length": 16,
            "docLength": 31
          },
          {
            "id": "462e1f06-ce11-deb5-0c4d-9b578a5f8e6c",
            "ancestors": [
              "3c000763-db98-8bbd-284f-89802fc870ef"
            ],
            "type": "function",
            "description": "retrieves a user's details from the repository and maps them to a `UserDto`. If the user is not found, it throws a `UsernameNotFoundException`.",
            "params": [
              {
                "name": "username",
                "type_name": "String",
                "description": "username for which the user details are to be retrieved.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "UserDto",
              "description": "a `UserDto` object containing the details of the user found in the database.\n\n* The input `username` is used to retrieve a `com.myhome.domain.User` object from the `userRepository`.\n* If the `User` object is null, a `UsernameNotFoundException` is thrown.\n* The `User` object is then mapped to a `UserDto` object using the `userMapper`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class MyClass{\n    public static void main(String[] args){\n        AppUserDetailsService service = new AppUserDetailsService();\n        UserDto userDto = service.getUserDetailsByUsername(\"example@email.com\");\n    }\n}\n",
              "description": "\nThis code would return a `UserDto` object containing details of the user with the specified username."
            },
            "name": "getUserDetailsByUsername",
            "location": {
              "start": 114,
              "insert": 90,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 89,
                "end": 113
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 24
          }
        ]
      }
    }
  },
  {
    "name": "CommunityAuthorizationFilter.java",
    "path": "service/src/main/java/com/myhome/security/CommunityAuthorizationFilter.java",
    "content": {
      "structured": {
        "description": "A custom filter in Spring Security called CommunityAuthorizationFilter that filters incoming HTTP requests based on a pattern and user authentication. The filter checks if the URL matches a provided pattern and if the user is not an admin, it sets the response status to SC_UNAUTHORIZED and returns. If the URL matches and the user is an admin, it delegates to the super method for further filtering. The code also includes a method isUserCommunityAdmin that determines if a user is a community admin based on their user ID and the community ID in the request URL.",
        "items": [
          {
            "id": "baa5ae6c-ddff-0bb4-114e-d56f99c73c87",
            "ancestors": [],
            "type": "function",
            "description": "is responsible for filtering incoming HTTP requests based on a pattern and user authentication. The filter checks whether the URL matches a specific pattern and if the user is not an administrator of a community, it sets the response status to SC_UNAUTHORIZED and returns. If the user is an administrator, the filter delegates to the super method for further filtering.",
            "name": "CommunityAuthorizationFilter",
            "location": {
              "start": 22,
              "insert": 19,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 18,
                "end": 21
              }
            },
            "item_type": "class",
            "length": 113,
            "docLength": 3
          },
          {
            "id": "39d64e6d-ffa7-7b8e-cc44-80841367aa9c",
            "ancestors": [
              "baa5ae6c-ddff-0bb4-114e-d56f99c73c87"
            ],
            "type": "function",
            "description": "filters incoming HTTP requests based on a pattern and checks if the user is an admin using a method `isUserCommunityAdmin`. If the user is not an admin, it responds with a status code of `HttpServletResponse.SC_UNAUTHORIZED`.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request being processed by the filter.\n\n* `getRequestURI()`: returns the request URI.\n* `matcher()`: returns a `Matcher` object that can be used to check if the request URL matches a pattern.\n* `isUserCommunityAdmin()`: a method that checks whether the current user is an administrator of a specific community.\n\nThese properties are used in the function to filter the requests based on the admin patterns and permissions.",
                "complex_type": true
              },
              {
                "name": "response",
                "type_name": "HttpServletResponse",
                "description": "ServletResponse object that is used to send the filtered response to the client.\n\n* `HttpServletResponse`: This is an instance of a class that represents a web response in Java. It has several attributes and methods related to handling HTTP requests and responses, such as status code, content type, and output stream.\n* `status`: A integer attribute representing the status code returned by the server. The possible values are between 100 and 599, inclusive.\n* `contentType`: An instance of a class representing the MIME type of the response content. It can be used to determine the format of the data sent back to the client.\n* `outputStream`: An instance of a class representing an output stream that can be used to send the response content back to the client.",
                "complex_type": true
              },
              {
                "name": "chain",
                "type_name": "FilterChain",
                "description": "next filter in the chain that should be executed after the current filter has completed its processing.\n\n* `request`: The original HTTP request sent by the client, which is passed through to the next filter in the chain.\n* `response`: The HTTP response generated by the previous filter in the chain, which is then processed by this filter.\n* `chain`: An instance of `FilterChain`, representing the sequence of filters that are applied to the incoming request. This property can be accessed and manipulated within the filter function.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                    FilterChain chain) throws IOException, ServletException {\n\n        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());\n\n        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            return;\n        }\n\n        super.doFilterInternal(request, response, chain);\n    }\n",
              "description": ""
            },
            "name": "doFilterInternal",
            "location": {
              "start": 78,
              "insert": 34,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 33,
                "end": 77
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 44
          },
          {
            "id": "543af314-ce06-0db9-0048-10113a04bec5",
            "ancestors": [
              "baa5ae6c-ddff-0bb4-114e-d56f99c73c87"
            ],
            "type": "function",
            "description": "verifies if a user is an administrator of a community based on their ID and the community ID in the request URL. It returns `true` if the user is an admin, otherwise returns `false`.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request that triggered the function execution and provides the community ID from the request URI.\n\n* `request`: An instance of `HttpServletRequest`, which contains information about the HTTP request received by the server.\n\t+ `getRequestURI()`: Returns the complete request URI, including any query string or fragment component.\n\t+ `split(\"/\")` : Splits the request URI into a array of substrings using the `/` character as the delimiter. The second element in the array is the community ID.\n* `SecurityContextHolder`: An instance of `SecurityContextHolder`, which provides information about the security context of the current request, including the authenticated user and their role.\n* `getAuthentication()`: Returns an instance of `Authentication`, which contains information about the authenticated user, including their principal (e.g., username) and any additional details (e.g., authentication method).\n* `getPrincipal()`: Returns the principal (e.g., username) of the authenticated user.\n* `communityService`: An instance of `CommunityService`, which provides methods for interacting with the community database.\n* `findCommunityAdminsById()`: Finds a list of community admins by their ID, using a `Optional` container to indicate whether the operation was successful. If the list is present, it contains a list of `User` objects representing the community admins.\n* `stream()`: Returns a stream of `User` objects from the list of community admins, which can be used for further filtering or manipulation.\n* `filter()`: Filters the stream of `User` objects to select only those that have the same user ID as the authenticated user.\n* `findFirst()`: Finds the first `User` object from the filtered stream that satisfies the condition, or returns `null` if no such object exists.\n* `orElse()`: Returns the value provided as an alternative to `null`, if the `findFirst()` operation fails.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the current user is an administrator of the specified community.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "// Example usage of isUserCommunityAdmin()\nboolean adminStatus = isUserCommunityAdmin(request);\nif (adminStatus) {\n    // do something as the current user is a community admin\n} else {\n    // do something else, such as returning an error message or redirecting to another page\n}\n",
              "description": ""
            },
            "name": "isUserCommunityAdmin",
            "location": {
              "start": 113,
              "insert": 92,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 91,
                "end": 112
              }
            },
            "item_type": "method",
            "length": 21,
            "docLength": 21
          }
        ]
      }
    }
  },
  {
    "name": "MyHomeAuthorizationFilter.java",
    "path": "service/src/main/java/com/myhome/security/MyHomeAuthorizationFilter.java",
    "content": {
      "structured": {
        "description": "A custom authentication filter named `MyHomeAuthorizationFilter` that extends the basic authentication filter class in Spring Security. The filter checks for an authorization token in the HTTP request header and decodes it using the `AppJwtEncoderDecoder` class to obtain a user ID. It then creates a `UsernamePasswordAuthenticationToken` instance with the user ID and no credentials, which is then passed through the filter chain for further processing. The code also includes a `getAuthentication()` method that retrieves an authentication token from the request header and decodes it to obtain a user ID.",
        "items": [
          {
            "id": "61a47908-7f95-b485-8945-f259253969da",
            "ancestors": [],
            "type": "function",
            "description": "is used to filter incoming HTTP requests based on an authorization token found in the request header. It retrieves an authentication token from the request header and decodes it to obtain a user ID, creating a `UsernamePasswordAuthenticationToken` instance with the user ID and no credentials. The filter then passes the request through the next stage of the filter chain for further processing.",
            "name": "MyHomeAuthorizationFilter",
            "location": {
              "start": 36,
              "insert": 33,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 32,
                "end": 35
              }
            },
            "item_type": "class",
            "length": 131,
            "docLength": 3
          },
          {
            "id": "6c7aeda1-6b48-edb9-3444-309e44fd5b81",
            "ancestors": [
              "61a47908-7f95-b485-8945-f259253969da"
            ],
            "type": "function",
            "description": "authenticates the request by checking for an authorisation token in the request header. If a token is present and matches the expected format, it sets the SecurityContextHolder with the authentication token. Otherwise, it passes the request to the next filter in the chain.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request being processed and passed through the filter chain.\n\n* `authHeaderName`: The name of the HTTP header containing the authentication token.\n* `authHeaderPrefix`: The prefix of the authentication token in the HTTP header.\n* `authHeader`: The value of the HTTP header containing the authentication token, or null if no token is present.\n* `request`: The original HTTP request deserialized by the filter chain.",
                "complex_type": true
              },
              {
                "name": "response",
                "type_name": "HttpServletResponse",
                "description": "HTTP response object that will be modified or replaced by the filter chain.\n\n* `HttpServletRequest request`: The incoming HTTP request that triggered the filter's execution.\n* `HttpServletResponse response`: The outgoing HTTP response generated by the filter.\n* `FilterChain chain`: A reference to the next filter in the pipeline, which will receive the filtered request and generate the final response.\n\nThe function then checks the authentication header of the incoming request and performs actions based on its content:\n\n* `String authHeaderName = environment.getProperty(\"authorization.token.header.name\");`: This line retrieves the name of the authorization header from an environment property.\n* `String authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");`: This line retrieves the prefix of the authorization header from an environment property.\n* `String authHeader = request.getHeader(authHeaderName);`: This line retrieves the value of the specified authorization header from the incoming request.\n* `if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {`: This line checks if the authentication header is null or does not start with the prefix specified in the environment property. If either condition is true, the chain is called with the request and response as arguments.\n* `SecurityContextHolder.getContext().setAuthentication(authentication);`: This line sets the current SecurityContext to the deserialized `UsernamePasswordAuthenticationToken` object, which was retrieved from the incoming request.\n* `chain.doFilter(request, response);`: This line calls the next filter in the pipeline with the filtered request and response as arguments.",
                "complex_type": true
              },
              {
                "name": "chain",
                "type_name": "FilterChain",
                "description": "3rd layer of the Servlet filter chain, which is the point where the filter can decide to proceed with processing the request or stop and let the next filter handle it.\n\n* `HttpServletRequest request`: The current HTTP request being processed by the filter.\n* `HttpServletResponse response`: The current HTTP response being generated by the filter.\n* `FilterChain chain`: The filter chain that the function is called with, which contains multiple filters that can be applied to the request in sequence.\n* `IOException`, `ServletException` throws`: Exceptions that can occur during the processing of the request and can be caught and handled by the filter.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class MyHomeAuthorizationFilter extends BasicAuthenticationFilter {\n    private final Environment environment;\n    private final AppJwtEncoderDecoder appJwtEncoderDecoder;\n\n    public MyHomeAuthorizationFilter(AuthenticationManager authenticationManager, \n        Environment environment, AppJwtEncoderDecoder appJwtEncoderDecoder) {\n        super(authenticationManager);\n        this.environment = environment;\n        this.appJwtEncoderDecoder = appJwtEncoderDecoder;\n    }\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, \n        HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n        String authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n        String authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n        String authHeader = request.getHeader(authHeaderName);\n        if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n            chain.doFilter(request, response);\n            return;\n        }\n\n        UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n        chain.doFilter(request, response);\n    }\n}\n",
              "description": ""
            },
            "name": "doFilterInternal",
            "location": {
              "start": 94,
              "insert": 50,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 49,
                "end": 93
              }
            },
            "item_type": "method",
            "length": 16,
            "docLength": 44
          },
          {
            "id": "be8f152f-c222-a1bb-6746-fbb27d476575",
            "ancestors": [
              "61a47908-7f95-b485-8945-f259253969da"
            ],
            "type": "function",
            "description": "takes an `HttpServletRequest` object and returns a `UsernamePasswordAuthenticationToken`. It extracts the authentication token from the `Authorization` header, decodes it using the `appJwtEncoderDecoder`, and returns a token with the user ID and no other credentials.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request that triggered the function execution and provides the authorization header containing the authentication token.\n\n* `getHeader()` returns a header value associated with the request. The property `environment.getProperty(\"authorization.token.header.name\")` specifies the name of the header field that contains the authentication token.\n* `authHeader` is the result of calling `getHeader()` on the `request`. It represents the authentication token included in the HTTP request headers.\n* `token` is a substring extracted from the `authHeader` using the value of `environment.getProperty(\"authorization.token.header.prefix\")`. This prefix is removed before decoding the JWT.\n* `appJwtEncoderDecoder` is an instance of a class that encodes and decodes JWT tokens. It is used to extract the user ID from the token.\n* `jwt.getUserId()` returns the user ID extracted from the decoded JWT token.\n* The `Collections.emptyList()` is used to create an empty list, which is returned as the value of the `UsernamePasswordAuthenticationToken`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "UsernamePasswordAuthenticationToken",
              "description": "a `UsernamePasswordAuthenticationToken` object representing the authenticated user.\n\n* The `String` variable `authHeader` represents the authorization header sent in the HTTP request.\n* The `String` variable `token` is obtained by removing the prefix provided by the environment property `authorization.token.header.prefix` from the authorization header.\n* The `AppJwt` object `jwt` is decoded from the token using the `appJwtEncoderDecoder.decode()` method and provides the user ID in its `getUserId()` method.\n* The `UsernamePasswordAuthenticationToken` object returned is created with the user ID as the username, a null password, and an empty list of authorities.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public void processRequest(HttpServletRequest request) {\n    UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n    if (authentication == null) {\n        // handle unauthorized access\n    } else {\n        // proceed with the request processing\n    }\n}\n",
              "description": ""
            },
            "name": "getAuthentication",
            "location": {
              "start": 150,
              "insert": 111,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 110,
                "end": 149
              }
            },
            "item_type": "method",
            "length": 16,
            "docLength": 39
          }
        ]
      }
    }
  },
  {
    "name": "WebSecurity.java",
    "path": "service/src/main/java/com/myhome/security/WebSecurity.java",
    "content": {
      "structured": {
        "description": "A WebSecurity class that sets up security features for an API, including disabling CORS and CSFR, enforcing stateful session management, and adding filters to authorize requests based on specific URLs and HTTP methods. It also uses the AppJwtEncoderDecoder to enable JWT encoder/decoder functionality.",
        "items": [
          {
            "id": "aa35f80c-485c-fe8a-ee46-261e1fb0bc86",
            "ancestors": [],
            "type": "function",
            "description": "configures security features for an API, including CORS and CSFR disablement, session management, and authorization rules based on URL paths and HTTP methods. It also adds filters to authorize requests and enables authenticated access to the API using the JWT encoder/decoder.",
            "name": "WebSecurity",
            "location": {
              "start": 39,
              "insert": 36,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 35,
                "end": 38
              }
            },
            "item_type": "class",
            "length": 127,
            "docLength": 3
          },
          {
            "id": "7f3d5c65-a587-cbaa-6c4d-73c2bf8a762b",
            "ancestors": [
              "aa35f80c-485c-fe8a-ee46-261e1fb0bc86"
            ],
            "type": "function",
            "description": "configures the security settings for an application, disabling CSRF and frame options, and enabling stateless session management. It also adds filters to authorize requests based on specific URL patterns and authentication methods.",
            "params": [
              {
                "name": "http",
                "type_name": "HttpSecurity",
                "description": "HTTP security configuration object, which is used to configure various security features such as CORS, CSFR, session management, and authorization.\n\n* `cors()` enables Cross-Origin Resource Sharing (CORS) functionality.\n* `csrf()` disables Cross-Site Request Forgery (CSRF) protection.\n* `headers()` allows for the manipulation of HTTP headers.\n* `frameOptions()` disables the display of frame options in the browser.\n* `sessionManagement()` configures session creation policies, with a policy of `STATELESS`.\n* `addFilterAfter()` adds a filter after the specified filter.\n* `getCommunityFilter()` returns a filter instance.\n\nNote that `http` is not explicitly mentioned in the code snippet provided.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\nprotected void configure(HttpSecurity http) throws Exception {\n  // Disable CORS and CSRF protection\n  http.cors().disable();\n  http.csrf().disable();\n\n  // Disable session creation for stateless endpoints\n  http.sessionManagement()\n    .sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n\n  // Add a filter to authorize requests based on JWT encoder/decoder\n  http.addFilterAfter(new MyHomeAuthorizationFilter(authenticationManager(), environment, appJwtEncoderDecoder), MyHomeAuthorizationFilter.class)\n}\n",
              "description": ""
            },
            "name": "configure",
            "location": {
              "start": 97,
              "insert": 49,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 48,
                "end": 96
              }
            },
            "item_type": "method",
            "length": 33,
            "docLength": 48
          },
          {
            "id": "c76cdf64-3f4b-c489-9f4d-308239f896b2",
            "ancestors": [
              "aa35f80c-485c-fe8a-ee46-261e1fb0bc86"
            ],
            "type": "function",
            "description": "creates a `CommunityAuthorizationFilter` instance by combining an `AuthenticationManager` and a `CommunityService`. This filter allows for community-based authorization.",
            "params": [],
            "returns": {
              "type_name": "Exception",
              "description": "an instance of the `Filter` class, which represents a community authorization filter created through the combination of an authentication manager and a community service.\n\n* The function returns an instance of `Filter`, which is a Java class that represents a filter for processing HTTP requests.\n* The `Filter` object is created by passing two arguments to its constructor: `authenticationManager()` and `communityService`.\n* The `authenticationManager()` argument is likely a reference to an instance of `AuthenticationManager`, which is responsible for handling authentication-related tasks in the application.\n* The `communityService` argument is likely a reference to an instance of `CommunityService`, which provides access to various community-related functionality in the application.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "private Filter getCommunityFilter() throws Exception {\n    return new CommunityAuthorizationFilter(authenticationManager(), communityService);\n  }\n\n// Example usage in WebSecurity class\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http.addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n}\n",
              "description": "\nThis code creates an instance of the CommunityAuthorizationFilter class and adds it as a filter after the MyHomeAuthorizationFilter class. This allows for community-related authorization to be implemented in the application."
            },
            "name": "getCommunityFilter",
            "location": {
              "start": 145,
              "insert": 131,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 130,
                "end": 144
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 14
          },
          {
            "id": "4192dc1d-cb43-7c96-184a-6165cb3c1dad",
            "ancestors": [
              "aa35f80c-485c-fe8a-ee46-261e1fb0bc86"
            ],
            "type": "function",
            "description": "sets up an Authentication Manager by defining user details service and password encoder.",
            "params": [
              {
                "name": "auth",
                "type_name": "AuthenticationManagerBuilder",
                "description": "AuthenticationManagerBuilder object, which is used to configure various aspects of the authentication process, such as user details service and password encoder.\n\n* `userDetailsService`: The user details service is not explicitly provided in the input. Therefore, it remains uninitialized.\n* `passwordEncoder`: The password encoder is initialized with a specified value.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\npublic void configure(AuthenticationManagerBuilder auth) {\n    auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);\n}\n",
              "description": "\nHere, the userDetailsService and passwordEncoder properties of the AuthenticationManagerBuilder object are set to the respective objects in this example."
            },
            "name": "configure",
            "location": {
              "start": 161,
              "insert": 149,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 148,
                "end": 160
              }
            },
            "item_type": "method",
            "length": 4,
            "docLength": 12
          }
        ]
      }
    }
  },
  {
    "name": "CommunityAuthorizationFilter.java",
    "path": "service/src/main/java/com/myhome/security/filters/CommunityAuthorizationFilter.java",
    "content": {
      "structured": {
        "description": "A custom authentication filter called `CommunityAuthorizationFilter` that filters HTTP requests based on a pattern and user authentication. The filter checks if the request URI matches a specified pattern and the user is not an administrator in a specific community, it returns a FORBIDDEN status code. Otherwise, it delegates to the superclass's `doFilterInternal` method. The filter uses the `CommunityService` class to find the list of admins for a given community ID and maps them to their user IDs before checking if the current user is an admin.",
        "items": [
          {
            "id": "cb390ce8-25f3-878b-bb4a-72118d3b854d",
            "ancestors": [],
            "type": "function",
            "description": "is used to filter HTTP requests based on a pattern and user authentication. It checks if the request URI matches a specific pattern and the user is not an administrator in a specific community, returning a FORBIDDEN status code. If the request is valid, it delegates to the superclass's `doFilterInternal` method.",
            "name": "CommunityAuthorizationFilter",
            "location": {
              "start": 20,
              "insert": 17,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 16,
                "end": 19
              }
            },
            "item_type": "class",
            "length": 130,
            "docLength": 3
          },
          {
            "id": "35be90cd-5d1c-6f83-f24d-abe2511ee6c2",
            "ancestors": [
              "cb390ce8-25f3-878b-bb4a-72118d3b854d"
            ],
            "type": "function",
            "description": "checks if the request URI matches a pattern for adding amenities and if the user is not an admin, it sets the status code to FORBIDDEN and stops the filtering process. If the condition is met, it delegates the filtering task to the superclass using `super.doFilterInternal`.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request being processed and is used to determine whether the user has access to the requested amenity.\n\n* `request.getRequestURI()` returns the request URL.\n* `matcher.find()` checks if the request URL matches the pattern in `ADD_AMENITY_REQUEST_PATTERN`.\n* `!isUserCommunityAdmin(request)` checks if the current user is an administrator of a community.\n\nThese properties are used to determine whether the request should be allowed or not.",
                "complex_type": true
              },
              {
                "name": "response",
                "type_name": "HttpServletResponse",
                "description": "HTTP response object that is being filtered by the method.\n\n* `HttpServletRequest request`: The incoming HTTP request that triggered the filter's execution.\n* `HttpServletResponse response`: The outgoing HTTP response generated by the filter.\n* `FilterChain chain`: The chain of filters that the current filter is a part of, which determines the order in which the filters are executed.",
                "complex_type": true
              },
              {
                "name": "chain",
                "type_name": "FilterChain",
                "description": "next filter in the pipeline, which is executed after the current filter.\n\n* `request`: The original HTTP request object passed to the filter chain.\n* `response`: The response object created by the filter chain.\n* `chain`: The next filter in the chain, which may be null if this is the last filter.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n\n    Matcher urlMatcher = ADD_AMENITY_REQUEST_PATTERN.matcher(request.getRequestURI());\n\n    if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n      response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n      return;\n    }\n\n    super.doFilterInternal(request, response, chain);\n  }\n",
              "description": ""
            },
            "name": "doFilterInternal",
            "location": {
              "start": 92,
              "insert": 33,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 32,
                "end": 91
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 59
          },
          {
            "id": "547e8872-a771-00a7-1a48-3ab0c9ddbeb7",
            "ancestors": [
              "cb390ce8-25f3-878b-bb4a-72118d3b854d"
            ],
            "type": "function",
            "description": "determines if a user is an admin of a community based on the current SecurityContext and the request URI.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request being processed and provides the community ID from the request URI.\n\n* `request`: The incoming HTTP request object containing information about the client's request.\n\nThe following attributes of `request` are relevant to this function:\n\n* `getRequestURI()`: Returns the fully qualified URL of the current request, including any query parameters or fragments.\n* `split(\"/\")`): Splits the URL into its component parts (scheme, authority, path, and fragment), but does not alter the original object.\n* `getParameterMap()`: Returns a map of all the HTTP request parameters, keyed by parameter name.\n* `getAttributeMap()`: Returns a map of all the HTTP request attributes, keyed by attribute name.\n* `getMethod()`: Returns the HTTP method (e.g., GET, POST, PUT, DELETE) used in the current request.\n* `getProtocol()`: Returns the HTTP protocol version (e.g., HTTP/1.1 or HTTP/2) used in the current request.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "a boolean value indicating whether the current user is an admin of a specified community.\n\n* `SecurityContextHolder`: This is an instance of `SecurityContextHolder`, which provides information about the current security context.\n* `Authentication`: This is an instance of `Authentication`, representing the security token passed in the request.\n* `Principal`: This is a `UserDetails` object, containing information about the user making the request.\n* `communityId`: This is the ID of the community being checked for admin status.\n* `communityService`: This is an instance of `CommunityService`, providing methods for interacting with communities.\n* `findCommunityAdminsById()`: This method retrieves a list of admins for a given community ID, using the `Community` service.\n* `flatMap()`: This method flattens the list of admins into a stream, allowing for further processing.\n* `map()`: This method maps each admin to its user ID, allowing for filtering.\n* `filter()`: This method filters the list of user IDs to find the ID of the user who is an admin for the specified community.\n* `findFirst()`: This method finds the first element in the filtered list, which is the ID of the user who is an admin for the specified community.\n\nOverall, the function returns a boolean value indicating whether the user making the request is an admin for the specified community, based on their user ID and the admins for that community.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    // Create a mock request object\n    HttpServletRequest request = new MockHttpServletRequest();\n    // Set the community ID to \"communityId\"\n    request.setPathInfo(\"/communities/communityId/amenities\");\n    // Call the isUserCommunityAdmin method with the request as an argument\n    boolean result = isUserCommunityAdmin(request);\n    // Print the result (true or false)\n    System.out.println(result);\n}\n",
              "description": ""
            },
            "name": "isUserCommunityAdmin",
            "location": {
              "start": 137,
              "insert": 106,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 105,
                "end": 136
              }
            },
            "item_type": "method",
            "length": 12,
            "docLength": 31
          }
        ]
      }
    }
  },
  {
    "name": "AppJwt.java",
    "path": "service/src/main/java/com/myhome/security/jwt/AppJwt.java",
    "content": {
      "structured": {
        "description": "A class called `AppJwt` that represents a JWT token used for authentication in an application. The class has two fields: `userId` (a String) and `expiration` (a LocalDateTime), which contain information about the user ID and expiration date of the JWT token, respectively. The `Builder`, `ToString`, and `Getter` annotations are used to specify the builder pattern, string representation, and getter methods for the class.",
        "items": [
          {
            "id": "891c60a1-d197-fbb8-9d43-37206665dbf5",
            "ancestors": [],
            "type": "function",
            "description": "represents a JWT token used for authentication in an application containing user ID and expiration date information.\nFields:\n\t- userId (String): in the AppJwt class represents a unique identifier for a specific user within an application.\n\t- expiration (LocalDateTime): represents the date and time after which the JWT token ceases to be valid or usable.\n\n",
            "fields": [
              {
                "name": "userId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AppJwt",
                "description": "in the AppJwt class represents a unique identifier for a specific user within an application."
              },
              {
                "name": "expiration",
                "type_name": "LocalDateTime",
                "value": null,
                "constant": false,
                "class_name": "AppJwt",
                "description": "represents the date and time after which the JWT token ceases to be valid or usable."
              }
            ],
            "name": "AppJwt",
            "location": {
              "start": 36,
              "insert": 27,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 26,
                "end": 35
              }
            },
            "item_type": "class",
            "length": 7,
            "docLength": 9
          }
        ]
      }
    }
  },
  {
    "name": "AppJwtEncoderDecoder.java",
    "path": "service/src/main/java/com/myhome/security/jwt/AppJwtEncoderDecoder.java",
    "content": {
      "structured": {
        "description": "An interface `AppJwtEncoderDecoder` that provides methods for encoding and decoding Application's JWT. The `encode()` method takes a `Jwt` object and a secret as input and returns an encoded JWT string. The `decode()` method takes an encoded JWT string and the secret as input and returns a `Jwt` object representing the original application data.",
        "items": [
          {
            "id": "7e2ebb0d-0c5c-f58e-964e-389ec7b54410",
            "ancestors": [],
            "type": "function",
            "description": "provides a logic to encode and decode Application's JWT.",
            "name": "AppJwtEncoderDecoder",
            "location": {
              "start": 25,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 21,
                "end": 24
              }
            },
            "item_type": "interface",
            "length": 5,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "NoSecretJwtEncoderDecoder.java",
    "path": "service/src/main/java/com/myhome/security/jwt/impl/NoSecretJwtEncoderDecoder.java",
    "content": {
      "structured": {
        "description": "An `AppJwtEncoderDecoder` class that implements the `AppJwtEncoderDecoder` interface. It provides a concrete implementation for testing purposes only. The class takes an encoded JWT token and a secret key as input, decodes the token by splitting it into two parts using a provided separator, and returns an instance of the `AppJwt` class with extracted user ID and expiration time. Additionally, the class provides an override method for encoding a JWT token with an additional field containing the user ID and expiration date.",
        "items": [
          {
            "id": "d3ad36fc-9c80-d2a5-e844-8abe2811ddb7",
            "ancestors": [],
            "type": "function",
            "description": "is an implementation of the AppJwtEncoderDecoder interface that decodes a JSON Web Token (JWT) and returns an instance of the AppJwt class with extracted user ID and expiration time. The class splits the encoded JWT into two parts using a separator and then uses these values to construct the AppJwt object's user ID and expiration fields. Additionally, the class provides an encode method that concatenates the user ID and expiration time of the JWT and returns the encoded string.",
            "name": "NoSecretJwtEncoderDecoder",
            "location": {
              "start": 31,
              "insert": 28,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 27,
                "end": 30
              }
            },
            "item_type": "class",
            "length": 77,
            "docLength": 3
          },
          {
            "id": "30c47e83-ba27-9490-344b-6fe374b7ae32",
            "ancestors": [
              "d3ad36fc-9c80-d2a5-e844-8abe2811ddb7"
            ],
            "type": "function",
            "description": "decodes a JSON Web Token (JWT) and returns an instance of the `AppJwt` class with the extracted user ID and expiration time.",
            "params": [
              {
                "name": "encodedJwt",
                "type_name": "String",
                "description": "JSON Web Token (JWT) that is being decoded and transformed into an `AppJwt` object.",
                "complex_type": false
              },
              {
                "name": "secret",
                "type_name": "String",
                "description": "secret key used for signing the JWT, which is required to validate the signature and unserstand the content of the JWT.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "AppJwt",
              "description": "an instance of `AppJwt` with the user ID and expiration time extracted from the encoded JWT.\n\n* `AppJwt`: This is the class that represents an JSON Web Token (JWT). It has several attributes such as `userId`, `expiration`, and `build()` method to construct a new JWT instance.\n* `builder()` method: This is a factory method used to create a new `AppJwt` builder instance, which can be used to modify the properties of the JWT before building it.\n* `split(SEPARATOR)`: This method splits the input `encodedJwt` string into an array of strings using the specified `SEPARATOR`.\n* `LocalDateTime.parse()`: This method parses the second element of the array, which represents the expiration time of the JWT in ISO 8601 format. It creates a `LocalDateTime` object representing the expiration date and time.\n\nThe output of the `decode` function is an instance of `AppJwt`, which contains the user ID and expiration date and time extracted from the input `encodedJwt`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override public AppJwt decode(String encodedJwt, String secret) {\n    String[] strings = encodedJwt.split(SEPARATOR);\n    return AppJwt.builder().userId(strings[0]).expiration(LocalDateTime.parse(strings[1])).build();\n  }\n",
              "description": "\nThe `decode` method takes two inputs: a string representing the JSON Web Token (encoded JWT), and a secret key used to verify the digital signature of the JWT, which is necessary for authenticating the user and determining whether the JWT has been tampered with. The method first splits the encoded JWT token using the `SEPARATOR` constant into an array of strings, where the first element represents the user ID and the second element represents the expiration time of the JWT. These values are then used to construct a new instance of the `AppJwt` class with the `userId` property set to the first element in the array and the `expiration` property set to the second element in the array, which is converted to a `LocalDateTime` object using the `parse()` method. This object is then used to create a new instance of the `AppJwt` class with default values."
            },
            "name": "decode",
            "location": {
              "start": 75,
              "insert": 36,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 35,
                "end": 74
              }
            },
            "item_type": "method",
            "length": 4,
            "docLength": 39
          },
          {
            "id": "11c259fb-1a35-9695-7748-9c1cab865ee1",
            "ancestors": [
              "d3ad36fc-9c80-d2a5-e844-8abe2811ddb7"
            ],
            "type": "function",
            "description": "takes a JWT object and a secret as input, and returns a encoded string containing the user ID and expiration time.",
            "params": [
              {
                "name": "jwt",
                "type_name": "AppJwt",
                "description": "Java library for JSON Web Tokens, which is used to generate and validate tokens in this function.\n\n* `jwt`: A `AppJwt` object representing a JSON Web Token.\n* `secret`: The secret used to sign the token.",
                "complex_type": true
              },
              {
                "name": "secret",
                "type_name": "String",
                "description": "secret key used to sign the JWT token.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a base64-encoded string representing the user ID and expiration time of the JWT.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "AppJwt jwt = AppJwt.builder().userId(123).expiration(LocalDateTime.now()).build();\nString secret = \"my-secret\";\nString encodedJwt = new NoSecretJwtEncoderDecoder().encode(jwt, secret);\n",
              "description": "\nIn the example above, we first create an `AppJwt` object with a user ID of 123 and an expiration time set to the current date and time. We then create a `String` variable called `secret` that stores the secret key used for encoding the JWT token. Finally, we call the `encode()` method of the `NoSecretJwtEncoderDecoder` class by passing in the `jwt` object and the `secret` string as arguments. The return value of the `encode()` method is stored in a new variable called `encodedJwt`.\n\nThis example demonstrates how to use the `encode()` method of the `NoSecretJwtEncoderDecoder` class to encode an instance of the `AppJwt` class into a JWT token. The encoded JWT token can then be sent to the client or stored in a database for later use."
            },
            "name": "encode",
            "location": {
              "start": 104,
              "insert": 80,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 79,
                "end": 103
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 24
          }
        ]
      }
    }
  },
  {
    "name": "SecretJwtEncoderDecoder.java",
    "path": "service/src/main/java/com/myhome/security/jwt/impl/SecretJwtEncoderDecoder.java",
    "content": {
      "structured": {
        "description": "An implementation of AppJwtEncoderDecoder, which is responsible for decoding and encoding JSON Web Tokens (JWTs). The decode function takes a JWT and a secret key as input and returns an updated AppJwt instance with a validated user ID and expiration date. The encode function takes an AppJwt instance and a secret key as input and generates a new JWT with an updated expiration time based on the current date and time, and signs it using HmacShaKeyFor and HS512 algorithm.",
        "items": [
          {
            "id": "aaf6c24a-ae94-049f-e74f-b84c65e7f9f2",
            "ancestors": [],
            "type": "function",
            "description": "is an implementation of the AppJwtEncoderDecoder interface that handles encoding and decoding of JSON Web Tokens (JWTs). The class provides methods for encoding a JWT with a validated expiration time and a unique subject ID, signed with HMAC-SHA512 using a secret key. It also provides a method for decoding a JWT and extracting the user ID, expiration date, and other relevant information.",
            "name": "SecretJwtEncoderDecoder",
            "location": {
              "start": 36,
              "insert": 33,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 32,
                "end": 35
              }
            },
            "item_type": "class",
            "length": 116,
            "docLength": 3
          },
          {
            "id": "0808f866-87cc-d6a9-564f-d8a080cb9178",
            "ancestors": [
              "aaf6c24a-ae94-049f-e74f-b84c65e7f9f2"
            ],
            "type": "function",
            "description": "decodes a JSON Web Token (JWT) and returns an updated `AppJwt` object with the user ID and expiration time extracted from the decoded JWT.",
            "params": [
              {
                "name": "encodedJwt",
                "type_name": "String",
                "description": "JSON Web Token (JWT) that is to be decoded and transformed into an `AppJwt` object.",
                "complex_type": false
              },
              {
                "name": "secret",
                "type_name": "String",
                "description": "HMAC-SHA key for verifying the signature of the JWT.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "AppJwt",
              "description": "an instance of `AppJwt` representing the decoded JWT.\n\n* `userId`: The subject of the JWT claim, representing the user ID.\n* `expiration`: The expiration time of the JWT, represented as an Instant object in UTC time zone.\n\nThe output of the `decode` function is a new instance of the `AppJwt` class, which contains the decoded JWT claims and additional attributes such as the user ID and expiration time.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "AppJwt jwt = SecretJwtEncoderDecoder.decode(\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\", \"my-secret\");\n",
              "description": "\nHere, the string \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\" is the JSON Web Token (JWT) and \"my-secret\" is the secret key used for signing the JWT.\n\nThe decode method will parse the JWT using the provided secret key, extract the user ID and expiration date from the JWT claims, and return an instance of AppJwt with these values."
            },
            "name": "decode",
            "location": {
              "start": 83,
              "insert": 40,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 39,
                "end": 82
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 43
          },
          {
            "id": "a0fe0d26-609e-5988-5841-ff9f4232d1e7",
            "ancestors": [
              "aaf6c24a-ae94-049f-e74f-b84c65e7f9f2"
            ],
            "type": "function",
            "description": "takes a `Jwt` object and a secret as input, generates a new JWT with an updated expiration date based on the current time zone, and signs it with a HMAC-SHA-512 algorithm using the provided secret.",
            "params": [
              {
                "name": "jwt",
                "type_name": "AppJwt",
                "description": "JWT token to be encoded, which contains the user ID and expiration time.\n\n1. `jwt`: The input JWT, which contains information about the user and the expiration time.\n2. `secret`: A secret key used for HMAC-SHA-512 signature generation.",
                "complex_type": true
              },
              {
                "name": "secret",
                "type_name": "String",
                "description": "128-bit HMAC key used for signing the JWT.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a compact JWT representing the user ID, expiration time, and HMAC-SHA-512 signature using the provided secret key.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "AppJwt jwt = new AppJwt(\"user-id\", LocalDateTime.now());\nString secret = \"my-secret\";\nString encodedJwt = SecretJwtEncoderDecoder.encode(jwt, secret);\n// encodedJwt now contains a JWT string that represents the user's identity and expiration date\n",
              "description": "\nIn this example, we create an instance of AppJwt using the constructor that takes in a user ID and an expiration date as arguments. We then set a secret key to be used for signing the JWT. Next, we call the encode method on SecretJwtEncoderDecoder with the AppJwt instance as its first argument and the secret key as its second argument. The return value of this method is a string that represents a JSON Web Token (JWT) that contains information about the user's identity and expiration date, signed using the HMAC-SHA512 algorithm with the provided secret key."
            },
            "name": "encode",
            "location": {
              "start": 144,
              "insert": 97,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 96,
                "end": 143
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 47
          }
        ]
      }
    }
  },
  {
    "name": "AmenityService.java",
    "path": "service/src/main/java/com/myhome/services/AmenityService.java",
    "content": {
      "structured": {
        "description": "An interface for managing amenities within a community through various methods such as creating, retrieving, deleting, and updating amenities. The interface includes methods like `createAmenities`, `getAmenityDetails`, `deleteAmenity`, `listAllAmenities`, and `updateAmenity`. These methods return optional lists, single entities, or boolean values, indicating the availability of the requested information.",
        "items": [
          {
            "id": "4c53c6ef-85ad-31b5-0349-c59225b5c308",
            "ancestors": [],
            "type": "function",
            "description": "allows for the creation, retrieval, deletion, and update of amenities within a community through various methods that return optional lists, single entities, or boolean values.",
            "name": "AmenityService",
            "location": {
              "start": 30,
              "insert": 25,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 24,
                "end": 29
              }
            },
            "item_type": "interface",
            "length": 12,
            "docLength": 5
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationService.java",
    "path": "service/src/main/java/com/myhome/services/AuthenticationService.java",
    "content": {
      "structured": {
        "description": "An interface `AuthenticationService` that allows for the login of a user through an incoming `LoginRequest`, resulting in an `AuthenticationData` return value. The interface includes one method, `login`, which takes a `LoginRequest` as input and returns an `AuthenticationData`.",
        "items": [
          {
            "id": "446f2a24-cf40-ca97-4c41-e52efb7765cb",
            "ancestors": [],
            "type": "function",
            "description": "allows for the login of a user through an incoming LoginRequest and returns an AuthenticationData value.",
            "name": "AuthenticationService",
            "location": {
              "start": 10,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 5,
                "end": 9
              }
            },
            "item_type": "interface",
            "length": 3,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "BookingService.java",
    "path": "service/src/main/java/com/myhome/services/BookingService.java",
    "content": {
      "structured": {
        "description": "An interface for a booking service that provides a method for deleting bookings based on their amenity and ID. The BookingService interface includes one method, deleteBooking(), which takes two string parameters - amenityId and bookingId - and returns a boolean value indicating whether the booking was successfully deleted.",
        "items": [
          {
            "id": "5b3f623b-3254-9094-954c-ff9d0e4ae6dd",
            "ancestors": [],
            "type": "function",
            "description": "provides a method for deleting bookings based on their amenity and ID.",
            "name": "BookingService",
            "location": {
              "start": 6,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 2,
                "end": 5
              }
            },
            "item_type": "interface",
            "length": 5,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "CommunityService.java",
    "path": "service/src/main/java/com/myhome/services/CommunityService.java",
    "content": {
      "structured": {
        "description": "An interface `CommunityService` that provides methods for managing communities, including creating and listing communities, retrieving community details, managing admins and houses within a community, and deleting a community. The code uses packages from Spring Data Domain, which provides functionality for working with domain objects in a Spring Boot application.",
        "items": [
          {
            "id": "8716b457-80d5-17be-174a-7db9e23432ae",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for creating, listing, and retrieving communities as well as managing admins and houses within a community.",
            "name": "CommunityService",
            "location": {
              "start": 32,
              "insert": 28,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 27,
                "end": 31
              }
            },
            "item_type": "interface",
            "length": 27,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberDocumentService.java",
    "path": "service/src/main/java/com/myhome/services/HouseMemberDocumentService.java",
    "content": {
      "structured": {
        "description": "An interface `HouseMemberDocumentService` that provides methods for managing House Member Documents, including deleting, finding, updating, and creating new ones. The interface uses Spring Web Multipart File and Apache License.",
        "items": [
          {
            "id": "82e78a24-d64f-89af-1145-afbb19d5319c",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for managing House Member Documents, including deleting, finding, updating, and creating new ones.",
            "name": "HouseMemberDocumentService",
            "location": {
              "start": 27,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 26
              }
            },
            "item_type": "interface",
            "length": 12,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "HouseService.java",
    "path": "service/src/main/java/com/myhome/services/HouseService.java",
    "content": {
      "structured": {
        "description": "An interface for managing houses and their members using Spring Data Domain. The interface provides methods for listing all houses and members, adding new members to a house, deleting members from a house, retrieving house details by ID, and listing members for houses belonging to a specific user.",
        "items": [
          {
            "id": "a344ef1b-4c3a-f2b9-334b-7a1847751e5a",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for managing houses and their members, including listing all houses and members, adding new members to a house, deleting members from a house, retrieving house details by ID, and listing members for houses belonging to a specific user.",
            "name": "HouseService",
            "location": {
              "start": 31,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 30
              }
            },
            "item_type": "interface",
            "length": 15,
            "docLength": 5
          }
        ]
      }
    }
  },
  {
    "name": "MailService.java",
    "path": "service/src/main/java/com/myhome/services/MailService.java",
    "content": {
      "structured": {
        "description": "An interface `MailService` that provides methods for sending emails related to user accounts, including password recovery codes, account creation and confirmation, and password changes. The interface specifies four methods: `sendPasswordRecoverCode`, `sendAccountCreated`, `sendPasswordSuccessfullyChanged`, and `sendAccountConfirmed`. These methods are used to send various types of emails to users.",
        "items": [
          {
            "id": "cf7303ee-d48a-2193-464d-82851b8d97c3",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for sending emails related to user accounts, including password recovery codes, account creation and confirmation, and password changes.",
            "name": "MailService",
            "location": {
              "start": 11,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 5,
                "end": 10
              }
            },
            "item_type": "interface",
            "length": 10,
            "docLength": 5
          }
        ]
      }
    }
  },
  {
    "name": "PaymentService.java",
    "path": "service/src/main/java/com/myhome/services/PaymentService.java",
    "content": {
      "structured": {
        "description": "An interface `PaymentService` that provides methods for scheduling payments, retrieving payment details, and managing payments by member or administrator. The interface includes methods such as `schedulePayment`, `getPaymentDetails`, `getPaymentsByMember`, `getPaymentsByAdmin`, and `getHouseMember`. These methods allow for the management of payments in a system, including scheduling future payments and retrieving details about past payments.",
        "items": [
          {
            "id": "d9e1e7b3-dbb1-ccbf-eb42-15f6660a56b7",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for scheduling payments, retrieving payment details, and managing payments by member or administrator.",
            "name": "PaymentService",
            "location": {
              "start": 34,
              "insert": 30,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 29,
                "end": 33
              }
            },
            "item_type": "interface",
            "length": 11,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "SecurityTokenService.java",
    "path": "service/src/main/java/com/myhome/services/SecurityTokenService.java",
    "content": {
      "structured": {
        "description": "An interface SecurityTokenService that allows for the creation and use of security tokens for email confirmation and password resetting in a Java application. The interface defines three methods: createEmailConfirmToken, createPasswordResetToken, and useToken. These methods allow for the creation of security tokens, their usage, and the ability to verify their validity.",
        "items": [
          {
            "id": "f636c97d-649c-648b-2a43-16680b7994cf",
            "ancestors": [],
            "type": "function",
            "description": "allows for the creation and use of security tokens for email confirmation and password resetting in a Java application.",
            "name": "SecurityTokenService",
            "location": {
              "start": 10,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 5,
                "end": 9
              }
            },
            "item_type": "interface",
            "length": 8,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "UserService.java",
    "path": "service/src/main/java/com/myhome/services/UserService.java",
    "content": {
      "structured": {
        "description": "An interface for a user service layer, providing methods for creating and managing users in a system. These include creating new users, resending email confirmations, listing all users, resetting passwords, and confirming or requesting password reset. The interface uses packages from Spring Data and Apache Licensing.",
        "items": [
          {
            "id": "141c30be-5bad-45a2-2b49-2a8ef48a64df",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for creating and managing users in a system, including creating new users, resending email confirmations, listing all users, and resetting passwords.",
            "name": "UserService",
            "location": {
              "start": 34,
              "insert": 30,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 29,
                "end": 33
              }
            },
            "item_type": "interface",
            "length": 17,
            "docLength": 4
          }
        ]
      }
    }
  }
]